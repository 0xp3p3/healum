// Autogenerated by Thrift Compiler (0.9.3)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package zipkindependencies

import (
	"bytes"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var GoUnusedProtection__ int

// Attributes:
//  - Parent: parent service name (caller)
//  - Child: child service name (callee)
//  - CallCount: calls made during the duration of this link
type DependencyLink struct {
	Parent string `thrift:"parent,1" json:"parent"`
	Child  string `thrift:"child,2" json:"child"`
	// unused field # 3
	CallCount int64 `thrift:"callCount,4" json:"callCount"`
}

func NewDependencyLink() *DependencyLink {
	return &DependencyLink{}
}

func (p *DependencyLink) GetParent() string {
	return p.Parent
}

func (p *DependencyLink) GetChild() string {
	return p.Child
}

func (p *DependencyLink) GetCallCount() int64 {
	return p.CallCount
}
func (p *DependencyLink) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DependencyLink) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Parent = v
	}
	return nil
}

func (p *DependencyLink) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Child = v
	}
	return nil
}

func (p *DependencyLink) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.CallCount = v
	}
	return nil
}

func (p *DependencyLink) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("DependencyLink"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DependencyLink) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("parent", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:parent: ", p), err)
	}
	if err := oprot.WriteString(string(p.Parent)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.parent (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:parent: ", p), err)
	}
	return err
}

func (p *DependencyLink) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("child", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:child: ", p), err)
	}
	if err := oprot.WriteString(string(p.Child)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.child (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:child: ", p), err)
	}
	return err
}

func (p *DependencyLink) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("callCount", thrift.I64, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:callCount: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.CallCount)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.callCount (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:callCount: ", p), err)
	}
	return err
}

func (p *DependencyLink) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DependencyLink(%+v)", *p)
}

// Attributes:
//  - StartTs: milliseconds from epoch
//  - EndTs: milliseconds from epoch
//  - Links
type Dependencies struct {
	StartTs int64             `thrift:"start_ts,1" json:"start_ts"`
	EndTs   int64             `thrift:"end_ts,2" json:"end_ts"`
	Links   []*DependencyLink `thrift:"links,3" json:"links"`
}

func NewDependencies() *Dependencies {
	return &Dependencies{}
}

func (p *Dependencies) GetStartTs() int64 {
	return p.StartTs
}

func (p *Dependencies) GetEndTs() int64 {
	return p.EndTs
}

func (p *Dependencies) GetLinks() []*DependencyLink {
	return p.Links
}
func (p *Dependencies) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *Dependencies) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.StartTs = v
	}
	return nil
}

func (p *Dependencies) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.EndTs = v
	}
	return nil
}

func (p *Dependencies) readField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*DependencyLink, 0, size)
	p.Links = tSlice
	for i := 0; i < size; i++ {
		_elem0 := &DependencyLink{}
		if err := _elem0.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem0), err)
		}
		p.Links = append(p.Links, _elem0)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *Dependencies) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Dependencies"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Dependencies) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("start_ts", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:start_ts: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.StartTs)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.start_ts (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:start_ts: ", p), err)
	}
	return err
}

func (p *Dependencies) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("end_ts", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:end_ts: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.EndTs)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.end_ts (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:end_ts: ", p), err)
	}
	return err
}

func (p *Dependencies) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("links", thrift.LIST, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:links: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Links)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Links {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:links: ", p), err)
	}
	return err
}

func (p *Dependencies) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Dependencies(%+v)", *p)
}
