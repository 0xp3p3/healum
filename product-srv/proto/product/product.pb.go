// Code generated by protoc-gen-go. DO NOT EDIT.
// source: server/product-srv/proto/product/product.proto

/*
Package go_micro_srv_product is a generated protocol buffer package.

It is generated from these files:
	server/product-srv/proto/product/product.proto

It has these top-level messages:
	ProductData
	ProductArrData
	ServiceData
	ServiceArrData
	BatchData
	BatchArrData
	AllProductsRequest
	AllProductsResponse
	CreateProductRequest
	CreateProductResponse
	UpdateProductRequest
	UpdateProductResponse
	ReadProductRequest
	ReadProductResponse
	DeleteProductRequest
	DeleteProductResponse
	AutocompleteProductRequest
	AutocompleteProductResponse
	AllServicesRequest
	AllServicesResponse
	CreateServiceRequest
	CreateServiceResponse
	UpdateServiceRequest
	UpdateServiceResponse
	ReadServiceRequest
	ReadServiceResponse
	DeleteServiceRequest
	DeleteServiceResponse
	AutocompleteServiceRequest
	AutocompleteServiceResponse
	AllBatchesRequest
	AllBatchesResponse
	CreateBatchRequest
	CreateBatchResponse
	UpdateBatchRequest
	UpdateBatchResponse
	ReadBatchRequest
	ReadBatchResponse
	DeleteBatchRequest
	DeleteBatchResponse
	Product
	Service
*/
package go_micro_srv_product

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import go_micro_srv_user "server/user-srv/proto/user"
import go_micro_srv_static "server/static-srv/proto/static"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ProductData struct {
	Product *Product `protobuf:"bytes,1,opt,name=product" json:"product,omitempty"`
}

func (m *ProductData) Reset()                    { *m = ProductData{} }
func (m *ProductData) String() string            { return proto.CompactTextString(m) }
func (*ProductData) ProtoMessage()               {}
func (*ProductData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ProductData) GetProduct() *Product {
	if m != nil {
		return m.Product
	}
	return nil
}

type ProductArrData struct {
	Products []*Product `protobuf:"bytes,1,rep,name=products" json:"products,omitempty"`
}

func (m *ProductArrData) Reset()                    { *m = ProductArrData{} }
func (m *ProductArrData) String() string            { return proto.CompactTextString(m) }
func (*ProductArrData) ProtoMessage()               {}
func (*ProductArrData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ProductArrData) GetProducts() []*Product {
	if m != nil {
		return m.Products
	}
	return nil
}

type ServiceData struct {
	Service *Service `protobuf:"bytes,1,opt,name=service" json:"service,omitempty"`
}

func (m *ServiceData) Reset()                    { *m = ServiceData{} }
func (m *ServiceData) String() string            { return proto.CompactTextString(m) }
func (*ServiceData) ProtoMessage()               {}
func (*ServiceData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ServiceData) GetService() *Service {
	if m != nil {
		return m.Service
	}
	return nil
}

type ServiceArrData struct {
	Services []*Service `protobuf:"bytes,1,rep,name=services" json:"services,omitempty"`
}

func (m *ServiceArrData) Reset()                    { *m = ServiceArrData{} }
func (m *ServiceArrData) String() string            { return proto.CompactTextString(m) }
func (*ServiceArrData) ProtoMessage()               {}
func (*ServiceArrData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ServiceArrData) GetServices() []*Service {
	if m != nil {
		return m.Services
	}
	return nil
}

type BatchData struct {
	Batch *go_micro_srv_static.Batch `protobuf:"bytes,1,opt,name=batch" json:"batch,omitempty"`
}

func (m *BatchData) Reset()                    { *m = BatchData{} }
func (m *BatchData) String() string            { return proto.CompactTextString(m) }
func (*BatchData) ProtoMessage()               {}
func (*BatchData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *BatchData) GetBatch() *go_micro_srv_static.Batch {
	if m != nil {
		return m.Batch
	}
	return nil
}

type BatchArrData struct {
	Batches []*go_micro_srv_static.Batch `protobuf:"bytes,1,rep,name=batches" json:"batches,omitempty"`
}

func (m *BatchArrData) Reset()                    { *m = BatchArrData{} }
func (m *BatchArrData) String() string            { return proto.CompactTextString(m) }
func (*BatchArrData) ProtoMessage()               {}
func (*BatchArrData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *BatchArrData) GetBatches() []*go_micro_srv_static.Batch {
	if m != nil {
		return m.Batches
	}
	return nil
}

type AllProductsRequest struct {
	OrgId         string `protobuf:"bytes,1,opt,name=org_id,json=orgId" json:"org_id,omitempty"`
	TeamId        string `protobuf:"bytes,2,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
	Limit         int64  `protobuf:"varint,3,opt,name=limit" json:"limit,omitempty"`
	Offset        int64  `protobuf:"varint,4,opt,name=offset" json:"offset,omitempty"`
	SortParameter string `protobuf:"bytes,5,opt,name=sort_parameter,json=sortParameter" json:"sort_parameter,omitempty"`
	SortDirection string `protobuf:"bytes,6,opt,name=sort_direction,json=sortDirection" json:"sort_direction,omitempty"`
}

func (m *AllProductsRequest) Reset()                    { *m = AllProductsRequest{} }
func (m *AllProductsRequest) String() string            { return proto.CompactTextString(m) }
func (*AllProductsRequest) ProtoMessage()               {}
func (*AllProductsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *AllProductsRequest) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *AllProductsRequest) GetTeamId() string {
	if m != nil {
		return m.TeamId
	}
	return ""
}

func (m *AllProductsRequest) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *AllProductsRequest) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *AllProductsRequest) GetSortParameter() string {
	if m != nil {
		return m.SortParameter
	}
	return ""
}

func (m *AllProductsRequest) GetSortDirection() string {
	if m != nil {
		return m.SortDirection
	}
	return ""
}

type AllProductsResponse struct {
	Data    *ProductArrData `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	Code    int64           `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Message string          `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *AllProductsResponse) Reset()                    { *m = AllProductsResponse{} }
func (m *AllProductsResponse) String() string            { return proto.CompactTextString(m) }
func (*AllProductsResponse) ProtoMessage()               {}
func (*AllProductsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *AllProductsResponse) GetData() *ProductArrData {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *AllProductsResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *AllProductsResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type CreateProductRequest struct {
	Product *Product `protobuf:"bytes,1,opt,name=product" json:"product,omitempty"`
	OrgId   string   `protobuf:"bytes,2,opt,name=org_id,json=orgId" json:"org_id,omitempty"`
	TeamId  string   `protobuf:"bytes,3,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
}

func (m *CreateProductRequest) Reset()                    { *m = CreateProductRequest{} }
func (m *CreateProductRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateProductRequest) ProtoMessage()               {}
func (*CreateProductRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *CreateProductRequest) GetProduct() *Product {
	if m != nil {
		return m.Product
	}
	return nil
}

func (m *CreateProductRequest) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *CreateProductRequest) GetTeamId() string {
	if m != nil {
		return m.TeamId
	}
	return ""
}

type CreateProductResponse struct {
	Data    *ProductData `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	Code    int64        `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Message string       `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *CreateProductResponse) Reset()                    { *m = CreateProductResponse{} }
func (m *CreateProductResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateProductResponse) ProtoMessage()               {}
func (*CreateProductResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *CreateProductResponse) GetData() *ProductData {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *CreateProductResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *CreateProductResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type UpdateProductRequest struct {
	Product *Product `protobuf:"bytes,1,opt,name=product" json:"product,omitempty"`
	OrgId   string   `protobuf:"bytes,2,opt,name=org_id,json=orgId" json:"org_id,omitempty"`
	TeamId  string   `protobuf:"bytes,3,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
}

func (m *UpdateProductRequest) Reset()                    { *m = UpdateProductRequest{} }
func (m *UpdateProductRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateProductRequest) ProtoMessage()               {}
func (*UpdateProductRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *UpdateProductRequest) GetProduct() *Product {
	if m != nil {
		return m.Product
	}
	return nil
}

func (m *UpdateProductRequest) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *UpdateProductRequest) GetTeamId() string {
	if m != nil {
		return m.TeamId
	}
	return ""
}

type UpdateProductResponse struct {
	Data    *ProductData `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	Code    int64        `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Message string       `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *UpdateProductResponse) Reset()                    { *m = UpdateProductResponse{} }
func (m *UpdateProductResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateProductResponse) ProtoMessage()               {}
func (*UpdateProductResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *UpdateProductResponse) GetData() *ProductData {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *UpdateProductResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *UpdateProductResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type ReadProductRequest struct {
	Id     string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	OrgId  string `protobuf:"bytes,2,opt,name=org_id,json=orgId" json:"org_id,omitempty"`
	TeamId string `protobuf:"bytes,3,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
}

func (m *ReadProductRequest) Reset()                    { *m = ReadProductRequest{} }
func (m *ReadProductRequest) String() string            { return proto.CompactTextString(m) }
func (*ReadProductRequest) ProtoMessage()               {}
func (*ReadProductRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *ReadProductRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ReadProductRequest) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *ReadProductRequest) GetTeamId() string {
	if m != nil {
		return m.TeamId
	}
	return ""
}

type ReadProductResponse struct {
	Data    *ProductData `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	Code    int64        `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Message string       `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *ReadProductResponse) Reset()                    { *m = ReadProductResponse{} }
func (m *ReadProductResponse) String() string            { return proto.CompactTextString(m) }
func (*ReadProductResponse) ProtoMessage()               {}
func (*ReadProductResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *ReadProductResponse) GetData() *ProductData {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *ReadProductResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *ReadProductResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type DeleteProductRequest struct {
	Id     string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	OrgId  string `protobuf:"bytes,2,opt,name=org_id,json=orgId" json:"org_id,omitempty"`
	TeamId string `protobuf:"bytes,3,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
}

func (m *DeleteProductRequest) Reset()                    { *m = DeleteProductRequest{} }
func (m *DeleteProductRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteProductRequest) ProtoMessage()               {}
func (*DeleteProductRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *DeleteProductRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *DeleteProductRequest) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *DeleteProductRequest) GetTeamId() string {
	if m != nil {
		return m.TeamId
	}
	return ""
}

type DeleteProductResponse struct {
	Code    int64  `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
}

func (m *DeleteProductResponse) Reset()                    { *m = DeleteProductResponse{} }
func (m *DeleteProductResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteProductResponse) ProtoMessage()               {}
func (*DeleteProductResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *DeleteProductResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *DeleteProductResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type AutocompleteProductRequest struct {
	Title string `protobuf:"bytes,1,opt,name=title" json:"title,omitempty"`
}

func (m *AutocompleteProductRequest) Reset()                    { *m = AutocompleteProductRequest{} }
func (m *AutocompleteProductRequest) String() string            { return proto.CompactTextString(m) }
func (*AutocompleteProductRequest) ProtoMessage()               {}
func (*AutocompleteProductRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *AutocompleteProductRequest) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

type AutocompleteProductResponse struct {
	Data    *ProductArrData `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	Code    int64           `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Message string          `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *AutocompleteProductResponse) Reset()                    { *m = AutocompleteProductResponse{} }
func (m *AutocompleteProductResponse) String() string            { return proto.CompactTextString(m) }
func (*AutocompleteProductResponse) ProtoMessage()               {}
func (*AutocompleteProductResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *AutocompleteProductResponse) GetData() *ProductArrData {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *AutocompleteProductResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *AutocompleteProductResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type AllServicesRequest struct {
	OrgId         string `protobuf:"bytes,1,opt,name=org_id,json=orgId" json:"org_id,omitempty"`
	TeamId        string `protobuf:"bytes,2,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
	Limit         int64  `protobuf:"varint,3,opt,name=limit" json:"limit,omitempty"`
	Offset        int64  `protobuf:"varint,4,opt,name=offset" json:"offset,omitempty"`
	SortParameter string `protobuf:"bytes,5,opt,name=sort_parameter,json=sortParameter" json:"sort_parameter,omitempty"`
	SortDirection string `protobuf:"bytes,6,opt,name=sort_direction,json=sortDirection" json:"sort_direction,omitempty"`
}

func (m *AllServicesRequest) Reset()                    { *m = AllServicesRequest{} }
func (m *AllServicesRequest) String() string            { return proto.CompactTextString(m) }
func (*AllServicesRequest) ProtoMessage()               {}
func (*AllServicesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *AllServicesRequest) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *AllServicesRequest) GetTeamId() string {
	if m != nil {
		return m.TeamId
	}
	return ""
}

func (m *AllServicesRequest) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *AllServicesRequest) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *AllServicesRequest) GetSortParameter() string {
	if m != nil {
		return m.SortParameter
	}
	return ""
}

func (m *AllServicesRequest) GetSortDirection() string {
	if m != nil {
		return m.SortDirection
	}
	return ""
}

type AllServicesResponse struct {
	Data    *ServiceArrData `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	Code    int64           `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Message string          `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *AllServicesResponse) Reset()                    { *m = AllServicesResponse{} }
func (m *AllServicesResponse) String() string            { return proto.CompactTextString(m) }
func (*AllServicesResponse) ProtoMessage()               {}
func (*AllServicesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *AllServicesResponse) GetData() *ServiceArrData {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *AllServicesResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *AllServicesResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type CreateServiceRequest struct {
	Service *Service `protobuf:"bytes,1,opt,name=service" json:"service,omitempty"`
	OrgId   string   `protobuf:"bytes,2,opt,name=org_id,json=orgId" json:"org_id,omitempty"`
	TeamId  string   `protobuf:"bytes,3,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
}

func (m *CreateServiceRequest) Reset()                    { *m = CreateServiceRequest{} }
func (m *CreateServiceRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateServiceRequest) ProtoMessage()               {}
func (*CreateServiceRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *CreateServiceRequest) GetService() *Service {
	if m != nil {
		return m.Service
	}
	return nil
}

func (m *CreateServiceRequest) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *CreateServiceRequest) GetTeamId() string {
	if m != nil {
		return m.TeamId
	}
	return ""
}

type CreateServiceResponse struct {
	Data    *ServiceData `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	Code    int64        `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Message string       `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *CreateServiceResponse) Reset()                    { *m = CreateServiceResponse{} }
func (m *CreateServiceResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateServiceResponse) ProtoMessage()               {}
func (*CreateServiceResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *CreateServiceResponse) GetData() *ServiceData {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *CreateServiceResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *CreateServiceResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type UpdateServiceRequest struct {
	Service *Service `protobuf:"bytes,1,opt,name=service" json:"service,omitempty"`
	OrgId   string   `protobuf:"bytes,2,opt,name=org_id,json=orgId" json:"org_id,omitempty"`
	TeamId  string   `protobuf:"bytes,3,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
}

func (m *UpdateServiceRequest) Reset()                    { *m = UpdateServiceRequest{} }
func (m *UpdateServiceRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateServiceRequest) ProtoMessage()               {}
func (*UpdateServiceRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *UpdateServiceRequest) GetService() *Service {
	if m != nil {
		return m.Service
	}
	return nil
}

func (m *UpdateServiceRequest) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *UpdateServiceRequest) GetTeamId() string {
	if m != nil {
		return m.TeamId
	}
	return ""
}

type UpdateServiceResponse struct {
	Data    *ServiceData `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	Code    int64        `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Message string       `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *UpdateServiceResponse) Reset()                    { *m = UpdateServiceResponse{} }
func (m *UpdateServiceResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateServiceResponse) ProtoMessage()               {}
func (*UpdateServiceResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *UpdateServiceResponse) GetData() *ServiceData {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *UpdateServiceResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *UpdateServiceResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type ReadServiceRequest struct {
	Id     string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	OrgId  string `protobuf:"bytes,2,opt,name=org_id,json=orgId" json:"org_id,omitempty"`
	TeamId string `protobuf:"bytes,3,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
}

func (m *ReadServiceRequest) Reset()                    { *m = ReadServiceRequest{} }
func (m *ReadServiceRequest) String() string            { return proto.CompactTextString(m) }
func (*ReadServiceRequest) ProtoMessage()               {}
func (*ReadServiceRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *ReadServiceRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ReadServiceRequest) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *ReadServiceRequest) GetTeamId() string {
	if m != nil {
		return m.TeamId
	}
	return ""
}

type ReadServiceResponse struct {
	Data    *ServiceData `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	Code    int64        `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Message string       `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *ReadServiceResponse) Reset()                    { *m = ReadServiceResponse{} }
func (m *ReadServiceResponse) String() string            { return proto.CompactTextString(m) }
func (*ReadServiceResponse) ProtoMessage()               {}
func (*ReadServiceResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *ReadServiceResponse) GetData() *ServiceData {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *ReadServiceResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *ReadServiceResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type DeleteServiceRequest struct {
	Id     string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	OrgId  string `protobuf:"bytes,2,opt,name=org_id,json=orgId" json:"org_id,omitempty"`
	TeamId string `protobuf:"bytes,3,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
}

func (m *DeleteServiceRequest) Reset()                    { *m = DeleteServiceRequest{} }
func (m *DeleteServiceRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteServiceRequest) ProtoMessage()               {}
func (*DeleteServiceRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *DeleteServiceRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *DeleteServiceRequest) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *DeleteServiceRequest) GetTeamId() string {
	if m != nil {
		return m.TeamId
	}
	return ""
}

type DeleteServiceResponse struct {
	Code    int64  `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
}

func (m *DeleteServiceResponse) Reset()                    { *m = DeleteServiceResponse{} }
func (m *DeleteServiceResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteServiceResponse) ProtoMessage()               {}
func (*DeleteServiceResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *DeleteServiceResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *DeleteServiceResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type AutocompleteServiceRequest struct {
	Title string `protobuf:"bytes,1,opt,name=title" json:"title,omitempty"`
}

func (m *AutocompleteServiceRequest) Reset()                    { *m = AutocompleteServiceRequest{} }
func (m *AutocompleteServiceRequest) String() string            { return proto.CompactTextString(m) }
func (*AutocompleteServiceRequest) ProtoMessage()               {}
func (*AutocompleteServiceRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func (m *AutocompleteServiceRequest) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

type AutocompleteServiceResponse struct {
	Data    *ServiceArrData `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	Code    int64           `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Message string          `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *AutocompleteServiceResponse) Reset()                    { *m = AutocompleteServiceResponse{} }
func (m *AutocompleteServiceResponse) String() string            { return proto.CompactTextString(m) }
func (*AutocompleteServiceResponse) ProtoMessage()               {}
func (*AutocompleteServiceResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

func (m *AutocompleteServiceResponse) GetData() *ServiceArrData {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *AutocompleteServiceResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *AutocompleteServiceResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type AllBatchesRequest struct {
	OrgId         string `protobuf:"bytes,1,opt,name=org_id,json=orgId" json:"org_id,omitempty"`
	TeamId        string `protobuf:"bytes,2,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
	Limit         int64  `protobuf:"varint,3,opt,name=limit" json:"limit,omitempty"`
	Offset        int64  `protobuf:"varint,4,opt,name=offset" json:"offset,omitempty"`
	SortParameter string `protobuf:"bytes,5,opt,name=sort_parameter,json=sortParameter" json:"sort_parameter,omitempty"`
	SortDirection string `protobuf:"bytes,6,opt,name=sort_direction,json=sortDirection" json:"sort_direction,omitempty"`
}

func (m *AllBatchesRequest) Reset()                    { *m = AllBatchesRequest{} }
func (m *AllBatchesRequest) String() string            { return proto.CompactTextString(m) }
func (*AllBatchesRequest) ProtoMessage()               {}
func (*AllBatchesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30} }

func (m *AllBatchesRequest) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *AllBatchesRequest) GetTeamId() string {
	if m != nil {
		return m.TeamId
	}
	return ""
}

func (m *AllBatchesRequest) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *AllBatchesRequest) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *AllBatchesRequest) GetSortParameter() string {
	if m != nil {
		return m.SortParameter
	}
	return ""
}

func (m *AllBatchesRequest) GetSortDirection() string {
	if m != nil {
		return m.SortDirection
	}
	return ""
}

type AllBatchesResponse struct {
	Data    *BatchArrData `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	Code    int64         `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Message string        `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *AllBatchesResponse) Reset()                    { *m = AllBatchesResponse{} }
func (m *AllBatchesResponse) String() string            { return proto.CompactTextString(m) }
func (*AllBatchesResponse) ProtoMessage()               {}
func (*AllBatchesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{31} }

func (m *AllBatchesResponse) GetData() *BatchArrData {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *AllBatchesResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *AllBatchesResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type CreateBatchRequest struct {
	Batch  *go_micro_srv_static.Batch `protobuf:"bytes,1,opt,name=batch" json:"batch,omitempty"`
	OrgId  string                     `protobuf:"bytes,2,opt,name=org_id,json=orgId" json:"org_id,omitempty"`
	TeamId string                     `protobuf:"bytes,3,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
}

func (m *CreateBatchRequest) Reset()                    { *m = CreateBatchRequest{} }
func (m *CreateBatchRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateBatchRequest) ProtoMessage()               {}
func (*CreateBatchRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{32} }

func (m *CreateBatchRequest) GetBatch() *go_micro_srv_static.Batch {
	if m != nil {
		return m.Batch
	}
	return nil
}

func (m *CreateBatchRequest) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *CreateBatchRequest) GetTeamId() string {
	if m != nil {
		return m.TeamId
	}
	return ""
}

type CreateBatchResponse struct {
	Data    *BatchData `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	Code    int64      `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Message string     `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *CreateBatchResponse) Reset()                    { *m = CreateBatchResponse{} }
func (m *CreateBatchResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateBatchResponse) ProtoMessage()               {}
func (*CreateBatchResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{33} }

func (m *CreateBatchResponse) GetData() *BatchData {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *CreateBatchResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *CreateBatchResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type UpdateBatchRequest struct {
	Batch  *go_micro_srv_static.Batch `protobuf:"bytes,1,opt,name=batch" json:"batch,omitempty"`
	OrgId  string                     `protobuf:"bytes,2,opt,name=org_id,json=orgId" json:"org_id,omitempty"`
	TeamId string                     `protobuf:"bytes,3,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
}

func (m *UpdateBatchRequest) Reset()                    { *m = UpdateBatchRequest{} }
func (m *UpdateBatchRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateBatchRequest) ProtoMessage()               {}
func (*UpdateBatchRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{34} }

func (m *UpdateBatchRequest) GetBatch() *go_micro_srv_static.Batch {
	if m != nil {
		return m.Batch
	}
	return nil
}

func (m *UpdateBatchRequest) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *UpdateBatchRequest) GetTeamId() string {
	if m != nil {
		return m.TeamId
	}
	return ""
}

type UpdateBatchResponse struct {
	Data    *BatchData `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	Code    int64      `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Message string     `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *UpdateBatchResponse) Reset()                    { *m = UpdateBatchResponse{} }
func (m *UpdateBatchResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateBatchResponse) ProtoMessage()               {}
func (*UpdateBatchResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{35} }

func (m *UpdateBatchResponse) GetData() *BatchData {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *UpdateBatchResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *UpdateBatchResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type ReadBatchRequest struct {
	Id     string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	OrgId  string `protobuf:"bytes,2,opt,name=org_id,json=orgId" json:"org_id,omitempty"`
	TeamId string `protobuf:"bytes,3,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
}

func (m *ReadBatchRequest) Reset()                    { *m = ReadBatchRequest{} }
func (m *ReadBatchRequest) String() string            { return proto.CompactTextString(m) }
func (*ReadBatchRequest) ProtoMessage()               {}
func (*ReadBatchRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{36} }

func (m *ReadBatchRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ReadBatchRequest) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *ReadBatchRequest) GetTeamId() string {
	if m != nil {
		return m.TeamId
	}
	return ""
}

type ReadBatchResponse struct {
	Data    *BatchData `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	Code    int64      `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Message string     `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *ReadBatchResponse) Reset()                    { *m = ReadBatchResponse{} }
func (m *ReadBatchResponse) String() string            { return proto.CompactTextString(m) }
func (*ReadBatchResponse) ProtoMessage()               {}
func (*ReadBatchResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{37} }

func (m *ReadBatchResponse) GetData() *BatchData {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *ReadBatchResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *ReadBatchResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type DeleteBatchRequest struct {
	Id     string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	OrgId  string `protobuf:"bytes,2,opt,name=org_id,json=orgId" json:"org_id,omitempty"`
	TeamId string `protobuf:"bytes,3,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
}

func (m *DeleteBatchRequest) Reset()                    { *m = DeleteBatchRequest{} }
func (m *DeleteBatchRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteBatchRequest) ProtoMessage()               {}
func (*DeleteBatchRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{38} }

func (m *DeleteBatchRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *DeleteBatchRequest) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *DeleteBatchRequest) GetTeamId() string {
	if m != nil {
		return m.TeamId
	}
	return ""
}

type DeleteBatchResponse struct {
	Code    int64  `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
}

func (m *DeleteBatchResponse) Reset()                    { *m = DeleteBatchResponse{} }
func (m *DeleteBatchResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteBatchResponse) ProtoMessage()               {}
func (*DeleteBatchResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{39} }

func (m *DeleteBatchResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *DeleteBatchResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type Product struct {
	Id          string                    `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	OrgId       string                    `protobuf:"bytes,2,opt,name=org_id,json=orgId" json:"org_id,omitempty"`
	Created     int64                     `protobuf:"varint,3,opt,name=created" json:"created,omitempty"`
	Updated     int64                     `protobuf:"varint,4,opt,name=updated" json:"updated,omitempty"`
	Name        string                    `protobuf:"bytes,5,opt,name=name" json:"name,omitempty"`
	Description string                    `protobuf:"bytes,6,opt,name=description" json:"description,omitempty"`
	Image       string                    `protobuf:"bytes,7,opt,name=image" json:"image,omitempty"`
	CreatedBy   *go_micro_srv_user.User   `protobuf:"bytes,8,opt,name=createdBy" json:"createdBy,omitempty"`
	Owners      []*go_micro_srv_user.User `protobuf:"bytes,9,rep,name=owners" json:"owners,omitempty"`
}

func (m *Product) Reset()                    { *m = Product{} }
func (m *Product) String() string            { return proto.CompactTextString(m) }
func (*Product) ProtoMessage()               {}
func (*Product) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{40} }

func (m *Product) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Product) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *Product) GetCreated() int64 {
	if m != nil {
		return m.Created
	}
	return 0
}

func (m *Product) GetUpdated() int64 {
	if m != nil {
		return m.Updated
	}
	return 0
}

func (m *Product) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Product) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Product) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *Product) GetCreatedBy() *go_micro_srv_user.User {
	if m != nil {
		return m.CreatedBy
	}
	return nil
}

func (m *Product) GetOwners() []*go_micro_srv_user.User {
	if m != nil {
		return m.Owners
	}
	return nil
}

type Service struct {
	Id      string                       `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Name    string                       `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	OrgId   string                       `protobuf:"bytes,3,opt,name=org_id,json=orgId" json:"org_id,omitempty"`
	Created int64                        `protobuf:"varint,4,opt,name=created" json:"created,omitempty"`
	Updated int64                        `protobuf:"varint,5,opt,name=updated" json:"updated,omitempty"`
	Batches []*go_micro_srv_static.Batch `protobuf:"bytes,6,rep,name=batches" json:"batches,omitempty"`
}

func (m *Service) Reset()                    { *m = Service{} }
func (m *Service) String() string            { return proto.CompactTextString(m) }
func (*Service) ProtoMessage()               {}
func (*Service) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{41} }

func (m *Service) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Service) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Service) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *Service) GetCreated() int64 {
	if m != nil {
		return m.Created
	}
	return 0
}

func (m *Service) GetUpdated() int64 {
	if m != nil {
		return m.Updated
	}
	return 0
}

func (m *Service) GetBatches() []*go_micro_srv_static.Batch {
	if m != nil {
		return m.Batches
	}
	return nil
}

func init() {
	proto.RegisterType((*ProductData)(nil), "go.micro.srv.product.ProductData")
	proto.RegisterType((*ProductArrData)(nil), "go.micro.srv.product.ProductArrData")
	proto.RegisterType((*ServiceData)(nil), "go.micro.srv.product.ServiceData")
	proto.RegisterType((*ServiceArrData)(nil), "go.micro.srv.product.ServiceArrData")
	proto.RegisterType((*BatchData)(nil), "go.micro.srv.product.BatchData")
	proto.RegisterType((*BatchArrData)(nil), "go.micro.srv.product.BatchArrData")
	proto.RegisterType((*AllProductsRequest)(nil), "go.micro.srv.product.AllProductsRequest")
	proto.RegisterType((*AllProductsResponse)(nil), "go.micro.srv.product.AllProductsResponse")
	proto.RegisterType((*CreateProductRequest)(nil), "go.micro.srv.product.CreateProductRequest")
	proto.RegisterType((*CreateProductResponse)(nil), "go.micro.srv.product.CreateProductResponse")
	proto.RegisterType((*UpdateProductRequest)(nil), "go.micro.srv.product.UpdateProductRequest")
	proto.RegisterType((*UpdateProductResponse)(nil), "go.micro.srv.product.UpdateProductResponse")
	proto.RegisterType((*ReadProductRequest)(nil), "go.micro.srv.product.ReadProductRequest")
	proto.RegisterType((*ReadProductResponse)(nil), "go.micro.srv.product.ReadProductResponse")
	proto.RegisterType((*DeleteProductRequest)(nil), "go.micro.srv.product.DeleteProductRequest")
	proto.RegisterType((*DeleteProductResponse)(nil), "go.micro.srv.product.DeleteProductResponse")
	proto.RegisterType((*AutocompleteProductRequest)(nil), "go.micro.srv.product.AutocompleteProductRequest")
	proto.RegisterType((*AutocompleteProductResponse)(nil), "go.micro.srv.product.AutocompleteProductResponse")
	proto.RegisterType((*AllServicesRequest)(nil), "go.micro.srv.product.AllServicesRequest")
	proto.RegisterType((*AllServicesResponse)(nil), "go.micro.srv.product.AllServicesResponse")
	proto.RegisterType((*CreateServiceRequest)(nil), "go.micro.srv.product.CreateServiceRequest")
	proto.RegisterType((*CreateServiceResponse)(nil), "go.micro.srv.product.CreateServiceResponse")
	proto.RegisterType((*UpdateServiceRequest)(nil), "go.micro.srv.product.UpdateServiceRequest")
	proto.RegisterType((*UpdateServiceResponse)(nil), "go.micro.srv.product.UpdateServiceResponse")
	proto.RegisterType((*ReadServiceRequest)(nil), "go.micro.srv.product.ReadServiceRequest")
	proto.RegisterType((*ReadServiceResponse)(nil), "go.micro.srv.product.ReadServiceResponse")
	proto.RegisterType((*DeleteServiceRequest)(nil), "go.micro.srv.product.DeleteServiceRequest")
	proto.RegisterType((*DeleteServiceResponse)(nil), "go.micro.srv.product.DeleteServiceResponse")
	proto.RegisterType((*AutocompleteServiceRequest)(nil), "go.micro.srv.product.AutocompleteServiceRequest")
	proto.RegisterType((*AutocompleteServiceResponse)(nil), "go.micro.srv.product.AutocompleteServiceResponse")
	proto.RegisterType((*AllBatchesRequest)(nil), "go.micro.srv.product.AllBatchesRequest")
	proto.RegisterType((*AllBatchesResponse)(nil), "go.micro.srv.product.AllBatchesResponse")
	proto.RegisterType((*CreateBatchRequest)(nil), "go.micro.srv.product.CreateBatchRequest")
	proto.RegisterType((*CreateBatchResponse)(nil), "go.micro.srv.product.CreateBatchResponse")
	proto.RegisterType((*UpdateBatchRequest)(nil), "go.micro.srv.product.UpdateBatchRequest")
	proto.RegisterType((*UpdateBatchResponse)(nil), "go.micro.srv.product.UpdateBatchResponse")
	proto.RegisterType((*ReadBatchRequest)(nil), "go.micro.srv.product.ReadBatchRequest")
	proto.RegisterType((*ReadBatchResponse)(nil), "go.micro.srv.product.ReadBatchResponse")
	proto.RegisterType((*DeleteBatchRequest)(nil), "go.micro.srv.product.DeleteBatchRequest")
	proto.RegisterType((*DeleteBatchResponse)(nil), "go.micro.srv.product.DeleteBatchResponse")
	proto.RegisterType((*Product)(nil), "go.micro.srv.product.Product")
	proto.RegisterType((*Service)(nil), "go.micro.srv.product.Service")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for ProductService service

type ProductServiceClient interface {
	AllProducts(ctx context.Context, in *AllProductsRequest, opts ...client.CallOption) (*AllProductsResponse, error)
	CreateProduct(ctx context.Context, in *CreateProductRequest, opts ...client.CallOption) (*CreateProductResponse, error)
	UpdateProduct(ctx context.Context, in *UpdateProductRequest, opts ...client.CallOption) (*UpdateProductResponse, error)
	ReadProduct(ctx context.Context, in *ReadProductRequest, opts ...client.CallOption) (*ReadProductResponse, error)
	DeleteProduct(ctx context.Context, in *DeleteProductRequest, opts ...client.CallOption) (*DeleteProductResponse, error)
	AutocompleteProduct(ctx context.Context, in *AutocompleteProductRequest, opts ...client.CallOption) (*AutocompleteProductResponse, error)
	AllServices(ctx context.Context, in *AllServicesRequest, opts ...client.CallOption) (*AllServicesResponse, error)
	CreateService(ctx context.Context, in *CreateServiceRequest, opts ...client.CallOption) (*CreateServiceResponse, error)
	UpdateService(ctx context.Context, in *UpdateServiceRequest, opts ...client.CallOption) (*UpdateServiceResponse, error)
	ReadService(ctx context.Context, in *ReadServiceRequest, opts ...client.CallOption) (*ReadServiceResponse, error)
	DeleteService(ctx context.Context, in *DeleteServiceRequest, opts ...client.CallOption) (*DeleteServiceResponse, error)
	AutocompleteService(ctx context.Context, in *AutocompleteServiceRequest, opts ...client.CallOption) (*AutocompleteServiceResponse, error)
	AllBatches(ctx context.Context, in *AllBatchesRequest, opts ...client.CallOption) (*AllBatchesResponse, error)
	CreateBatch(ctx context.Context, in *CreateBatchRequest, opts ...client.CallOption) (*CreateBatchResponse, error)
	UpdateBatch(ctx context.Context, in *UpdateBatchRequest, opts ...client.CallOption) (*UpdateBatchResponse, error)
	ReadBatch(ctx context.Context, in *ReadBatchRequest, opts ...client.CallOption) (*ReadBatchResponse, error)
	DeleteBatch(ctx context.Context, in *DeleteBatchRequest, opts ...client.CallOption) (*DeleteBatchResponse, error)
}

type productServiceClient struct {
	c           client.Client
	serviceName string
}

func NewProductServiceClient(serviceName string, c client.Client) ProductServiceClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "go.micro.srv.product"
	}
	return &productServiceClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *productServiceClient) AllProducts(ctx context.Context, in *AllProductsRequest, opts ...client.CallOption) (*AllProductsResponse, error) {
	req := c.c.NewRequest(c.serviceName, "ProductService.AllProducts", in)
	out := new(AllProductsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) CreateProduct(ctx context.Context, in *CreateProductRequest, opts ...client.CallOption) (*CreateProductResponse, error) {
	req := c.c.NewRequest(c.serviceName, "ProductService.CreateProduct", in)
	out := new(CreateProductResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) UpdateProduct(ctx context.Context, in *UpdateProductRequest, opts ...client.CallOption) (*UpdateProductResponse, error) {
	req := c.c.NewRequest(c.serviceName, "ProductService.UpdateProduct", in)
	out := new(UpdateProductResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) ReadProduct(ctx context.Context, in *ReadProductRequest, opts ...client.CallOption) (*ReadProductResponse, error) {
	req := c.c.NewRequest(c.serviceName, "ProductService.ReadProduct", in)
	out := new(ReadProductResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) DeleteProduct(ctx context.Context, in *DeleteProductRequest, opts ...client.CallOption) (*DeleteProductResponse, error) {
	req := c.c.NewRequest(c.serviceName, "ProductService.DeleteProduct", in)
	out := new(DeleteProductResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) AutocompleteProduct(ctx context.Context, in *AutocompleteProductRequest, opts ...client.CallOption) (*AutocompleteProductResponse, error) {
	req := c.c.NewRequest(c.serviceName, "ProductService.AutocompleteProduct", in)
	out := new(AutocompleteProductResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) AllServices(ctx context.Context, in *AllServicesRequest, opts ...client.CallOption) (*AllServicesResponse, error) {
	req := c.c.NewRequest(c.serviceName, "ProductService.AllServices", in)
	out := new(AllServicesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) CreateService(ctx context.Context, in *CreateServiceRequest, opts ...client.CallOption) (*CreateServiceResponse, error) {
	req := c.c.NewRequest(c.serviceName, "ProductService.CreateService", in)
	out := new(CreateServiceResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) UpdateService(ctx context.Context, in *UpdateServiceRequest, opts ...client.CallOption) (*UpdateServiceResponse, error) {
	req := c.c.NewRequest(c.serviceName, "ProductService.UpdateService", in)
	out := new(UpdateServiceResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) ReadService(ctx context.Context, in *ReadServiceRequest, opts ...client.CallOption) (*ReadServiceResponse, error) {
	req := c.c.NewRequest(c.serviceName, "ProductService.ReadService", in)
	out := new(ReadServiceResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) DeleteService(ctx context.Context, in *DeleteServiceRequest, opts ...client.CallOption) (*DeleteServiceResponse, error) {
	req := c.c.NewRequest(c.serviceName, "ProductService.DeleteService", in)
	out := new(DeleteServiceResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) AutocompleteService(ctx context.Context, in *AutocompleteServiceRequest, opts ...client.CallOption) (*AutocompleteServiceResponse, error) {
	req := c.c.NewRequest(c.serviceName, "ProductService.AutocompleteService", in)
	out := new(AutocompleteServiceResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) AllBatches(ctx context.Context, in *AllBatchesRequest, opts ...client.CallOption) (*AllBatchesResponse, error) {
	req := c.c.NewRequest(c.serviceName, "ProductService.AllBatches", in)
	out := new(AllBatchesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) CreateBatch(ctx context.Context, in *CreateBatchRequest, opts ...client.CallOption) (*CreateBatchResponse, error) {
	req := c.c.NewRequest(c.serviceName, "ProductService.CreateBatch", in)
	out := new(CreateBatchResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) UpdateBatch(ctx context.Context, in *UpdateBatchRequest, opts ...client.CallOption) (*UpdateBatchResponse, error) {
	req := c.c.NewRequest(c.serviceName, "ProductService.UpdateBatch", in)
	out := new(UpdateBatchResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) ReadBatch(ctx context.Context, in *ReadBatchRequest, opts ...client.CallOption) (*ReadBatchResponse, error) {
	req := c.c.NewRequest(c.serviceName, "ProductService.ReadBatch", in)
	out := new(ReadBatchResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) DeleteBatch(ctx context.Context, in *DeleteBatchRequest, opts ...client.CallOption) (*DeleteBatchResponse, error) {
	req := c.c.NewRequest(c.serviceName, "ProductService.DeleteBatch", in)
	out := new(DeleteBatchResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ProductService service

type ProductServiceHandler interface {
	AllProducts(context.Context, *AllProductsRequest, *AllProductsResponse) error
	CreateProduct(context.Context, *CreateProductRequest, *CreateProductResponse) error
	UpdateProduct(context.Context, *UpdateProductRequest, *UpdateProductResponse) error
	ReadProduct(context.Context, *ReadProductRequest, *ReadProductResponse) error
	DeleteProduct(context.Context, *DeleteProductRequest, *DeleteProductResponse) error
	AutocompleteProduct(context.Context, *AutocompleteProductRequest, *AutocompleteProductResponse) error
	AllServices(context.Context, *AllServicesRequest, *AllServicesResponse) error
	CreateService(context.Context, *CreateServiceRequest, *CreateServiceResponse) error
	UpdateService(context.Context, *UpdateServiceRequest, *UpdateServiceResponse) error
	ReadService(context.Context, *ReadServiceRequest, *ReadServiceResponse) error
	DeleteService(context.Context, *DeleteServiceRequest, *DeleteServiceResponse) error
	AutocompleteService(context.Context, *AutocompleteServiceRequest, *AutocompleteServiceResponse) error
	AllBatches(context.Context, *AllBatchesRequest, *AllBatchesResponse) error
	CreateBatch(context.Context, *CreateBatchRequest, *CreateBatchResponse) error
	UpdateBatch(context.Context, *UpdateBatchRequest, *UpdateBatchResponse) error
	ReadBatch(context.Context, *ReadBatchRequest, *ReadBatchResponse) error
	DeleteBatch(context.Context, *DeleteBatchRequest, *DeleteBatchResponse) error
}

func RegisterProductServiceHandler(s server.Server, hdlr ProductServiceHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&ProductService{hdlr}, opts...))
}

type ProductService struct {
	ProductServiceHandler
}

func (h *ProductService) AllProducts(ctx context.Context, in *AllProductsRequest, out *AllProductsResponse) error {
	return h.ProductServiceHandler.AllProducts(ctx, in, out)
}

func (h *ProductService) CreateProduct(ctx context.Context, in *CreateProductRequest, out *CreateProductResponse) error {
	return h.ProductServiceHandler.CreateProduct(ctx, in, out)
}

func (h *ProductService) UpdateProduct(ctx context.Context, in *UpdateProductRequest, out *UpdateProductResponse) error {
	return h.ProductServiceHandler.UpdateProduct(ctx, in, out)
}

func (h *ProductService) ReadProduct(ctx context.Context, in *ReadProductRequest, out *ReadProductResponse) error {
	return h.ProductServiceHandler.ReadProduct(ctx, in, out)
}

func (h *ProductService) DeleteProduct(ctx context.Context, in *DeleteProductRequest, out *DeleteProductResponse) error {
	return h.ProductServiceHandler.DeleteProduct(ctx, in, out)
}

func (h *ProductService) AutocompleteProduct(ctx context.Context, in *AutocompleteProductRequest, out *AutocompleteProductResponse) error {
	return h.ProductServiceHandler.AutocompleteProduct(ctx, in, out)
}

func (h *ProductService) AllServices(ctx context.Context, in *AllServicesRequest, out *AllServicesResponse) error {
	return h.ProductServiceHandler.AllServices(ctx, in, out)
}

func (h *ProductService) CreateService(ctx context.Context, in *CreateServiceRequest, out *CreateServiceResponse) error {
	return h.ProductServiceHandler.CreateService(ctx, in, out)
}

func (h *ProductService) UpdateService(ctx context.Context, in *UpdateServiceRequest, out *UpdateServiceResponse) error {
	return h.ProductServiceHandler.UpdateService(ctx, in, out)
}

func (h *ProductService) ReadService(ctx context.Context, in *ReadServiceRequest, out *ReadServiceResponse) error {
	return h.ProductServiceHandler.ReadService(ctx, in, out)
}

func (h *ProductService) DeleteService(ctx context.Context, in *DeleteServiceRequest, out *DeleteServiceResponse) error {
	return h.ProductServiceHandler.DeleteService(ctx, in, out)
}

func (h *ProductService) AutocompleteService(ctx context.Context, in *AutocompleteServiceRequest, out *AutocompleteServiceResponse) error {
	return h.ProductServiceHandler.AutocompleteService(ctx, in, out)
}

func (h *ProductService) AllBatches(ctx context.Context, in *AllBatchesRequest, out *AllBatchesResponse) error {
	return h.ProductServiceHandler.AllBatches(ctx, in, out)
}

func (h *ProductService) CreateBatch(ctx context.Context, in *CreateBatchRequest, out *CreateBatchResponse) error {
	return h.ProductServiceHandler.CreateBatch(ctx, in, out)
}

func (h *ProductService) UpdateBatch(ctx context.Context, in *UpdateBatchRequest, out *UpdateBatchResponse) error {
	return h.ProductServiceHandler.UpdateBatch(ctx, in, out)
}

func (h *ProductService) ReadBatch(ctx context.Context, in *ReadBatchRequest, out *ReadBatchResponse) error {
	return h.ProductServiceHandler.ReadBatch(ctx, in, out)
}

func (h *ProductService) DeleteBatch(ctx context.Context, in *DeleteBatchRequest, out *DeleteBatchResponse) error {
	return h.ProductServiceHandler.DeleteBatch(ctx, in, out)
}

func init() { proto.RegisterFile("server/product-srv/proto/product/product.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1160 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x59, 0x5f, 0x8f, 0xdb, 0x44,
	0x10, 0x8f, 0x93, 0x4b, 0xd2, 0xcc, 0xd1, 0x13, 0xdd, 0xe4, 0xa8, 0x15, 0x84, 0x38, 0x2c, 0x4a,
	0xaf, 0x54, 0xa4, 0xed, 0x95, 0xf2, 0xe7, 0x81, 0x87, 0xbb, 0x1e, 0x48, 0x15, 0x2f, 0x95, 0x69,
	0x79, 0xa4, 0x72, 0xed, 0xed, 0x61, 0x94, 0x9c, 0xc3, 0xee, 0x26, 0x40, 0x55, 0xc4, 0x13, 0xdf,
	0x81, 0x57, 0xbe, 0x00, 0x5f, 0x01, 0x3e, 0x1a, 0xf2, 0x7a, 0xd7, 0xd9, 0xb5, 0x77, 0x9d, 0x7f,
	0x27, 0x9f, 0xee, 0xa5, 0x97, 0x1d, 0xcf, 0xce, 0xcc, 0x6f, 0x76, 0xfc, 0xf3, 0xcc, 0x16, 0x46,
	0x14, 0x93, 0x39, 0x26, 0xf7, 0xa6, 0x24, 0x89, 0x66, 0x21, 0xfb, 0x84, 0x92, 0x79, 0xfa, 0x9b,
	0x25, 0x52, 0x22, 0xff, 0x8e, 0xb8, 0x14, 0x0d, 0xce, 0x92, 0xd1, 0x24, 0x0e, 0x49, 0x32, 0xa2,
	0x64, 0x3e, 0x12, 0xcf, 0x86, 0xb7, 0x84, 0x95, 0x19, 0xc5, 0x44, 0x31, 0x91, 0x2e, 0xf9, 0x3f,
	0xd9, 0xe6, 0xe1, 0x5d, 0xa1, 0x46, 0x59, 0xc0, 0xe2, 0x50, 0x51, 0xcc, 0x04, 0xe2, 0x4f, 0xa6,
	0xec, 0x7d, 0x03, 0xbb, 0x4f, 0x33, 0xf3, 0xa7, 0x01, 0x0b, 0xd0, 0xe7, 0xd0, 0x15, 0xde, 0x5c,
	0xe7, 0xc0, 0x39, 0xdc, 0x3d, 0x7a, 0x6f, 0x64, 0x0a, 0x65, 0x24, 0xf6, 0xf8, 0x52, 0xdb, 0xfb,
	0x16, 0xf6, 0x84, 0xec, 0x98, 0x10, 0x6e, 0xea, 0x4b, 0xb8, 0x26, 0x1e, 0x52, 0xd7, 0x39, 0x68,
	0x2d, 0xb7, 0x95, 0xab, 0xa7, 0x41, 0x7d, 0x87, 0xc9, 0x3c, 0x0e, 0xb1, 0x0c, 0x8a, 0x66, 0xcb,
	0xea, 0xa0, 0xc4, 0x1e, 0x5f, 0x6a, 0xa7, 0x41, 0x09, 0x99, 0x12, 0x94, 0x78, 0xb8, 0x24, 0x28,
	0x69, 0x2b, 0x57, 0xf7, 0xbe, 0x82, 0xde, 0x49, 0xc0, 0xc2, 0x1f, 0xb9, 0x9d, 0xfb, 0xd0, 0x7e,
	0x99, 0x2e, 0x44, 0x40, 0x43, 0xdd, 0x88, 0xc8, 0x30, 0x57, 0xf7, 0x33, 0x45, 0xef, 0x14, 0xde,
	0xe2, 0x6b, 0x19, 0xc9, 0xa7, 0xd0, 0xe5, 0x0f, 0xf2, 0x40, 0xaa, 0x6c, 0x48, 0x55, 0xef, 0x3f,
	0x07, 0xd0, 0xf1, 0x78, 0x2c, 0x52, 0x46, 0x7d, 0xfc, 0xf3, 0x0c, 0x53, 0x86, 0xf6, 0xa1, 0x93,
	0x90, 0xb3, 0x17, 0x71, 0xc4, 0xe3, 0xe9, 0xf9, 0xed, 0x84, 0x9c, 0x3d, 0x89, 0xd0, 0x4d, 0xe8,
	0x32, 0x1c, 0x4c, 0x52, 0x79, 0x93, 0xcb, 0x3b, 0xe9, 0xf2, 0x49, 0x84, 0x06, 0xd0, 0x1e, 0xc7,
	0x93, 0x98, 0xb9, 0xad, 0x03, 0xe7, 0xb0, 0xe5, 0x67, 0x0b, 0xf4, 0x0e, 0x74, 0x92, 0x57, 0xaf,
	0x28, 0x66, 0xee, 0x0e, 0x17, 0x8b, 0x15, 0xba, 0x05, 0x7b, 0x34, 0x21, 0xec, 0xc5, 0x34, 0x20,
	0xc1, 0x04, 0x33, 0x4c, 0xdc, 0x36, 0xb7, 0x76, 0x3d, 0x95, 0x3e, 0x95, 0xc2, 0x5c, 0x2d, 0x8a,
	0x09, 0x0e, 0x59, 0x9c, 0x9c, 0xbb, 0x9d, 0x85, 0xda, 0xa9, 0x14, 0x7a, 0xbf, 0x43, 0x5f, 0x43,
	0x40, 0xa7, 0xc9, 0x39, 0xc5, 0xe8, 0x0b, 0xd8, 0x89, 0x02, 0x16, 0x88, 0x84, 0x7e, 0x58, 0x59,
	0x2a, 0x22, 0x87, 0x3e, 0xdf, 0x81, 0x10, 0xec, 0x84, 0x49, 0x84, 0x39, 0xc4, 0x96, 0xcf, 0x7f,
	0x23, 0x17, 0xba, 0x13, 0x4c, 0x69, 0x70, 0x86, 0x39, 0xc4, 0x9e, 0x2f, 0x97, 0xde, 0x1f, 0x30,
	0x78, 0x4c, 0x70, 0xc0, 0xb0, 0x2c, 0x3b, 0x91, 0xc2, 0x4d, 0x2b, 0x5f, 0xc9, 0x7d, 0xd3, 0x92,
	0xfb, 0x96, 0x9a, 0x7b, 0xef, 0x0d, 0xec, 0x17, 0x02, 0x10, 0x19, 0x78, 0xa4, 0x65, 0xe0, 0x83,
	0x4a, 0xf7, 0xdb, 0xc0, 0x7f, 0x3e, 0x8d, 0x2e, 0x17, 0x7e, 0x21, 0x80, 0x3a, 0xe1, 0x3f, 0x03,
	0xe4, 0xe3, 0x20, 0x2a, 0x80, 0xdf, 0x83, 0x66, 0xfe, 0xea, 0x34, 0xe3, 0x68, 0x6d, 0x4c, 0xaf,
	0xa1, 0xaf, 0x59, 0xad, 0x13, 0xd1, 0xf7, 0x30, 0x38, 0xc5, 0x63, 0x5c, 0x3a, 0xd0, 0x6d, 0x31,
	0x7d, 0x0d, 0xfb, 0x05, 0xbb, 0x02, 0x95, 0x0c, 0xcf, 0x31, 0x87, 0xd7, 0xd4, 0xc3, 0x3b, 0x82,
	0xe1, 0xf1, 0x8c, 0x25, 0x61, 0x32, 0x99, 0x1a, 0x82, 0x1c, 0x40, 0x9b, 0xc5, 0x6c, 0x8c, 0x25,
	0x6d, 0xf1, 0x85, 0xf7, 0xa7, 0x03, 0xef, 0x1a, 0x37, 0xd5, 0x4c, 0x15, 0x82, 0x6c, 0xc5, 0xa7,
	0xe0, 0x0a, 0x93, 0xed, 0x02, 0xc1, 0x3a, 0x19, 0xd4, 0x3f, 0x9d, 0xdb, 0x91, 0xad, 0xfc, 0x9c,
	0x2e, 0xd8, 0x66, 0xa3, 0x2f, 0xfa, 0xe6, 0x64, 0x9b, 0x07, 0xb0, 0xce, 0xbb, 0xa9, 0x34, 0x21,
	0xdb, 0x91, 0xed, 0x25, 0xc2, 0x2f, 0x04, 0x50, 0x27, 0x7c, 0x41, 0xb6, 0x05, 0xf0, 0x17, 0x44,
	0xb6, 0x97, 0x82, 0x28, 0x27, 0xdb, 0x0b, 0xc6, 0x94, 0x93, 0x6d, 0x11, 0xd5, 0x56, 0x64, 0x5b,
	0x08, 0x72, 0x35, 0xb2, 0x2d, 0x46, 0x50, 0x17, 0x55, 0xfc, 0xeb, 0xc0, 0x8d, 0xe3, 0xf1, 0xf8,
	0x24, 0x6b, 0x74, 0xaf, 0x22, 0xd7, 0xbe, 0xe6, 0x5f, 0x8b, 0x1c, 0x80, 0xc8, 0xdf, 0x67, 0x5a,
	0xfe, 0x3c, 0x73, 0xfe, 0xd4, 0xc9, 0x60, 0xa3, 0xec, 0xcd, 0x01, 0x65, 0x3c, 0x97, 0xcd, 0x0b,
	0x22, 0x7b, 0x6b, 0x4f, 0x29, 0x6b, 0x17, 0xee, 0xaf, 0xd0, 0xd7, 0xfc, 0x0a, 0xd0, 0x0f, 0x35,
	0xd0, 0xef, 0x57, 0x80, 0xde, 0x06, 0x71, 0x46, 0x6d, 0xf5, 0x23, 0xd6, 0xfc, 0xd6, 0x87, 0xd8,
	0x87, 0xb7, 0x53, 0xe2, 0xd3, 0xf0, 0x6e, 0x4b, 0x3c, 0x73, 0xb8, 0xa1, 0xd8, 0xac, 0x0f, 0xcb,
	0x33, 0x40, 0x19, 0xe1, 0x5d, 0x28, 0x9a, 0xc7, 0xd0, 0xd7, 0xac, 0x6e, 0x44, 0xa2, 0x7f, 0x35,
	0xa1, 0x2b, 0x9a, 0xc7, 0x55, 0x03, 0x72, 0xa1, 0x1b, 0xf2, 0xb7, 0x20, 0x12, 0xbc, 0x23, 0x97,
	0xe9, 0x93, 0x19, 0xaf, 0x96, 0x48, 0x50, 0x8f, 0x5c, 0xa6, 0x41, 0x9d, 0x07, 0x13, 0x2c, 0x18,
	0x87, 0xff, 0x46, 0x07, 0xb0, 0x1b, 0x61, 0x1a, 0x92, 0x78, 0xaa, 0xb0, 0x8c, 0x2a, 0x4a, 0xf9,
	0x2d, 0x9e, 0xa4, 0x41, 0x77, 0x33, 0xff, 0x7c, 0x81, 0x1e, 0x41, 0x4f, 0x38, 0x3c, 0xf9, 0xcd,
	0xbd, 0xc6, 0x4f, 0xed, 0xa6, 0x7e, 0x6a, 0xfc, 0x7a, 0xe8, 0x39, 0xc5, 0xc4, 0x5f, 0x68, 0xa2,
	0x7b, 0xd0, 0x49, 0x7e, 0x39, 0xc7, 0x84, 0xba, 0x3d, 0x7e, 0x03, 0x61, 0xdd, 0x23, 0xd4, 0xbc,
	0x7f, 0x1c, 0xe8, 0x0a, 0xaa, 0x2f, 0xa5, 0x46, 0xe2, 0x69, 0x2a, 0x78, 0x16, 0xe9, 0x6a, 0x59,
	0xd2, 0xb5, 0x63, 0x4d, 0x57, 0x5b, 0x4f, 0x97, 0x72, 0x5d, 0xd2, 0x59, 0xf9, 0xba, 0xe4, 0xe8,
	0xef, 0xbd, 0xfc, 0x5a, 0x4a, 0xc6, 0x1d, 0xc1, 0xae, 0x72, 0xfd, 0x80, 0x0e, 0xcd, 0xd5, 0x5d,
	0xbe, 0x63, 0x19, 0xde, 0x59, 0x41, 0x33, 0x2b, 0x38, 0xaf, 0x81, 0x7e, 0x82, 0xeb, 0xda, 0x90,
	0x8f, 0x3e, 0x36, 0xef, 0x36, 0x5d, 0x45, 0x0c, 0xef, 0xae, 0xa4, 0xab, 0xfa, 0xd2, 0x26, 0x6a,
	0x9b, 0x2f, 0xd3, 0xdc, 0x6f, 0xf3, 0x65, 0x1c, 0xd1, 0xbd, 0x46, 0x9a, 0x3d, 0x65, 0xd2, 0xb5,
	0x65, 0xaf, 0x3c, 0x62, 0xdb, 0xb2, 0x67, 0x18, 0x9b, 0x33, 0x44, 0xda, 0xec, 0x69, 0x43, 0x64,
	0x1a, 0x7c, 0x6d, 0x88, 0x8c, 0xc3, 0xac, 0xd7, 0x40, 0x6f, 0xa0, 0x6f, 0x98, 0x35, 0xd1, 0x7d,
	0xcb, 0x69, 0x5b, 0x67, 0xd9, 0xe1, 0x83, 0x35, 0x76, 0xa8, 0xf9, 0x54, 0xe6, 0xb3, 0x8a, 0x6a,
	0x2c, 0x0c, 0xa1, 0x15, 0xd5, 0x58, 0x1c, 0xf6, 0xd4, 0x6a, 0x94, 0x2f, 0x41, 0x65, 0x35, 0xea,
	0x6d, 0x63, 0x75, 0x35, 0x16, 0xba, 0x45, 0xb5, 0x1a, 0x97, 0xf8, 0x32, 0x0d, 0x46, 0xd5, 0xd5,
	0x58, 0xf6, 0x25, 0xaa, 0x51, 0x7a, 0xaa, 0xa8, 0xc6, 0x82, 0x9f, 0x3b, 0x2b, 0x68, 0x96, 0xab,
	0x71, 0x09, 0x22, 0xd3, 0x64, 0x50, 0x5d, 0x8d, 0x65, 0x5f, 0x85, 0x6a, 0x94, 0x1e, 0x57, 0xa8,
	0xc6, 0x82, 0xdf, 0x07, 0x6b, 0xec, 0xc8, 0xbd, 0x07, 0x00, 0x8b, 0x0e, 0x16, 0xdd, 0xb6, 0x96,
	0x98, 0xde, 0xa4, 0x0f, 0x0f, 0x97, 0x2b, 0xaa, 0x47, 0xa6, 0x34, 0x8c, 0xb6, 0x23, 0x2b, 0xf7,
	0xb2, 0xb6, 0x23, 0x33, 0x74, 0x9f, 0x99, 0x17, 0xa5, 0x49, 0xb3, 0x79, 0x29, 0xf7, 0x8f, 0x36,
	0x2f, 0x86, 0x8e, 0xcf, 0x6b, 0xa0, 0x1f, 0xa0, 0x97, 0x37, 0x4f, 0xe8, 0x23, 0x7b, 0x49, 0x69,
	0x1e, 0x6e, 0x2f, 0xd5, 0x53, 0x51, 0x28, 0xed, 0x8c, 0x0d, 0x45, 0xb9, 0x8f, 0xb2, 0xa1, 0x30,
	0xf4, 0x46, 0x5e, 0xe3, 0x65, 0x87, 0xff, 0x47, 0xd0, 0xc3, 0xff, 0x03, 0x00, 0x00, 0xff, 0xff,
	0xca, 0x3c, 0x40, 0x10, 0xa4, 0x1a, 0x00, 0x00,
}
