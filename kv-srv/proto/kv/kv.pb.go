// Code generated by protoc-gen-go. DO NOT EDIT.
// source: server/kv-srv/proto/kv/kv.proto

/*
Package go_micro_srv_kv is a generated protocol buffer package.

It is generated from these files:
	server/kv-srv/proto/kv/kv.proto

It has these top-level messages:
	Item
	GetRequest
	GetResponse
	PutRequest
	PutResponse
	DelRequest
	DelResponse
	GetExRequest
	GetExResponse
	PutExRequest
	PutExResponse
	DelExRequest
	DelExResponse
	ConfirmTokenRequest
	ConfirmTokenResponse
	RemoveTokenRequest
	RemoveTokenResponse
	LockedRequest
	LockedResponse
	UnLockRequest
	UnLockResponse
	IsLockedRequest
	IsLockedResponse
	AuthFailedRequest
	AuthFailedResponse
	RemoveSessionRequest
	RemoveSessionResponse
	ReadSessionRequest
	ReadSessionResponse
	IncTrackCountRequest
	IncTrackCountResponse
	GetTrackCountRequest
	GetTrackCountResponse
	SetTrackCountRequest
	SetTrackCountResponse
	IncBadgeCountRequest
	IncBadgeCountResponse
	DecrBadgeCountRequest
	DecrBadgeCountResponse
	GetBadgeCountRequest
	GetBadgeCountResponse
	SetBadgeCountRequest
	SetBadgeCountResponse
	GetTrackValueRequest
	GetTrackValueResponse
	TagsCloudRequest
	TagsCloudResponse
	GetTopTagsRequest
	GetTopTagsResponse
*/
package go_micro_srv_kv

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/struct"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Item struct {
	Key        string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value      []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Expiration int64  `protobuf:"varint,3,opt,name=expiration" json:"expiration,omitempty"`
}

func (m *Item) Reset()                    { *m = Item{} }
func (m *Item) String() string            { return proto.CompactTextString(m) }
func (*Item) ProtoMessage()               {}
func (*Item) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Item) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *Item) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *Item) GetExpiration() int64 {
	if m != nil {
		return m.Expiration
	}
	return 0
}

type GetRequest struct {
	Key string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
}

func (m *GetRequest) Reset()                    { *m = GetRequest{} }
func (m *GetRequest) String() string            { return proto.CompactTextString(m) }
func (*GetRequest) ProtoMessage()               {}
func (*GetRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *GetRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

type GetResponse struct {
	Item *Item `protobuf:"bytes,1,opt,name=item" json:"item,omitempty"`
}

func (m *GetResponse) Reset()                    { *m = GetResponse{} }
func (m *GetResponse) String() string            { return proto.CompactTextString(m) }
func (*GetResponse) ProtoMessage()               {}
func (*GetResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *GetResponse) GetItem() *Item {
	if m != nil {
		return m.Item
	}
	return nil
}

type PutRequest struct {
	Item *Item `protobuf:"bytes,1,opt,name=item" json:"item,omitempty"`
}

func (m *PutRequest) Reset()                    { *m = PutRequest{} }
func (m *PutRequest) String() string            { return proto.CompactTextString(m) }
func (*PutRequest) ProtoMessage()               {}
func (*PutRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *PutRequest) GetItem() *Item {
	if m != nil {
		return m.Item
	}
	return nil
}

type PutResponse struct {
}

func (m *PutResponse) Reset()                    { *m = PutResponse{} }
func (m *PutResponse) String() string            { return proto.CompactTextString(m) }
func (*PutResponse) ProtoMessage()               {}
func (*PutResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type DelRequest struct {
	Key string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
}

func (m *DelRequest) Reset()                    { *m = DelRequest{} }
func (m *DelRequest) String() string            { return proto.CompactTextString(m) }
func (*DelRequest) ProtoMessage()               {}
func (*DelRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *DelRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

type DelResponse struct {
}

func (m *DelResponse) Reset()                    { *m = DelResponse{} }
func (m *DelResponse) String() string            { return proto.CompactTextString(m) }
func (*DelResponse) ProtoMessage()               {}
func (*DelResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type GetExRequest struct {
	Index int64  `protobuf:"varint,1,opt,name=index" json:"index,omitempty"`
	Key   string `protobuf:"bytes,2,opt,name=key" json:"key,omitempty"`
}

func (m *GetExRequest) Reset()                    { *m = GetExRequest{} }
func (m *GetExRequest) String() string            { return proto.CompactTextString(m) }
func (*GetExRequest) ProtoMessage()               {}
func (*GetExRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *GetExRequest) GetIndex() int64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *GetExRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

type GetExResponse struct {
	Item *Item `protobuf:"bytes,1,opt,name=item" json:"item,omitempty"`
}

func (m *GetExResponse) Reset()                    { *m = GetExResponse{} }
func (m *GetExResponse) String() string            { return proto.CompactTextString(m) }
func (*GetExResponse) ProtoMessage()               {}
func (*GetExResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *GetExResponse) GetItem() *Item {
	if m != nil {
		return m.Item
	}
	return nil
}

type PutExRequest struct {
	Index int64 `protobuf:"varint,1,opt,name=index" json:"index,omitempty"`
	Item  *Item `protobuf:"bytes,2,opt,name=item" json:"item,omitempty"`
}

func (m *PutExRequest) Reset()                    { *m = PutExRequest{} }
func (m *PutExRequest) String() string            { return proto.CompactTextString(m) }
func (*PutExRequest) ProtoMessage()               {}
func (*PutExRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *PutExRequest) GetIndex() int64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *PutExRequest) GetItem() *Item {
	if m != nil {
		return m.Item
	}
	return nil
}

type PutExResponse struct {
}

func (m *PutExResponse) Reset()                    { *m = PutExResponse{} }
func (m *PutExResponse) String() string            { return proto.CompactTextString(m) }
func (*PutExResponse) ProtoMessage()               {}
func (*PutExResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

type DelExRequest struct {
	Index int64  `protobuf:"varint,1,opt,name=index" json:"index,omitempty"`
	Key   string `protobuf:"bytes,2,opt,name=key" json:"key,omitempty"`
}

func (m *DelExRequest) Reset()                    { *m = DelExRequest{} }
func (m *DelExRequest) String() string            { return proto.CompactTextString(m) }
func (*DelExRequest) ProtoMessage()               {}
func (*DelExRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *DelExRequest) GetIndex() int64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *DelExRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

type DelExResponse struct {
}

func (m *DelExResponse) Reset()                    { *m = DelExResponse{} }
func (m *DelExResponse) String() string            { return proto.CompactTextString(m) }
func (*DelExResponse) ProtoMessage()               {}
func (*DelExResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

type ConfirmTokenRequest struct {
	Key string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
}

func (m *ConfirmTokenRequest) Reset()                    { *m = ConfirmTokenRequest{} }
func (m *ConfirmTokenRequest) String() string            { return proto.CompactTextString(m) }
func (*ConfirmTokenRequest) ProtoMessage()               {}
func (*ConfirmTokenRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *ConfirmTokenRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

type ConfirmTokenResponse struct {
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *ConfirmTokenResponse) Reset()                    { *m = ConfirmTokenResponse{} }
func (m *ConfirmTokenResponse) String() string            { return proto.CompactTextString(m) }
func (*ConfirmTokenResponse) ProtoMessage()               {}
func (*ConfirmTokenResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *ConfirmTokenResponse) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type RemoveTokenRequest struct {
	AccountId string `protobuf:"bytes,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Token     string `protobuf:"bytes,2,opt,name=token" json:"token,omitempty"`
}

func (m *RemoveTokenRequest) Reset()                    { *m = RemoveTokenRequest{} }
func (m *RemoveTokenRequest) String() string            { return proto.CompactTextString(m) }
func (*RemoveTokenRequest) ProtoMessage()               {}
func (*RemoveTokenRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *RemoveTokenRequest) GetAccountId() string {
	if m != nil {
		return m.AccountId
	}
	return ""
}

func (m *RemoveTokenRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type RemoveTokenResponse struct {
}

func (m *RemoveTokenResponse) Reset()                    { *m = RemoveTokenResponse{} }
func (m *RemoveTokenResponse) String() string            { return proto.CompactTextString(m) }
func (*RemoveTokenResponse) ProtoMessage()               {}
func (*RemoveTokenResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

type LockedRequest struct {
	Index     int64  `protobuf:"varint,1,opt,name=index" json:"index,omitempty"`
	AccountId string `protobuf:"bytes,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
}

func (m *LockedRequest) Reset()                    { *m = LockedRequest{} }
func (m *LockedRequest) String() string            { return proto.CompactTextString(m) }
func (*LockedRequest) ProtoMessage()               {}
func (*LockedRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *LockedRequest) GetIndex() int64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *LockedRequest) GetAccountId() string {
	if m != nil {
		return m.AccountId
	}
	return ""
}

type LockedResponse struct {
	Locked bool `protobuf:"varint,1,opt,name=locked" json:"locked,omitempty"`
}

func (m *LockedResponse) Reset()                    { *m = LockedResponse{} }
func (m *LockedResponse) String() string            { return proto.CompactTextString(m) }
func (*LockedResponse) ProtoMessage()               {}
func (*LockedResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *LockedResponse) GetLocked() bool {
	if m != nil {
		return m.Locked
	}
	return false
}

type UnLockRequest struct {
	AuthFailIndex int64  `protobuf:"varint,1,opt,name=auth_fail_index,json=authFailIndex" json:"auth_fail_index,omitempty"`
	LockIndex     int64  `protobuf:"varint,2,opt,name=lock_index,json=lockIndex" json:"lock_index,omitempty"`
	AccountId     string `protobuf:"bytes,3,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
}

func (m *UnLockRequest) Reset()                    { *m = UnLockRequest{} }
func (m *UnLockRequest) String() string            { return proto.CompactTextString(m) }
func (*UnLockRequest) ProtoMessage()               {}
func (*UnLockRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *UnLockRequest) GetAuthFailIndex() int64 {
	if m != nil {
		return m.AuthFailIndex
	}
	return 0
}

func (m *UnLockRequest) GetLockIndex() int64 {
	if m != nil {
		return m.LockIndex
	}
	return 0
}

func (m *UnLockRequest) GetAccountId() string {
	if m != nil {
		return m.AccountId
	}
	return ""
}

type UnLockResponse struct {
	Locked bool `protobuf:"varint,1,opt,name=locked" json:"locked,omitempty"`
}

func (m *UnLockResponse) Reset()                    { *m = UnLockResponse{} }
func (m *UnLockResponse) String() string            { return proto.CompactTextString(m) }
func (*UnLockResponse) ProtoMessage()               {}
func (*UnLockResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *UnLockResponse) GetLocked() bool {
	if m != nil {
		return m.Locked
	}
	return false
}

type IsLockedRequest struct {
	Index     int64  `protobuf:"varint,1,opt,name=index" json:"index,omitempty"`
	AccountId string `protobuf:"bytes,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
}

func (m *IsLockedRequest) Reset()                    { *m = IsLockedRequest{} }
func (m *IsLockedRequest) String() string            { return proto.CompactTextString(m) }
func (*IsLockedRequest) ProtoMessage()               {}
func (*IsLockedRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *IsLockedRequest) GetIndex() int64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *IsLockedRequest) GetAccountId() string {
	if m != nil {
		return m.AccountId
	}
	return ""
}

type IsLockedResponse struct {
	Locked bool `protobuf:"varint,1,opt,name=locked" json:"locked,omitempty"`
}

func (m *IsLockedResponse) Reset()                    { *m = IsLockedResponse{} }
func (m *IsLockedResponse) String() string            { return proto.CompactTextString(m) }
func (*IsLockedResponse) ProtoMessage()               {}
func (*IsLockedResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *IsLockedResponse) GetLocked() bool {
	if m != nil {
		return m.Locked
	}
	return false
}

type AuthFailedRequest struct {
	Index     int64  `protobuf:"varint,1,opt,name=index" json:"index,omitempty"`
	AccountId string `protobuf:"bytes,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
}

func (m *AuthFailedRequest) Reset()                    { *m = AuthFailedRequest{} }
func (m *AuthFailedRequest) String() string            { return proto.CompactTextString(m) }
func (*AuthFailedRequest) ProtoMessage()               {}
func (*AuthFailedRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *AuthFailedRequest) GetIndex() int64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *AuthFailedRequest) GetAccountId() string {
	if m != nil {
		return m.AccountId
	}
	return ""
}

type AuthFailedResponse struct {
	Failed int64 `protobuf:"varint,1,opt,name=failed" json:"failed,omitempty"`
}

func (m *AuthFailedResponse) Reset()                    { *m = AuthFailedResponse{} }
func (m *AuthFailedResponse) String() string            { return proto.CompactTextString(m) }
func (*AuthFailedResponse) ProtoMessage()               {}
func (*AuthFailedResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *AuthFailedResponse) GetFailed() int64 {
	if m != nil {
		return m.Failed
	}
	return 0
}

type RemoveSessionRequest struct {
	Index     int64  `protobuf:"varint,1,opt,name=index" json:"index,omitempty"`
	SessionId string `protobuf:"bytes,2,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
}

func (m *RemoveSessionRequest) Reset()                    { *m = RemoveSessionRequest{} }
func (m *RemoveSessionRequest) String() string            { return proto.CompactTextString(m) }
func (*RemoveSessionRequest) ProtoMessage()               {}
func (*RemoveSessionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *RemoveSessionRequest) GetIndex() int64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *RemoveSessionRequest) GetSessionId() string {
	if m != nil {
		return m.SessionId
	}
	return ""
}

type RemoveSessionResponse struct {
}

func (m *RemoveSessionResponse) Reset()                    { *m = RemoveSessionResponse{} }
func (m *RemoveSessionResponse) String() string            { return proto.CompactTextString(m) }
func (*RemoveSessionResponse) ProtoMessage()               {}
func (*RemoveSessionResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

type ReadSessionRequest struct {
	Index     int64  `protobuf:"varint,1,opt,name=index" json:"index,omitempty"`
	SessionId string `protobuf:"bytes,2,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
}

func (m *ReadSessionRequest) Reset()                    { *m = ReadSessionRequest{} }
func (m *ReadSessionRequest) String() string            { return proto.CompactTextString(m) }
func (*ReadSessionRequest) ProtoMessage()               {}
func (*ReadSessionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *ReadSessionRequest) GetIndex() int64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *ReadSessionRequest) GetSessionId() string {
	if m != nil {
		return m.SessionId
	}
	return ""
}

type ReadSessionResponse struct {
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *ReadSessionResponse) Reset()                    { *m = ReadSessionResponse{} }
func (m *ReadSessionResponse) String() string            { return proto.CompactTextString(m) }
func (*ReadSessionResponse) ProtoMessage()               {}
func (*ReadSessionResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func (m *ReadSessionResponse) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type IncTrackCountRequest struct {
	Index int64  `protobuf:"varint,1,opt,name=index" json:"index,omitempty"`
	Key   string `protobuf:"bytes,2,opt,name=key" json:"key,omitempty"`
}

func (m *IncTrackCountRequest) Reset()                    { *m = IncTrackCountRequest{} }
func (m *IncTrackCountRequest) String() string            { return proto.CompactTextString(m) }
func (*IncTrackCountRequest) ProtoMessage()               {}
func (*IncTrackCountRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

func (m *IncTrackCountRequest) GetIndex() int64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *IncTrackCountRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

type IncTrackCountResponse struct {
	Count int64 `protobuf:"varint,1,opt,name=count" json:"count,omitempty"`
}

func (m *IncTrackCountResponse) Reset()                    { *m = IncTrackCountResponse{} }
func (m *IncTrackCountResponse) String() string            { return proto.CompactTextString(m) }
func (*IncTrackCountResponse) ProtoMessage()               {}
func (*IncTrackCountResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30} }

func (m *IncTrackCountResponse) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

type GetTrackCountRequest struct {
	Index int64  `protobuf:"varint,1,opt,name=index" json:"index,omitempty"`
	Key   string `protobuf:"bytes,2,opt,name=key" json:"key,omitempty"`
}

func (m *GetTrackCountRequest) Reset()                    { *m = GetTrackCountRequest{} }
func (m *GetTrackCountRequest) String() string            { return proto.CompactTextString(m) }
func (*GetTrackCountRequest) ProtoMessage()               {}
func (*GetTrackCountRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{31} }

func (m *GetTrackCountRequest) GetIndex() int64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *GetTrackCountRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

type GetTrackCountResponse struct {
	Count int64 `protobuf:"varint,1,opt,name=count" json:"count,omitempty"`
}

func (m *GetTrackCountResponse) Reset()                    { *m = GetTrackCountResponse{} }
func (m *GetTrackCountResponse) String() string            { return proto.CompactTextString(m) }
func (*GetTrackCountResponse) ProtoMessage()               {}
func (*GetTrackCountResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{32} }

func (m *GetTrackCountResponse) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

type SetTrackCountRequest struct {
	Index int64  `protobuf:"varint,1,opt,name=index" json:"index,omitempty"`
	Key   string `protobuf:"bytes,2,opt,name=key" json:"key,omitempty"`
	Count int64  `protobuf:"varint,3,opt,name=count" json:"count,omitempty"`
}

func (m *SetTrackCountRequest) Reset()                    { *m = SetTrackCountRequest{} }
func (m *SetTrackCountRequest) String() string            { return proto.CompactTextString(m) }
func (*SetTrackCountRequest) ProtoMessage()               {}
func (*SetTrackCountRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{33} }

func (m *SetTrackCountRequest) GetIndex() int64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *SetTrackCountRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *SetTrackCountRequest) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

type SetTrackCountResponse struct {
}

func (m *SetTrackCountResponse) Reset()                    { *m = SetTrackCountResponse{} }
func (m *SetTrackCountResponse) String() string            { return proto.CompactTextString(m) }
func (*SetTrackCountResponse) ProtoMessage()               {}
func (*SetTrackCountResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{34} }

type IncBadgeCountRequest struct {
	Index int64  `protobuf:"varint,1,opt,name=index" json:"index,omitempty"`
	Key   string `protobuf:"bytes,2,opt,name=key" json:"key,omitempty"`
}

func (m *IncBadgeCountRequest) Reset()                    { *m = IncBadgeCountRequest{} }
func (m *IncBadgeCountRequest) String() string            { return proto.CompactTextString(m) }
func (*IncBadgeCountRequest) ProtoMessage()               {}
func (*IncBadgeCountRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{35} }

func (m *IncBadgeCountRequest) GetIndex() int64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *IncBadgeCountRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

type IncBadgeCountResponse struct {
	Count int64 `protobuf:"varint,1,opt,name=count" json:"count,omitempty"`
}

func (m *IncBadgeCountResponse) Reset()                    { *m = IncBadgeCountResponse{} }
func (m *IncBadgeCountResponse) String() string            { return proto.CompactTextString(m) }
func (*IncBadgeCountResponse) ProtoMessage()               {}
func (*IncBadgeCountResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{36} }

func (m *IncBadgeCountResponse) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

type DecrBadgeCountRequest struct {
	Index int64  `protobuf:"varint,1,opt,name=index" json:"index,omitempty"`
	Key   string `protobuf:"bytes,2,opt,name=key" json:"key,omitempty"`
}

func (m *DecrBadgeCountRequest) Reset()                    { *m = DecrBadgeCountRequest{} }
func (m *DecrBadgeCountRequest) String() string            { return proto.CompactTextString(m) }
func (*DecrBadgeCountRequest) ProtoMessage()               {}
func (*DecrBadgeCountRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{37} }

func (m *DecrBadgeCountRequest) GetIndex() int64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *DecrBadgeCountRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

type DecrBadgeCountResponse struct {
	Count int64 `protobuf:"varint,1,opt,name=count" json:"count,omitempty"`
}

func (m *DecrBadgeCountResponse) Reset()                    { *m = DecrBadgeCountResponse{} }
func (m *DecrBadgeCountResponse) String() string            { return proto.CompactTextString(m) }
func (*DecrBadgeCountResponse) ProtoMessage()               {}
func (*DecrBadgeCountResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{38} }

func (m *DecrBadgeCountResponse) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

type GetBadgeCountRequest struct {
	Index int64  `protobuf:"varint,1,opt,name=index" json:"index,omitempty"`
	Key   string `protobuf:"bytes,2,opt,name=key" json:"key,omitempty"`
}

func (m *GetBadgeCountRequest) Reset()                    { *m = GetBadgeCountRequest{} }
func (m *GetBadgeCountRequest) String() string            { return proto.CompactTextString(m) }
func (*GetBadgeCountRequest) ProtoMessage()               {}
func (*GetBadgeCountRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{39} }

func (m *GetBadgeCountRequest) GetIndex() int64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *GetBadgeCountRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

type GetBadgeCountResponse struct {
	Count int64 `protobuf:"varint,1,opt,name=count" json:"count,omitempty"`
}

func (m *GetBadgeCountResponse) Reset()                    { *m = GetBadgeCountResponse{} }
func (m *GetBadgeCountResponse) String() string            { return proto.CompactTextString(m) }
func (*GetBadgeCountResponse) ProtoMessage()               {}
func (*GetBadgeCountResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{40} }

func (m *GetBadgeCountResponse) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

type SetBadgeCountRequest struct {
	Index int64  `protobuf:"varint,1,opt,name=index" json:"index,omitempty"`
	Key   string `protobuf:"bytes,2,opt,name=key" json:"key,omitempty"`
	Count int64  `protobuf:"varint,3,opt,name=count" json:"count,omitempty"`
}

func (m *SetBadgeCountRequest) Reset()                    { *m = SetBadgeCountRequest{} }
func (m *SetBadgeCountRequest) String() string            { return proto.CompactTextString(m) }
func (*SetBadgeCountRequest) ProtoMessage()               {}
func (*SetBadgeCountRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{41} }

func (m *SetBadgeCountRequest) GetIndex() int64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *SetBadgeCountRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *SetBadgeCountRequest) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

type SetBadgeCountResponse struct {
}

func (m *SetBadgeCountResponse) Reset()                    { *m = SetBadgeCountResponse{} }
func (m *SetBadgeCountResponse) String() string            { return proto.CompactTextString(m) }
func (*SetBadgeCountResponse) ProtoMessage()               {}
func (*SetBadgeCountResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{42} }

type GetTrackValueRequest struct {
	Index int64  `protobuf:"varint,1,opt,name=index" json:"index,omitempty"`
	Key   string `protobuf:"bytes,2,opt,name=key" json:"key,omitempty"`
}

func (m *GetTrackValueRequest) Reset()                    { *m = GetTrackValueRequest{} }
func (m *GetTrackValueRequest) String() string            { return proto.CompactTextString(m) }
func (*GetTrackValueRequest) ProtoMessage()               {}
func (*GetTrackValueRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{43} }

func (m *GetTrackValueRequest) GetIndex() int64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *GetTrackValueRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

type GetTrackValueResponse struct {
	Value *google_protobuf.Value `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *GetTrackValueResponse) Reset()                    { *m = GetTrackValueResponse{} }
func (m *GetTrackValueResponse) String() string            { return proto.CompactTextString(m) }
func (*GetTrackValueResponse) ProtoMessage()               {}
func (*GetTrackValueResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{44} }

func (m *GetTrackValueResponse) GetValue() *google_protobuf.Value {
	if m != nil {
		return m.Value
	}
	return nil
}

type TagsCloudRequest struct {
	Index  int64    `protobuf:"varint,1,opt,name=index" json:"index,omitempty"`
	OrgId  string   `protobuf:"bytes,2,opt,name=org_id,json=orgId" json:"org_id,omitempty"`
	Object string   `protobuf:"bytes,3,opt,name=object" json:"object,omitempty"`
	Tags   []string `protobuf:"bytes,4,rep,name=tags" json:"tags,omitempty"`
}

func (m *TagsCloudRequest) Reset()                    { *m = TagsCloudRequest{} }
func (m *TagsCloudRequest) String() string            { return proto.CompactTextString(m) }
func (*TagsCloudRequest) ProtoMessage()               {}
func (*TagsCloudRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{45} }

func (m *TagsCloudRequest) GetIndex() int64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *TagsCloudRequest) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *TagsCloudRequest) GetObject() string {
	if m != nil {
		return m.Object
	}
	return ""
}

func (m *TagsCloudRequest) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

type TagsCloudResponse struct {
}

func (m *TagsCloudResponse) Reset()                    { *m = TagsCloudResponse{} }
func (m *TagsCloudResponse) String() string            { return proto.CompactTextString(m) }
func (*TagsCloudResponse) ProtoMessage()               {}
func (*TagsCloudResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{46} }

type GetTopTagsRequest struct {
	Index  int64  `protobuf:"varint,1,opt,name=index" json:"index,omitempty"`
	N      int64  `protobuf:"varint,2,opt,name=n" json:"n,omitempty"`
	OrgId  string `protobuf:"bytes,3,opt,name=org_id,json=orgId" json:"org_id,omitempty"`
	Object string `protobuf:"bytes,4,opt,name=object" json:"object,omitempty"`
}

func (m *GetTopTagsRequest) Reset()                    { *m = GetTopTagsRequest{} }
func (m *GetTopTagsRequest) String() string            { return proto.CompactTextString(m) }
func (*GetTopTagsRequest) ProtoMessage()               {}
func (*GetTopTagsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{47} }

func (m *GetTopTagsRequest) GetIndex() int64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *GetTopTagsRequest) GetN() int64 {
	if m != nil {
		return m.N
	}
	return 0
}

func (m *GetTopTagsRequest) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *GetTopTagsRequest) GetObject() string {
	if m != nil {
		return m.Object
	}
	return ""
}

type GetTopTagsResponse struct {
	Tags []string `protobuf:"bytes,1,rep,name=tags" json:"tags,omitempty"`
}

func (m *GetTopTagsResponse) Reset()                    { *m = GetTopTagsResponse{} }
func (m *GetTopTagsResponse) String() string            { return proto.CompactTextString(m) }
func (*GetTopTagsResponse) ProtoMessage()               {}
func (*GetTopTagsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{48} }

func (m *GetTopTagsResponse) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func init() {
	proto.RegisterType((*Item)(nil), "go.micro.srv.kv.Item")
	proto.RegisterType((*GetRequest)(nil), "go.micro.srv.kv.GetRequest")
	proto.RegisterType((*GetResponse)(nil), "go.micro.srv.kv.GetResponse")
	proto.RegisterType((*PutRequest)(nil), "go.micro.srv.kv.PutRequest")
	proto.RegisterType((*PutResponse)(nil), "go.micro.srv.kv.PutResponse")
	proto.RegisterType((*DelRequest)(nil), "go.micro.srv.kv.DelRequest")
	proto.RegisterType((*DelResponse)(nil), "go.micro.srv.kv.DelResponse")
	proto.RegisterType((*GetExRequest)(nil), "go.micro.srv.kv.GetExRequest")
	proto.RegisterType((*GetExResponse)(nil), "go.micro.srv.kv.GetExResponse")
	proto.RegisterType((*PutExRequest)(nil), "go.micro.srv.kv.PutExRequest")
	proto.RegisterType((*PutExResponse)(nil), "go.micro.srv.kv.PutExResponse")
	proto.RegisterType((*DelExRequest)(nil), "go.micro.srv.kv.DelExRequest")
	proto.RegisterType((*DelExResponse)(nil), "go.micro.srv.kv.DelExResponse")
	proto.RegisterType((*ConfirmTokenRequest)(nil), "go.micro.srv.kv.ConfirmTokenRequest")
	proto.RegisterType((*ConfirmTokenResponse)(nil), "go.micro.srv.kv.ConfirmTokenResponse")
	proto.RegisterType((*RemoveTokenRequest)(nil), "go.micro.srv.kv.RemoveTokenRequest")
	proto.RegisterType((*RemoveTokenResponse)(nil), "go.micro.srv.kv.RemoveTokenResponse")
	proto.RegisterType((*LockedRequest)(nil), "go.micro.srv.kv.LockedRequest")
	proto.RegisterType((*LockedResponse)(nil), "go.micro.srv.kv.LockedResponse")
	proto.RegisterType((*UnLockRequest)(nil), "go.micro.srv.kv.UnLockRequest")
	proto.RegisterType((*UnLockResponse)(nil), "go.micro.srv.kv.UnLockResponse")
	proto.RegisterType((*IsLockedRequest)(nil), "go.micro.srv.kv.IsLockedRequest")
	proto.RegisterType((*IsLockedResponse)(nil), "go.micro.srv.kv.IsLockedResponse")
	proto.RegisterType((*AuthFailedRequest)(nil), "go.micro.srv.kv.AuthFailedRequest")
	proto.RegisterType((*AuthFailedResponse)(nil), "go.micro.srv.kv.AuthFailedResponse")
	proto.RegisterType((*RemoveSessionRequest)(nil), "go.micro.srv.kv.RemoveSessionRequest")
	proto.RegisterType((*RemoveSessionResponse)(nil), "go.micro.srv.kv.RemoveSessionResponse")
	proto.RegisterType((*ReadSessionRequest)(nil), "go.micro.srv.kv.ReadSessionRequest")
	proto.RegisterType((*ReadSessionResponse)(nil), "go.micro.srv.kv.ReadSessionResponse")
	proto.RegisterType((*IncTrackCountRequest)(nil), "go.micro.srv.kv.IncTrackCountRequest")
	proto.RegisterType((*IncTrackCountResponse)(nil), "go.micro.srv.kv.IncTrackCountResponse")
	proto.RegisterType((*GetTrackCountRequest)(nil), "go.micro.srv.kv.GetTrackCountRequest")
	proto.RegisterType((*GetTrackCountResponse)(nil), "go.micro.srv.kv.GetTrackCountResponse")
	proto.RegisterType((*SetTrackCountRequest)(nil), "go.micro.srv.kv.SetTrackCountRequest")
	proto.RegisterType((*SetTrackCountResponse)(nil), "go.micro.srv.kv.SetTrackCountResponse")
	proto.RegisterType((*IncBadgeCountRequest)(nil), "go.micro.srv.kv.IncBadgeCountRequest")
	proto.RegisterType((*IncBadgeCountResponse)(nil), "go.micro.srv.kv.IncBadgeCountResponse")
	proto.RegisterType((*DecrBadgeCountRequest)(nil), "go.micro.srv.kv.DecrBadgeCountRequest")
	proto.RegisterType((*DecrBadgeCountResponse)(nil), "go.micro.srv.kv.DecrBadgeCountResponse")
	proto.RegisterType((*GetBadgeCountRequest)(nil), "go.micro.srv.kv.GetBadgeCountRequest")
	proto.RegisterType((*GetBadgeCountResponse)(nil), "go.micro.srv.kv.GetBadgeCountResponse")
	proto.RegisterType((*SetBadgeCountRequest)(nil), "go.micro.srv.kv.SetBadgeCountRequest")
	proto.RegisterType((*SetBadgeCountResponse)(nil), "go.micro.srv.kv.SetBadgeCountResponse")
	proto.RegisterType((*GetTrackValueRequest)(nil), "go.micro.srv.kv.GetTrackValueRequest")
	proto.RegisterType((*GetTrackValueResponse)(nil), "go.micro.srv.kv.GetTrackValueResponse")
	proto.RegisterType((*TagsCloudRequest)(nil), "go.micro.srv.kv.TagsCloudRequest")
	proto.RegisterType((*TagsCloudResponse)(nil), "go.micro.srv.kv.TagsCloudResponse")
	proto.RegisterType((*GetTopTagsRequest)(nil), "go.micro.srv.kv.GetTopTagsRequest")
	proto.RegisterType((*GetTopTagsResponse)(nil), "go.micro.srv.kv.GetTopTagsResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for KvService service

type KvServiceClient interface {
	Get(ctx context.Context, in *GetRequest, opts ...client.CallOption) (*GetResponse, error)
	Put(ctx context.Context, in *PutRequest, opts ...client.CallOption) (*PutResponse, error)
	Del(ctx context.Context, in *DelRequest, opts ...client.CallOption) (*DelResponse, error)
	// businses logic
	// account-srv
	GetEx(ctx context.Context, in *GetExRequest, opts ...client.CallOption) (*GetExResponse, error)
	PutEx(ctx context.Context, in *PutExRequest, opts ...client.CallOption) (*PutExResponse, error)
	DelEx(ctx context.Context, in *DelExRequest, opts ...client.CallOption) (*DelExResponse, error)
	ConfirmToken(ctx context.Context, in *ConfirmTokenRequest, opts ...client.CallOption) (*ConfirmTokenResponse, error)
	RemoveToken(ctx context.Context, in *RemoveTokenRequest, opts ...client.CallOption) (*RemoveTokenResponse, error)
	Locked(ctx context.Context, in *LockedRequest, opts ...client.CallOption) (*LockedResponse, error)
	UnLock(ctx context.Context, in *UnLockRequest, opts ...client.CallOption) (*UnLockResponse, error)
	IsLocked(ctx context.Context, in *IsLockedRequest, opts ...client.CallOption) (*IsLockedResponse, error)
	AuthFailed(ctx context.Context, in *AuthFailedRequest, opts ...client.CallOption) (*AuthFailedResponse, error)
	RemoveSession(ctx context.Context, in *RemoveSessionRequest, opts ...client.CallOption) (*RemoveSessionResponse, error)
	ReadSession(ctx context.Context, in *ReadSessionRequest, opts ...client.CallOption) (*ReadSessionResponse, error)
	// track-srv
	IncTrackCount(ctx context.Context, in *IncTrackCountRequest, opts ...client.CallOption) (*IncTrackCountResponse, error)
	GetTrackCount(ctx context.Context, in *GetTrackCountRequest, opts ...client.CallOption) (*GetTrackCountResponse, error)
	SetTrackCount(ctx context.Context, in *SetTrackCountRequest, opts ...client.CallOption) (*SetTrackCountResponse, error)
	GetTrackValue(ctx context.Context, in *GetTrackValueRequest, opts ...client.CallOption) (*GetTrackValueResponse, error)
	// badge count
	IncBadgeCount(ctx context.Context, in *IncBadgeCountRequest, opts ...client.CallOption) (*IncBadgeCountResponse, error)
	DecrBadgeCount(ctx context.Context, in *DecrBadgeCountRequest, opts ...client.CallOption) (*DecrBadgeCountResponse, error)
	GetBadgeCount(ctx context.Context, in *GetBadgeCountRequest, opts ...client.CallOption) (*GetBadgeCountResponse, error)
	SetBadgeCount(ctx context.Context, in *SetBadgeCountRequest, opts ...client.CallOption) (*SetBadgeCountResponse, error)
	// cloud tags
	TagsCloud(ctx context.Context, in *TagsCloudRequest, opts ...client.CallOption) (*TagsCloudResponse, error)
	GetTopTags(ctx context.Context, in *GetTopTagsRequest, opts ...client.CallOption) (*GetTopTagsResponse, error)
}

type kvServiceClient struct {
	c           client.Client
	serviceName string
}

func NewKvServiceClient(serviceName string, c client.Client) KvServiceClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "go.micro.srv.kv"
	}
	return &kvServiceClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *kvServiceClient) Get(ctx context.Context, in *GetRequest, opts ...client.CallOption) (*GetResponse, error) {
	req := c.c.NewRequest(c.serviceName, "KvService.Get", in)
	out := new(GetResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kvServiceClient) Put(ctx context.Context, in *PutRequest, opts ...client.CallOption) (*PutResponse, error) {
	req := c.c.NewRequest(c.serviceName, "KvService.Put", in)
	out := new(PutResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kvServiceClient) Del(ctx context.Context, in *DelRequest, opts ...client.CallOption) (*DelResponse, error) {
	req := c.c.NewRequest(c.serviceName, "KvService.Del", in)
	out := new(DelResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kvServiceClient) GetEx(ctx context.Context, in *GetExRequest, opts ...client.CallOption) (*GetExResponse, error) {
	req := c.c.NewRequest(c.serviceName, "KvService.GetEx", in)
	out := new(GetExResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kvServiceClient) PutEx(ctx context.Context, in *PutExRequest, opts ...client.CallOption) (*PutExResponse, error) {
	req := c.c.NewRequest(c.serviceName, "KvService.PutEx", in)
	out := new(PutExResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kvServiceClient) DelEx(ctx context.Context, in *DelExRequest, opts ...client.CallOption) (*DelExResponse, error) {
	req := c.c.NewRequest(c.serviceName, "KvService.DelEx", in)
	out := new(DelExResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kvServiceClient) ConfirmToken(ctx context.Context, in *ConfirmTokenRequest, opts ...client.CallOption) (*ConfirmTokenResponse, error) {
	req := c.c.NewRequest(c.serviceName, "KvService.ConfirmToken", in)
	out := new(ConfirmTokenResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kvServiceClient) RemoveToken(ctx context.Context, in *RemoveTokenRequest, opts ...client.CallOption) (*RemoveTokenResponse, error) {
	req := c.c.NewRequest(c.serviceName, "KvService.RemoveToken", in)
	out := new(RemoveTokenResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kvServiceClient) Locked(ctx context.Context, in *LockedRequest, opts ...client.CallOption) (*LockedResponse, error) {
	req := c.c.NewRequest(c.serviceName, "KvService.Locked", in)
	out := new(LockedResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kvServiceClient) UnLock(ctx context.Context, in *UnLockRequest, opts ...client.CallOption) (*UnLockResponse, error) {
	req := c.c.NewRequest(c.serviceName, "KvService.UnLock", in)
	out := new(UnLockResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kvServiceClient) IsLocked(ctx context.Context, in *IsLockedRequest, opts ...client.CallOption) (*IsLockedResponse, error) {
	req := c.c.NewRequest(c.serviceName, "KvService.IsLocked", in)
	out := new(IsLockedResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kvServiceClient) AuthFailed(ctx context.Context, in *AuthFailedRequest, opts ...client.CallOption) (*AuthFailedResponse, error) {
	req := c.c.NewRequest(c.serviceName, "KvService.AuthFailed", in)
	out := new(AuthFailedResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kvServiceClient) RemoveSession(ctx context.Context, in *RemoveSessionRequest, opts ...client.CallOption) (*RemoveSessionResponse, error) {
	req := c.c.NewRequest(c.serviceName, "KvService.RemoveSession", in)
	out := new(RemoveSessionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kvServiceClient) ReadSession(ctx context.Context, in *ReadSessionRequest, opts ...client.CallOption) (*ReadSessionResponse, error) {
	req := c.c.NewRequest(c.serviceName, "KvService.ReadSession", in)
	out := new(ReadSessionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kvServiceClient) IncTrackCount(ctx context.Context, in *IncTrackCountRequest, opts ...client.CallOption) (*IncTrackCountResponse, error) {
	req := c.c.NewRequest(c.serviceName, "KvService.IncTrackCount", in)
	out := new(IncTrackCountResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kvServiceClient) GetTrackCount(ctx context.Context, in *GetTrackCountRequest, opts ...client.CallOption) (*GetTrackCountResponse, error) {
	req := c.c.NewRequest(c.serviceName, "KvService.GetTrackCount", in)
	out := new(GetTrackCountResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kvServiceClient) SetTrackCount(ctx context.Context, in *SetTrackCountRequest, opts ...client.CallOption) (*SetTrackCountResponse, error) {
	req := c.c.NewRequest(c.serviceName, "KvService.SetTrackCount", in)
	out := new(SetTrackCountResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kvServiceClient) GetTrackValue(ctx context.Context, in *GetTrackValueRequest, opts ...client.CallOption) (*GetTrackValueResponse, error) {
	req := c.c.NewRequest(c.serviceName, "KvService.GetTrackValue", in)
	out := new(GetTrackValueResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kvServiceClient) IncBadgeCount(ctx context.Context, in *IncBadgeCountRequest, opts ...client.CallOption) (*IncBadgeCountResponse, error) {
	req := c.c.NewRequest(c.serviceName, "KvService.IncBadgeCount", in)
	out := new(IncBadgeCountResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kvServiceClient) DecrBadgeCount(ctx context.Context, in *DecrBadgeCountRequest, opts ...client.CallOption) (*DecrBadgeCountResponse, error) {
	req := c.c.NewRequest(c.serviceName, "KvService.DecrBadgeCount", in)
	out := new(DecrBadgeCountResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kvServiceClient) GetBadgeCount(ctx context.Context, in *GetBadgeCountRequest, opts ...client.CallOption) (*GetBadgeCountResponse, error) {
	req := c.c.NewRequest(c.serviceName, "KvService.GetBadgeCount", in)
	out := new(GetBadgeCountResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kvServiceClient) SetBadgeCount(ctx context.Context, in *SetBadgeCountRequest, opts ...client.CallOption) (*SetBadgeCountResponse, error) {
	req := c.c.NewRequest(c.serviceName, "KvService.SetBadgeCount", in)
	out := new(SetBadgeCountResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kvServiceClient) TagsCloud(ctx context.Context, in *TagsCloudRequest, opts ...client.CallOption) (*TagsCloudResponse, error) {
	req := c.c.NewRequest(c.serviceName, "KvService.TagsCloud", in)
	out := new(TagsCloudResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kvServiceClient) GetTopTags(ctx context.Context, in *GetTopTagsRequest, opts ...client.CallOption) (*GetTopTagsResponse, error) {
	req := c.c.NewRequest(c.serviceName, "KvService.GetTopTags", in)
	out := new(GetTopTagsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for KvService service

type KvServiceHandler interface {
	Get(context.Context, *GetRequest, *GetResponse) error
	Put(context.Context, *PutRequest, *PutResponse) error
	Del(context.Context, *DelRequest, *DelResponse) error
	// businses logic
	// account-srv
	GetEx(context.Context, *GetExRequest, *GetExResponse) error
	PutEx(context.Context, *PutExRequest, *PutExResponse) error
	DelEx(context.Context, *DelExRequest, *DelExResponse) error
	ConfirmToken(context.Context, *ConfirmTokenRequest, *ConfirmTokenResponse) error
	RemoveToken(context.Context, *RemoveTokenRequest, *RemoveTokenResponse) error
	Locked(context.Context, *LockedRequest, *LockedResponse) error
	UnLock(context.Context, *UnLockRequest, *UnLockResponse) error
	IsLocked(context.Context, *IsLockedRequest, *IsLockedResponse) error
	AuthFailed(context.Context, *AuthFailedRequest, *AuthFailedResponse) error
	RemoveSession(context.Context, *RemoveSessionRequest, *RemoveSessionResponse) error
	ReadSession(context.Context, *ReadSessionRequest, *ReadSessionResponse) error
	// track-srv
	IncTrackCount(context.Context, *IncTrackCountRequest, *IncTrackCountResponse) error
	GetTrackCount(context.Context, *GetTrackCountRequest, *GetTrackCountResponse) error
	SetTrackCount(context.Context, *SetTrackCountRequest, *SetTrackCountResponse) error
	GetTrackValue(context.Context, *GetTrackValueRequest, *GetTrackValueResponse) error
	// badge count
	IncBadgeCount(context.Context, *IncBadgeCountRequest, *IncBadgeCountResponse) error
	DecrBadgeCount(context.Context, *DecrBadgeCountRequest, *DecrBadgeCountResponse) error
	GetBadgeCount(context.Context, *GetBadgeCountRequest, *GetBadgeCountResponse) error
	SetBadgeCount(context.Context, *SetBadgeCountRequest, *SetBadgeCountResponse) error
	// cloud tags
	TagsCloud(context.Context, *TagsCloudRequest, *TagsCloudResponse) error
	GetTopTags(context.Context, *GetTopTagsRequest, *GetTopTagsResponse) error
}

func RegisterKvServiceHandler(s server.Server, hdlr KvServiceHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&KvService{hdlr}, opts...))
}

type KvService struct {
	KvServiceHandler
}

func (h *KvService) Get(ctx context.Context, in *GetRequest, out *GetResponse) error {
	return h.KvServiceHandler.Get(ctx, in, out)
}

func (h *KvService) Put(ctx context.Context, in *PutRequest, out *PutResponse) error {
	return h.KvServiceHandler.Put(ctx, in, out)
}

func (h *KvService) Del(ctx context.Context, in *DelRequest, out *DelResponse) error {
	return h.KvServiceHandler.Del(ctx, in, out)
}

func (h *KvService) GetEx(ctx context.Context, in *GetExRequest, out *GetExResponse) error {
	return h.KvServiceHandler.GetEx(ctx, in, out)
}

func (h *KvService) PutEx(ctx context.Context, in *PutExRequest, out *PutExResponse) error {
	return h.KvServiceHandler.PutEx(ctx, in, out)
}

func (h *KvService) DelEx(ctx context.Context, in *DelExRequest, out *DelExResponse) error {
	return h.KvServiceHandler.DelEx(ctx, in, out)
}

func (h *KvService) ConfirmToken(ctx context.Context, in *ConfirmTokenRequest, out *ConfirmTokenResponse) error {
	return h.KvServiceHandler.ConfirmToken(ctx, in, out)
}

func (h *KvService) RemoveToken(ctx context.Context, in *RemoveTokenRequest, out *RemoveTokenResponse) error {
	return h.KvServiceHandler.RemoveToken(ctx, in, out)
}

func (h *KvService) Locked(ctx context.Context, in *LockedRequest, out *LockedResponse) error {
	return h.KvServiceHandler.Locked(ctx, in, out)
}

func (h *KvService) UnLock(ctx context.Context, in *UnLockRequest, out *UnLockResponse) error {
	return h.KvServiceHandler.UnLock(ctx, in, out)
}

func (h *KvService) IsLocked(ctx context.Context, in *IsLockedRequest, out *IsLockedResponse) error {
	return h.KvServiceHandler.IsLocked(ctx, in, out)
}

func (h *KvService) AuthFailed(ctx context.Context, in *AuthFailedRequest, out *AuthFailedResponse) error {
	return h.KvServiceHandler.AuthFailed(ctx, in, out)
}

func (h *KvService) RemoveSession(ctx context.Context, in *RemoveSessionRequest, out *RemoveSessionResponse) error {
	return h.KvServiceHandler.RemoveSession(ctx, in, out)
}

func (h *KvService) ReadSession(ctx context.Context, in *ReadSessionRequest, out *ReadSessionResponse) error {
	return h.KvServiceHandler.ReadSession(ctx, in, out)
}

func (h *KvService) IncTrackCount(ctx context.Context, in *IncTrackCountRequest, out *IncTrackCountResponse) error {
	return h.KvServiceHandler.IncTrackCount(ctx, in, out)
}

func (h *KvService) GetTrackCount(ctx context.Context, in *GetTrackCountRequest, out *GetTrackCountResponse) error {
	return h.KvServiceHandler.GetTrackCount(ctx, in, out)
}

func (h *KvService) SetTrackCount(ctx context.Context, in *SetTrackCountRequest, out *SetTrackCountResponse) error {
	return h.KvServiceHandler.SetTrackCount(ctx, in, out)
}

func (h *KvService) GetTrackValue(ctx context.Context, in *GetTrackValueRequest, out *GetTrackValueResponse) error {
	return h.KvServiceHandler.GetTrackValue(ctx, in, out)
}

func (h *KvService) IncBadgeCount(ctx context.Context, in *IncBadgeCountRequest, out *IncBadgeCountResponse) error {
	return h.KvServiceHandler.IncBadgeCount(ctx, in, out)
}

func (h *KvService) DecrBadgeCount(ctx context.Context, in *DecrBadgeCountRequest, out *DecrBadgeCountResponse) error {
	return h.KvServiceHandler.DecrBadgeCount(ctx, in, out)
}

func (h *KvService) GetBadgeCount(ctx context.Context, in *GetBadgeCountRequest, out *GetBadgeCountResponse) error {
	return h.KvServiceHandler.GetBadgeCount(ctx, in, out)
}

func (h *KvService) SetBadgeCount(ctx context.Context, in *SetBadgeCountRequest, out *SetBadgeCountResponse) error {
	return h.KvServiceHandler.SetBadgeCount(ctx, in, out)
}

func (h *KvService) TagsCloud(ctx context.Context, in *TagsCloudRequest, out *TagsCloudResponse) error {
	return h.KvServiceHandler.TagsCloud(ctx, in, out)
}

func (h *KvService) GetTopTags(ctx context.Context, in *GetTopTagsRequest, out *GetTopTagsResponse) error {
	return h.KvServiceHandler.GetTopTags(ctx, in, out)
}

func init() { proto.RegisterFile("server/kv-srv/proto/kv/kv.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1153 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x96, 0x6d, 0x73, 0x9b, 0x46,
	0x17, 0x86, 0x25, 0xcb, 0xf6, 0x44, 0x47, 0x56, 0x6c, 0xaf, 0x25, 0xc7, 0xc3, 0xf3, 0xc4, 0x71,
	0x49, 0xe2, 0xa8, 0xad, 0x83, 0x66, 0xdc, 0xe9, 0xcb, 0xf4, 0x43, 0x3b, 0x8d, 0x95, 0x38, 0x1a,
	0x77, 0x5a, 0x57, 0xa8, 0xed, 0x4c, 0x67, 0x3a, 0x2e, 0x46, 0x2b, 0x42, 0x85, 0x58, 0x95, 0xb7,
	0x71, 0xfe, 0x58, 0x7f, 0x5f, 0x87, 0x65, 0x81, 0x05, 0x56, 0x60, 0x45, 0xf9, 0x24, 0x2d, 0x9c,
	0x73, 0xdf, 0xe7, 0x1c, 0x96, 0xe5, 0x82, 0x27, 0x2e, 0x76, 0x02, 0xec, 0xf4, 0x67, 0xc1, 0x4b,
	0xd7, 0x09, 0xfa, 0x0b, 0x87, 0x78, 0xa4, 0x3f, 0x0b, 0xfa, 0xb3, 0x40, 0xa1, 0xff, 0xd1, 0xae,
	0x41, 0x94, 0xb9, 0xa9, 0x3b, 0x44, 0x71, 0x9d, 0x40, 0x99, 0x05, 0xd2, 0x97, 0x86, 0xe9, 0xbd,
	0xf3, 0x6f, 0x15, 0x9d, 0xcc, 0xfb, 0x06, 0xb1, 0x34, 0xdb, 0x88, 0xb2, 0x6e, 0xfd, 0x69, 0x7f,
	0xe1, 0xbd, 0x5f, 0x60, 0xb7, 0xef, 0x7a, 0x8e, 0xaf, 0x7b, 0xec, 0x27, 0xd2, 0x91, 0x7f, 0x82,
	0xcd, 0xa1, 0x87, 0xe7, 0x68, 0x0f, 0x1a, 0x33, 0xfc, 0xfe, 0xa8, 0x7e, 0x52, 0xef, 0x35, 0x47,
	0xe1, 0x5f, 0xd4, 0x81, 0xad, 0x40, 0xb3, 0x7c, 0x7c, 0xb4, 0x71, 0x52, 0xef, 0xed, 0x8c, 0xa2,
	0x05, 0x3a, 0x06, 0xc0, 0x77, 0x0b, 0xd3, 0xd1, 0x3c, 0x93, 0xd8, 0x47, 0x8d, 0x93, 0x7a, 0xaf,
	0x31, 0xe2, 0xae, 0xc8, 0xc7, 0x00, 0x97, 0xd8, 0x1b, 0xe1, 0x7f, 0x7c, 0xec, 0x7a, 0x45, 0x55,
	0xf9, 0x1b, 0x68, 0xd1, 0xfb, 0xee, 0x82, 0xd8, 0x2e, 0x46, 0x9f, 0xc2, 0xa6, 0xe9, 0xe1, 0x39,
	0x8d, 0x68, 0x9d, 0x77, 0x95, 0x5c, 0x57, 0x4a, 0x58, 0xdb, 0x88, 0x86, 0xc8, 0x5f, 0x03, 0x5c,
	0xfb, 0x89, 0xf2, 0x0a, 0x89, 0x6d, 0x68, 0xd1, 0xc4, 0xc8, 0x32, 0xac, 0x70, 0x80, 0xad, 0xe5,
	0x15, 0xb6, 0xa1, 0x45, 0xef, 0xb3, 0xf0, 0xaf, 0x60, 0xe7, 0x12, 0x7b, 0xaf, 0xef, 0xe2, 0x84,
	0x0e, 0x6c, 0x99, 0xf6, 0x04, 0xdf, 0xd1, 0x94, 0xc6, 0x28, 0x5a, 0xc4, 0x32, 0x1b, 0xa9, 0xcc,
	0xb7, 0xd0, 0x66, 0x79, 0xab, 0xb7, 0xfa, 0x33, 0xec, 0x5c, 0xfb, 0x95, 0x9e, 0xb1, 0xe0, 0x46,
	0xb5, 0xe0, 0x2e, 0xb4, 0x99, 0x60, 0xda, 0xd5, 0x00, 0x5b, 0xab, 0x77, 0xb5, 0x0b, 0x6d, 0x96,
	0xc7, 0x84, 0x5e, 0xc0, 0xc1, 0x05, 0xb1, 0xa7, 0xa6, 0x33, 0x1f, 0x93, 0x19, 0xb6, 0x97, 0x8f,
	0xf5, 0x0c, 0x3a, 0xd9, 0x40, 0x36, 0x96, 0x64, 0x9b, 0x45, 0xb1, 0xd1, 0x42, 0x1e, 0x02, 0x1a,
	0xe1, 0x39, 0x09, 0x70, 0x46, 0xf5, 0x31, 0x80, 0xa6, 0xeb, 0xc4, 0xb7, 0xbd, 0x1b, 0x73, 0xc2,
	0x12, 0x9a, 0xec, 0xca, 0x70, 0x12, 0x4a, 0x79, 0x61, 0x38, 0x2b, 0x38, 0x5a, 0xc8, 0x5d, 0x38,
	0xc8, 0x48, 0xb1, 0xc2, 0x07, 0xd0, 0xfe, 0x91, 0xe8, 0x33, 0x3c, 0x29, 0x1f, 0x41, 0xd6, 0x72,
	0x23, 0x67, 0x29, 0xf7, 0xe0, 0x61, 0xac, 0xc2, 0xfa, 0x39, 0x84, 0x6d, 0x8b, 0x5e, 0xa1, 0x3a,
	0x0f, 0x46, 0x6c, 0x25, 0xfb, 0xd0, 0xfe, 0xd5, 0x0e, 0x63, 0x63, 0xbf, 0x53, 0xd8, 0xd5, 0x7c,
	0xef, 0xdd, 0xcd, 0x54, 0x33, 0xad, 0x1b, 0xde, 0xb9, 0x1d, 0x5e, 0x7e, 0xa3, 0x99, 0xd6, 0x30,
	0xae, 0x20, 0x94, 0x60, 0x21, 0x1b, 0x34, 0xa4, 0x19, 0x5e, 0x19, 0x0a, 0x0a, 0x6c, 0x08, 0x0a,
	0x8c, 0x6d, 0x2b, 0x0a, 0x7c, 0x03, 0xbb, 0x43, 0xf7, 0x23, 0x8c, 0xe4, 0x33, 0xd8, 0x4b, 0x75,
	0x2a, 0x3c, 0xdf, 0xc2, 0xfe, 0x0f, 0xac, 0xd9, 0x35, 0x5d, 0xcf, 0x00, 0xf1, 0x4a, 0xa9, 0xef,
	0x94, 0x5e, 0x61, 0x5a, 0x6c, 0x25, 0x5f, 0x41, 0x27, 0xda, 0x13, 0x2a, 0x76, 0x5d, 0x93, 0xd8,
	0x95, 0xd6, 0x6e, 0x14, 0xc7, 0x59, 0xb3, 0x2b, 0xc3, 0x89, 0xfc, 0x08, 0xba, 0x39, 0x31, 0xb6,
	0xc5, 0xe8, 0x26, 0xd6, 0x26, 0x1f, 0xc3, 0xe3, 0xf3, 0x70, 0x13, 0x73, 0x52, 0xa5, 0x2f, 0xcf,
	0x77, 0xd0, 0x19, 0xda, 0xfa, 0xd8, 0xd1, 0xf4, 0xd9, 0x45, 0x38, 0x9e, 0x55, 0x5f, 0xf2, 0x97,
	0xd0, 0xcd, 0xe5, 0xa7, 0x76, 0x74, 0xde, 0xb1, 0x00, 0x5d, 0x84, 0x76, 0x97, 0xd8, 0x5b, 0xcb,
	0x2e, 0x97, 0x5f, 0x6a, 0x37, 0x86, 0x8e, 0xba, 0x86, 0x5d, 0xaa, 0xda, 0xe0, 0x55, 0x1f, 0x41,
	0x57, 0x15, 0x15, 0xc1, 0x86, 0xf9, 0x4a, 0x9b, 0x18, 0x78, 0x8d, 0x61, 0xf2, 0xf9, 0xa5, 0xdd,
	0x7d, 0x0f, 0xdd, 0x01, 0xd6, 0x9d, 0x0f, 0xf7, 0x53, 0xe0, 0x30, 0x2f, 0x70, 0x8f, 0xa7, 0xb7,
	0x56, 0x7f, 0xb9, 0xfc, 0x7b, 0x3c, 0xbd, 0x0f, 0xb6, 0x2b, 0x7d, 0x7a, 0xc5, 0x22, 0xf8, 0xbd,
	0xf9, 0x5b, 0xf8, 0x6e, 0xac, 0xda, 0xdd, 0xeb, 0x74, 0x6f, 0xb2, 0x7c, 0xd6, 0xdd, 0x19, 0xff,
	0xe6, 0xb5, 0xce, 0x0f, 0x15, 0x83, 0x10, 0xc3, 0xc2, 0x4a, 0xcc, 0x5c, 0x4a, 0x14, 0xce, 0xde,
	0xc8, 0x19, 0xec, 0x8d, 0x35, 0xc3, 0xbd, 0xb0, 0x88, 0x5f, 0x71, 0xcc, 0x75, 0x61, 0x9b, 0x38,
	0x46, 0x7a, 0x06, 0x6c, 0x11, 0xc7, 0x18, 0x4e, 0xc2, 0x83, 0x8c, 0xdc, 0xfe, 0x8d, 0x75, 0x8f,
	0x9d, 0xf0, 0x6c, 0x85, 0x10, 0x6c, 0x7a, 0x9a, 0xe1, 0x1e, 0x6d, 0x9e, 0x34, 0x7a, 0xcd, 0x11,
	0xfd, 0x2f, 0x1f, 0xc0, 0x3e, 0x67, 0xc6, 0x06, 0x31, 0x85, 0xfd, 0xb0, 0x11, 0xb2, 0x08, 0x6f,
	0x95, 0x97, 0xb0, 0x03, 0x75, 0x9b, 0x7d, 0x67, 0xea, 0x36, 0x57, 0x50, 0x43, 0x5c, 0xd0, 0x26,
	0x5f, 0x90, 0xdc, 0x03, 0xc4, 0xfb, 0xb0, 0x69, 0xc5, 0x65, 0xd6, 0xd3, 0x32, 0xcf, 0xff, 0xdd,
	0x83, 0xe6, 0x55, 0xa0, 0x62, 0x27, 0x30, 0x75, 0x8c, 0x5e, 0x41, 0xe3, 0x12, 0x7b, 0xe8, 0x7f,
	0x05, 0x8a, 0x49, 0x69, 0x52, 0xfa, 0xbf, 0xf8, 0x26, 0xeb, 0xb0, 0x16, 0x6a, 0x5c, 0xfb, 0x22,
	0x8d, 0x94, 0x1b, 0x05, 0x1a, 0x3c, 0x1b, 0x52, 0x8d, 0x01, 0xb6, 0x04, 0x1a, 0x29, 0x33, 0x0a,
	0x34, 0x78, 0x60, 0xac, 0xa1, 0xb7, 0xb0, 0x45, 0xd1, 0x0f, 0x3d, 0x16, 0x15, 0x9c, 0x40, 0x97,
	0x74, 0xbc, 0xec, 0x36, 0xaf, 0x44, 0xb9, 0x4d, 0xa0, 0xc4, 0x03, 0xa2, 0x40, 0x29, 0x8b, 0x7b,
	0x54, 0x89, 0x82, 0x9b, 0x40, 0x89, 0x07, 0x41, 0x81, 0x52, 0x96, 0xf7, 0x6a, 0xe8, 0x4f, 0xd8,
	0xe1, 0x41, 0x0e, 0x3d, 0x2b, 0x64, 0x08, 0x80, 0x50, 0x7a, 0x5e, 0x11, 0x95, 0xc8, 0xff, 0x01,
	0x2d, 0x0e, 0xd7, 0xd0, 0xd3, 0x42, 0x5e, 0x91, 0x0b, 0xa5, 0x67, 0xe5, 0x41, 0x89, 0xf6, 0x15,
	0x6c, 0x47, 0x60, 0x82, 0x8a, 0x6d, 0x66, 0xc8, 0x47, 0x7a, 0xb2, 0xf4, 0x3e, 0x2f, 0x16, 0x91,
	0x95, 0x40, 0x2c, 0x43, 0x7a, 0x02, 0xb1, 0x2c, 0x92, 0xc9, 0x35, 0xf4, 0x0b, 0x3c, 0x88, 0xa1,
	0x09, 0x9d, 0x14, 0x49, 0x3e, 0xcb, 0x65, 0xd2, 0x27, 0x25, 0x11, 0x89, 0xe4, 0xef, 0x00, 0x29,
	0x11, 0x21, 0xb9, 0x90, 0x52, 0x00, 0x2f, 0xe9, 0x69, 0x69, 0x4c, 0x22, 0xfc, 0x17, 0xb4, 0x33,
	0xbc, 0x83, 0x9e, 0x2f, 0x19, 0x7f, 0x16, 0x7c, 0xa4, 0xd3, 0xaa, 0xb0, 0xec, 0x1e, 0x48, 0x68,
	0x47, 0xb8, 0x07, 0xf2, 0x58, 0x25, 0xdc, 0x03, 0x05, 0x60, 0x8a, 0xaa, 0xcf, 0xc0, 0x8d, 0xa0,
	0x7a, 0x11, 0x3c, 0x09, 0xaa, 0x17, 0x32, 0x52, 0xe4, 0x90, 0xe1, 0x19, 0x81, 0x83, 0x88, 0x97,
	0x04, 0x0e, 0x42, 0x2c, 0x8a, 0x1c, 0xd4, 0x0a, 0x07, 0xf5, 0x7e, 0x0e, 0xea, 0x72, 0x87, 0xcc,
	0x77, 0xaf, 0xa4, 0x07, 0xfe, 0xbb, 0x5a, 0xd2, 0x43, 0xe6, 0xf3, 0x99, 0x3c, 0x87, 0xf4, 0x93,
	0x2d, 0x7e, 0x0e, 0x05, 0x50, 0x10, 0x3f, 0x07, 0xc1, 0x97, 0xbf, 0x86, 0x74, 0x78, 0x98, 0x25,
	0x21, 0x74, 0x2a, 0x38, 0xdc, 0x04, 0xac, 0x25, 0xbd, 0xa8, 0x8c, 0xcb, 0x0d, 0xaa, 0xb4, 0x0d,
	0x11, 0x5e, 0x89, 0x07, 0xb5, 0xcc, 0x41, 0xad, 0x70, 0x50, 0xef, 0xe7, 0xa0, 0x2e, 0x71, 0x18,
	0x43, 0x33, 0x01, 0x06, 0x54, 0x3c, 0x5b, 0xf2, 0xe4, 0x22, 0xc9, 0x65, 0x21, 0xfc, 0xf9, 0x93,
	0x92, 0x80, 0xe0, 0xfc, 0x29, 0xe0, 0x88, 0xe0, 0xfc, 0x29, 0xa2, 0x84, 0x5c, 0xbb, 0xdd, 0xa6,
	0x8c, 0xf5, 0xc5, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x6c, 0xea, 0xe1, 0xea, 0x24, 0x13, 0x00,
	0x00,
}
