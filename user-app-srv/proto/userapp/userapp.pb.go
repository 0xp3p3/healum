// Code generated by protoc-gen-go. DO NOT EDIT.
// source: server/user-app-srv/proto/userapp/userapp.proto

/*
Package go_micro_srv_userapp is a generated protocol buffer package.

It is generated from these files:
	server/user-app-srv/proto/userapp/userapp.proto

It has these top-level messages:
	CreateBookmarkRequest
	CreateBookmarkResponse
	ReadBookmarkContentRequest
	ReadBookmarkContentResponse
	ReadBookmarkContentCategorysRequest
	ReadBookmarkContentCategorysResponse
	ReadBookmarkByCategoryRequest
	ReadBookmarkByCategoryResponse
	DeleteBookmarkRequest
	DeleteBookmarkResponse
	GetSharedPlanRequest
	GetSharedPlanResponse
	GetSharedSurveyRequest
	GetSharedSurveyResponse
	GetSharedContentRequest
	GetSharedContentResponse
	GetSharedGoalRequest
	GetSharedGoalResponse
	GetSharedChallengeRequest
	GetSharedChallengeResponse
	GetSharedHabitRequest
	GetSharedHabitResponse
	SignupToGoalRequest
	SignupToGoalResponse
	ListGoalRequest
	ListGoalResponse
	SignupToChallengeRequest
	SignupToChallengeResponse
	ListChallengeRequest
	ListChallengeResponse
	SignupToHabitRequest
	SignupToHabitResponse
	ListHabitRequest
	ListHabitResponse
	ListMarkersRequest
	ListMarkersResponse
	GetPendingSharedActionsRequest
	GetPendingSharedActionsResponse
	GetGoalProgressRequest
	GetGoalProgressResponse
	GetCurrentChallengesWithCountRequest
	GetCurrentChallengesWithCountResponse
	GetCurrentHabitsWithCountRequest
	GetCurrentHabitsWithCountResponse
	SaveRateForContentRequest
	SaveRateForContentResponse
	DislikeForContentRequest
	DislikeForContentResponse
	DislikeForSimilarContentRequest
	DislikeForSimilarContentResponse
	SaveUserDetailsRequest
	SaveUserDetailsResponse
	SaveUserFeedbackRequest
	SaveUserFeedbackResponse
	JoinUserPlanRequest
	JoinUserPlanResponse
	CreateUserPlanRequest
	CreateUserPlanResponse
	GetUserPlanRequest
	GetUserPlanResponse
	UpdateUserPlanRequest
	UpdateUserPlanResponse
	GetPlanItemsCountByCategoryRequest
	GetPlanItemsCountByCategoryResponse
	GetPlanItemsCountByDayRequest
	GetPlanItemsCountByDayResponse
	GetPlanItemsCountByCategoryAndDayRequest
	GetPlanItemsCountByCategoryAndDayResponse
	Bookmark
	BookmarkContent
	SharedSurvey
	SharedPlan
	SharedGoal
	SharedHabit
	SharedChallenge
	JoinGoal
	JoinChallenge
	JoinHabit
	JoinGoalResponse
	JoinChallengeResponse
	JoinHabitResponse
	MarkerResponse
	GoalProgressResponse
	ChallengeCountResponse
	HabitCountResponse
	ContentRating
	ContentRatingMessage
	ContentDislike
	ContentDislikeMessage
	ContentDislikeSimilar
	ContentDislikeSimilarMessage
	ContentBookmarkStatusMessage
	UserPlan
	CategoryCountResponse
	SharedItem
	ReceivedItemsRequest
	ReceivedItemsResponse
	ReadGoalResponse
	ReadChallengeResponse
	ReadHabitResponse
	ReadContentResponse
	GoalDetail
	ChallengeDetail
	HabitDetail
	ContentDetail
	UpsertOperation
	SearchBookmarkRequest
*/
package go_micro_srv_userapp

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/any"
import go_micro_srv_static "server/static-srv/proto/static"
import go_micro_srv_static2 "server/static-srv/proto/common"
import go_micro_srv_user "server/user-srv/proto/user"
import go_micro_srv_content "server/content-srv/proto/content"
import go_micro_srv_behaviour "server/behaviour-srv/proto/behaviour"
import go_micro_srv_plan "server/plan-srv/proto/plan"
import go_micro_srv_track "server/track-srv/proto/track"
import go_micro_srv_account "server/account-srv/proto/account"
import go_micro_srv_todo "server/todo-srv/proto/todo"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ActionStatus int32

const (
	ActionStatus_ActionStatus_NONE ActionStatus = 0
	ActionStatus_STARTED           ActionStatus = 1
	ActionStatus_IN_PROGRESS       ActionStatus = 2
	ActionStatus_COMPLETED_SUCCESS ActionStatus = 3
	ActionStatus_COMPLETED_FAILURE ActionStatus = 4
	ActionStatus_ABANDONED         ActionStatus = 5
)

var ActionStatus_name = map[int32]string{
	0: "ActionStatus_NONE",
	1: "STARTED",
	2: "IN_PROGRESS",
	3: "COMPLETED_SUCCESS",
	4: "COMPLETED_FAILURE",
	5: "ABANDONED",
}
var ActionStatus_value = map[string]int32{
	"ActionStatus_NONE": 0,
	"STARTED":           1,
	"IN_PROGRESS":       2,
	"COMPLETED_SUCCESS": 3,
	"COMPLETED_FAILURE": 4,
	"ABANDONED":         5,
}

func (x ActionStatus) String() string {
	return proto.EnumName(ActionStatus_name, int32(x))
}
func (ActionStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type CreateBookmarkRequest struct {
	ContentId string `protobuf:"bytes,1,opt,name=content_id,json=contentId" json:"content_id,omitempty"`
	UserId    string `protobuf:"bytes,2,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	OrgId     string `protobuf:"bytes,3,opt,name=org_id,json=orgId" json:"org_id,omitempty"`
}

func (m *CreateBookmarkRequest) Reset()                    { *m = CreateBookmarkRequest{} }
func (m *CreateBookmarkRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateBookmarkRequest) ProtoMessage()               {}
func (*CreateBookmarkRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *CreateBookmarkRequest) GetContentId() string {
	if m != nil {
		return m.ContentId
	}
	return ""
}

func (m *CreateBookmarkRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *CreateBookmarkRequest) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

type CreateBookmarkResponse struct {
	Data    *CreateBookmarkResponse_Data `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	Code    int64                        `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Message string                       `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *CreateBookmarkResponse) Reset()                    { *m = CreateBookmarkResponse{} }
func (m *CreateBookmarkResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateBookmarkResponse) ProtoMessage()               {}
func (*CreateBookmarkResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *CreateBookmarkResponse) GetData() *CreateBookmarkResponse_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *CreateBookmarkResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *CreateBookmarkResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type CreateBookmarkResponse_Data struct {
	BookmarkId string `protobuf:"bytes,1,opt,name=bookmark_id,json=bookmarkId" json:"bookmark_id,omitempty"`
}

func (m *CreateBookmarkResponse_Data) Reset()                    { *m = CreateBookmarkResponse_Data{} }
func (m *CreateBookmarkResponse_Data) String() string            { return proto.CompactTextString(m) }
func (*CreateBookmarkResponse_Data) ProtoMessage()               {}
func (*CreateBookmarkResponse_Data) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

func (m *CreateBookmarkResponse_Data) GetBookmarkId() string {
	if m != nil {
		return m.BookmarkId
	}
	return ""
}

type ReadBookmarkContentRequest struct {
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
}

func (m *ReadBookmarkContentRequest) Reset()                    { *m = ReadBookmarkContentRequest{} }
func (m *ReadBookmarkContentRequest) String() string            { return proto.CompactTextString(m) }
func (*ReadBookmarkContentRequest) ProtoMessage()               {}
func (*ReadBookmarkContentRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ReadBookmarkContentRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

type ReadBookmarkContentResponse struct {
	Data    *ReadBookmarkContentResponse_Data `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	Code    int64                             `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Message string                            `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *ReadBookmarkContentResponse) Reset()                    { *m = ReadBookmarkContentResponse{} }
func (m *ReadBookmarkContentResponse) String() string            { return proto.CompactTextString(m) }
func (*ReadBookmarkContentResponse) ProtoMessage()               {}
func (*ReadBookmarkContentResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ReadBookmarkContentResponse) GetData() *ReadBookmarkContentResponse_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *ReadBookmarkContentResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *ReadBookmarkContentResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type ReadBookmarkContentResponse_Data struct {
	Bookmarks []*BookmarkContent `protobuf:"bytes,1,rep,name=bookmarks" json:"bookmarks,omitempty"`
}

func (m *ReadBookmarkContentResponse_Data) Reset()         { *m = ReadBookmarkContentResponse_Data{} }
func (m *ReadBookmarkContentResponse_Data) String() string { return proto.CompactTextString(m) }
func (*ReadBookmarkContentResponse_Data) ProtoMessage()    {}
func (*ReadBookmarkContentResponse_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{3, 0}
}

func (m *ReadBookmarkContentResponse_Data) GetBookmarks() []*BookmarkContent {
	if m != nil {
		return m.Bookmarks
	}
	return nil
}

type ReadBookmarkContentCategorysRequest struct {
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
}

func (m *ReadBookmarkContentCategorysRequest) Reset()         { *m = ReadBookmarkContentCategorysRequest{} }
func (m *ReadBookmarkContentCategorysRequest) String() string { return proto.CompactTextString(m) }
func (*ReadBookmarkContentCategorysRequest) ProtoMessage()    {}
func (*ReadBookmarkContentCategorysRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{4}
}

func (m *ReadBookmarkContentCategorysRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

type ReadBookmarkContentCategorysResponse struct {
	Data    *ReadBookmarkContentCategorysResponse_Data `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	Code    int64                                      `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Message string                                     `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *ReadBookmarkContentCategorysResponse) Reset()         { *m = ReadBookmarkContentCategorysResponse{} }
func (m *ReadBookmarkContentCategorysResponse) String() string { return proto.CompactTextString(m) }
func (*ReadBookmarkContentCategorysResponse) ProtoMessage()    {}
func (*ReadBookmarkContentCategorysResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{5}
}

func (m *ReadBookmarkContentCategorysResponse) GetData() *ReadBookmarkContentCategorysResponse_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *ReadBookmarkContentCategorysResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *ReadBookmarkContentCategorysResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type ReadBookmarkContentCategorysResponse_Data struct {
	Categorys []*BookmarkContent `protobuf:"bytes,1,rep,name=categorys" json:"categorys,omitempty"`
}

func (m *ReadBookmarkContentCategorysResponse_Data) Reset() {
	*m = ReadBookmarkContentCategorysResponse_Data{}
}
func (m *ReadBookmarkContentCategorysResponse_Data) String() string { return proto.CompactTextString(m) }
func (*ReadBookmarkContentCategorysResponse_Data) ProtoMessage()    {}
func (*ReadBookmarkContentCategorysResponse_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{5, 0}
}

func (m *ReadBookmarkContentCategorysResponse_Data) GetCategorys() []*BookmarkContent {
	if m != nil {
		return m.Categorys
	}
	return nil
}

type ReadBookmarkByCategoryRequest struct {
	UserId     string `protobuf:"bytes,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	CategoryId string `protobuf:"bytes,2,opt,name=category_id,json=categoryId" json:"category_id,omitempty"`
}

func (m *ReadBookmarkByCategoryRequest) Reset()                    { *m = ReadBookmarkByCategoryRequest{} }
func (m *ReadBookmarkByCategoryRequest) String() string            { return proto.CompactTextString(m) }
func (*ReadBookmarkByCategoryRequest) ProtoMessage()               {}
func (*ReadBookmarkByCategoryRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *ReadBookmarkByCategoryRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *ReadBookmarkByCategoryRequest) GetCategoryId() string {
	if m != nil {
		return m.CategoryId
	}
	return ""
}

type ReadBookmarkByCategoryResponse struct {
	Data    *ReadBookmarkByCategoryResponse_Data `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	Code    int64                                `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Message string                               `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *ReadBookmarkByCategoryResponse) Reset()                    { *m = ReadBookmarkByCategoryResponse{} }
func (m *ReadBookmarkByCategoryResponse) String() string            { return proto.CompactTextString(m) }
func (*ReadBookmarkByCategoryResponse) ProtoMessage()               {}
func (*ReadBookmarkByCategoryResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *ReadBookmarkByCategoryResponse) GetData() *ReadBookmarkByCategoryResponse_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *ReadBookmarkByCategoryResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *ReadBookmarkByCategoryResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type ReadBookmarkByCategoryResponse_Data struct {
	Bookmarks []*BookmarkContent `protobuf:"bytes,1,rep,name=bookmarks" json:"bookmarks,omitempty"`
}

func (m *ReadBookmarkByCategoryResponse_Data) Reset()         { *m = ReadBookmarkByCategoryResponse_Data{} }
func (m *ReadBookmarkByCategoryResponse_Data) String() string { return proto.CompactTextString(m) }
func (*ReadBookmarkByCategoryResponse_Data) ProtoMessage()    {}
func (*ReadBookmarkByCategoryResponse_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{7, 0}
}

func (m *ReadBookmarkByCategoryResponse_Data) GetBookmarks() []*BookmarkContent {
	if m != nil {
		return m.Bookmarks
	}
	return nil
}

type DeleteBookmarkRequest struct {
	BookmarkId string `protobuf:"bytes,1,opt,name=bookmark_id,json=bookmarkId" json:"bookmark_id,omitempty"`
	UserId     string `protobuf:"bytes,2,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	OrgId      string `protobuf:"bytes,3,opt,name=org_id,json=orgId" json:"org_id,omitempty"`
}

func (m *DeleteBookmarkRequest) Reset()                    { *m = DeleteBookmarkRequest{} }
func (m *DeleteBookmarkRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteBookmarkRequest) ProtoMessage()               {}
func (*DeleteBookmarkRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *DeleteBookmarkRequest) GetBookmarkId() string {
	if m != nil {
		return m.BookmarkId
	}
	return ""
}

func (m *DeleteBookmarkRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *DeleteBookmarkRequest) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

type DeleteBookmarkResponse struct {
	Code    int64  `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Message string `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *DeleteBookmarkResponse) Reset()                    { *m = DeleteBookmarkResponse{} }
func (m *DeleteBookmarkResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteBookmarkResponse) ProtoMessage()               {}
func (*DeleteBookmarkResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *DeleteBookmarkResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *DeleteBookmarkResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type GetSharedPlanRequest struct {
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
}

func (m *GetSharedPlanRequest) Reset()                    { *m = GetSharedPlanRequest{} }
func (m *GetSharedPlanRequest) String() string            { return proto.CompactTextString(m) }
func (*GetSharedPlanRequest) ProtoMessage()               {}
func (*GetSharedPlanRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *GetSharedPlanRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

type GetSharedPlanResponse struct {
	Data    *GetSharedPlanResponse_Data `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	Code    int64                       `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Message string                      `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *GetSharedPlanResponse) Reset()                    { *m = GetSharedPlanResponse{} }
func (m *GetSharedPlanResponse) String() string            { return proto.CompactTextString(m) }
func (*GetSharedPlanResponse) ProtoMessage()               {}
func (*GetSharedPlanResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *GetSharedPlanResponse) GetData() *GetSharedPlanResponse_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *GetSharedPlanResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *GetSharedPlanResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type GetSharedPlanResponse_Data struct {
	SharedPlans []*SharedPlan `protobuf:"bytes,1,rep,name=shared_plans,json=sharedPlans" json:"shared_plans,omitempty"`
}

func (m *GetSharedPlanResponse_Data) Reset()                    { *m = GetSharedPlanResponse_Data{} }
func (m *GetSharedPlanResponse_Data) String() string            { return proto.CompactTextString(m) }
func (*GetSharedPlanResponse_Data) ProtoMessage()               {}
func (*GetSharedPlanResponse_Data) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11, 0} }

func (m *GetSharedPlanResponse_Data) GetSharedPlans() []*SharedPlan {
	if m != nil {
		return m.SharedPlans
	}
	return nil
}

type GetSharedSurveyRequest struct {
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
}

func (m *GetSharedSurveyRequest) Reset()                    { *m = GetSharedSurveyRequest{} }
func (m *GetSharedSurveyRequest) String() string            { return proto.CompactTextString(m) }
func (*GetSharedSurveyRequest) ProtoMessage()               {}
func (*GetSharedSurveyRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *GetSharedSurveyRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

type GetSharedSurveyResponse struct {
	Data    *GetSharedSurveyResponse_Data `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	Code    int64                         `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Message string                        `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *GetSharedSurveyResponse) Reset()                    { *m = GetSharedSurveyResponse{} }
func (m *GetSharedSurveyResponse) String() string            { return proto.CompactTextString(m) }
func (*GetSharedSurveyResponse) ProtoMessage()               {}
func (*GetSharedSurveyResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *GetSharedSurveyResponse) GetData() *GetSharedSurveyResponse_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *GetSharedSurveyResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *GetSharedSurveyResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type GetSharedSurveyResponse_Data struct {
	SharedSurveys []*SharedSurvey `protobuf:"bytes,1,rep,name=shared_surveys,json=sharedSurveys" json:"shared_surveys,omitempty"`
}

func (m *GetSharedSurveyResponse_Data) Reset()         { *m = GetSharedSurveyResponse_Data{} }
func (m *GetSharedSurveyResponse_Data) String() string { return proto.CompactTextString(m) }
func (*GetSharedSurveyResponse_Data) ProtoMessage()    {}
func (*GetSharedSurveyResponse_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{13, 0}
}

func (m *GetSharedSurveyResponse_Data) GetSharedSurveys() []*SharedSurvey {
	if m != nil {
		return m.SharedSurveys
	}
	return nil
}

type GetSharedContentRequest struct {
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
}

func (m *GetSharedContentRequest) Reset()                    { *m = GetSharedContentRequest{} }
func (m *GetSharedContentRequest) String() string            { return proto.CompactTextString(m) }
func (*GetSharedContentRequest) ProtoMessage()               {}
func (*GetSharedContentRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *GetSharedContentRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

type GetSharedContentResponse struct {
	Data    *GetSharedContentResponse_Data `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	Code    int64                          `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Message string                         `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *GetSharedContentResponse) Reset()                    { *m = GetSharedContentResponse{} }
func (m *GetSharedContentResponse) String() string            { return proto.CompactTextString(m) }
func (*GetSharedContentResponse) ProtoMessage()               {}
func (*GetSharedContentResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *GetSharedContentResponse) GetData() *GetSharedContentResponse_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *GetSharedContentResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *GetSharedContentResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type GetSharedContentResponse_Data struct {
	SharedContents []*go_micro_srv_content.SharedContent `protobuf:"bytes,1,rep,name=shared_contents,json=sharedContents" json:"shared_contents,omitempty"`
}

func (m *GetSharedContentResponse_Data) Reset()         { *m = GetSharedContentResponse_Data{} }
func (m *GetSharedContentResponse_Data) String() string { return proto.CompactTextString(m) }
func (*GetSharedContentResponse_Data) ProtoMessage()    {}
func (*GetSharedContentResponse_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{15, 0}
}

func (m *GetSharedContentResponse_Data) GetSharedContents() []*go_micro_srv_content.SharedContent {
	if m != nil {
		return m.SharedContents
	}
	return nil
}

type GetSharedGoalRequest struct {
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
}

func (m *GetSharedGoalRequest) Reset()                    { *m = GetSharedGoalRequest{} }
func (m *GetSharedGoalRequest) String() string            { return proto.CompactTextString(m) }
func (*GetSharedGoalRequest) ProtoMessage()               {}
func (*GetSharedGoalRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *GetSharedGoalRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

type GetSharedGoalResponse struct {
	Data    *GetSharedGoalResponse_Data `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	Code    int64                       `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Message string                      `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *GetSharedGoalResponse) Reset()                    { *m = GetSharedGoalResponse{} }
func (m *GetSharedGoalResponse) String() string            { return proto.CompactTextString(m) }
func (*GetSharedGoalResponse) ProtoMessage()               {}
func (*GetSharedGoalResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *GetSharedGoalResponse) GetData() *GetSharedGoalResponse_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *GetSharedGoalResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *GetSharedGoalResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type GetSharedGoalResponse_Data struct {
	SharedGoals []*SharedGoal `protobuf:"bytes,1,rep,name=shared_goals,json=sharedGoals" json:"shared_goals,omitempty"`
}

func (m *GetSharedGoalResponse_Data) Reset()                    { *m = GetSharedGoalResponse_Data{} }
func (m *GetSharedGoalResponse_Data) String() string            { return proto.CompactTextString(m) }
func (*GetSharedGoalResponse_Data) ProtoMessage()               {}
func (*GetSharedGoalResponse_Data) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17, 0} }

func (m *GetSharedGoalResponse_Data) GetSharedGoals() []*SharedGoal {
	if m != nil {
		return m.SharedGoals
	}
	return nil
}

type GetSharedChallengeRequest struct {
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
}

func (m *GetSharedChallengeRequest) Reset()                    { *m = GetSharedChallengeRequest{} }
func (m *GetSharedChallengeRequest) String() string            { return proto.CompactTextString(m) }
func (*GetSharedChallengeRequest) ProtoMessage()               {}
func (*GetSharedChallengeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *GetSharedChallengeRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

type GetSharedChallengeResponse struct {
	Data    *GetSharedChallengeResponse_Data `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	Code    int64                            `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Message string                           `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *GetSharedChallengeResponse) Reset()                    { *m = GetSharedChallengeResponse{} }
func (m *GetSharedChallengeResponse) String() string            { return proto.CompactTextString(m) }
func (*GetSharedChallengeResponse) ProtoMessage()               {}
func (*GetSharedChallengeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *GetSharedChallengeResponse) GetData() *GetSharedChallengeResponse_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *GetSharedChallengeResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *GetSharedChallengeResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type GetSharedChallengeResponse_Data struct {
	SharedChallenges []*SharedChallenge `protobuf:"bytes,1,rep,name=shared_challenges,json=sharedChallenges" json:"shared_challenges,omitempty"`
}

func (m *GetSharedChallengeResponse_Data) Reset()         { *m = GetSharedChallengeResponse_Data{} }
func (m *GetSharedChallengeResponse_Data) String() string { return proto.CompactTextString(m) }
func (*GetSharedChallengeResponse_Data) ProtoMessage()    {}
func (*GetSharedChallengeResponse_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{19, 0}
}

func (m *GetSharedChallengeResponse_Data) GetSharedChallenges() []*SharedChallenge {
	if m != nil {
		return m.SharedChallenges
	}
	return nil
}

type GetSharedHabitRequest struct {
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
}

func (m *GetSharedHabitRequest) Reset()                    { *m = GetSharedHabitRequest{} }
func (m *GetSharedHabitRequest) String() string            { return proto.CompactTextString(m) }
func (*GetSharedHabitRequest) ProtoMessage()               {}
func (*GetSharedHabitRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *GetSharedHabitRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

type GetSharedHabitResponse struct {
	Data    *GetSharedHabitResponse_Data `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	Code    int64                        `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Message string                       `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *GetSharedHabitResponse) Reset()                    { *m = GetSharedHabitResponse{} }
func (m *GetSharedHabitResponse) String() string            { return proto.CompactTextString(m) }
func (*GetSharedHabitResponse) ProtoMessage()               {}
func (*GetSharedHabitResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *GetSharedHabitResponse) GetData() *GetSharedHabitResponse_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *GetSharedHabitResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *GetSharedHabitResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type GetSharedHabitResponse_Data struct {
	SharedHabits []*SharedHabit `protobuf:"bytes,1,rep,name=shared_habits,json=sharedHabits" json:"shared_habits,omitempty"`
}

func (m *GetSharedHabitResponse_Data) Reset()                    { *m = GetSharedHabitResponse_Data{} }
func (m *GetSharedHabitResponse_Data) String() string            { return proto.CompactTextString(m) }
func (*GetSharedHabitResponse_Data) ProtoMessage()               {}
func (*GetSharedHabitResponse_Data) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21, 0} }

func (m *GetSharedHabitResponse_Data) GetSharedHabits() []*SharedHabit {
	if m != nil {
		return m.SharedHabits
	}
	return nil
}

type SignupToGoalRequest struct {
	GoalId string `protobuf:"bytes,1,opt,name=goal_id,json=goalId" json:"goal_id,omitempty"`
	UserId string `protobuf:"bytes,2,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	OrgId  string `protobuf:"bytes,3,opt,name=org_id,json=orgId" json:"org_id,omitempty"`
}

func (m *SignupToGoalRequest) Reset()                    { *m = SignupToGoalRequest{} }
func (m *SignupToGoalRequest) String() string            { return proto.CompactTextString(m) }
func (*SignupToGoalRequest) ProtoMessage()               {}
func (*SignupToGoalRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *SignupToGoalRequest) GetGoalId() string {
	if m != nil {
		return m.GoalId
	}
	return ""
}

func (m *SignupToGoalRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *SignupToGoalRequest) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

type SignupToGoalResponse struct {
	Data    *SignupToGoalResponse_Data `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	Code    int64                      `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Message string                     `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *SignupToGoalResponse) Reset()                    { *m = SignupToGoalResponse{} }
func (m *SignupToGoalResponse) String() string            { return proto.CompactTextString(m) }
func (*SignupToGoalResponse) ProtoMessage()               {}
func (*SignupToGoalResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *SignupToGoalResponse) GetData() *SignupToGoalResponse_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *SignupToGoalResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *SignupToGoalResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type SignupToGoalResponse_Data struct {
	JoinGoal *JoinGoal `protobuf:"bytes,1,opt,name=join_goal,json=joinGoal" json:"join_goal,omitempty"`
	Count    int64     `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
}

func (m *SignupToGoalResponse_Data) Reset()                    { *m = SignupToGoalResponse_Data{} }
func (m *SignupToGoalResponse_Data) String() string            { return proto.CompactTextString(m) }
func (*SignupToGoalResponse_Data) ProtoMessage()               {}
func (*SignupToGoalResponse_Data) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23, 0} }

func (m *SignupToGoalResponse_Data) GetJoinGoal() *JoinGoal {
	if m != nil {
		return m.JoinGoal
	}
	return nil
}

func (m *SignupToGoalResponse_Data) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

type ListGoalRequest struct {
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
}

func (m *ListGoalRequest) Reset()                    { *m = ListGoalRequest{} }
func (m *ListGoalRequest) String() string            { return proto.CompactTextString(m) }
func (*ListGoalRequest) ProtoMessage()               {}
func (*ListGoalRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *ListGoalRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

type ListGoalResponse struct {
	Data    *ListGoalResponse_Data `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	Code    int64                  `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Message string                 `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *ListGoalResponse) Reset()                    { *m = ListGoalResponse{} }
func (m *ListGoalResponse) String() string            { return proto.CompactTextString(m) }
func (*ListGoalResponse) ProtoMessage()               {}
func (*ListGoalResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *ListGoalResponse) GetData() *ListGoalResponse_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *ListGoalResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *ListGoalResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type ListGoalResponse_Data struct {
	Response []*JoinGoalResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *ListGoalResponse_Data) Reset()                    { *m = ListGoalResponse_Data{} }
func (m *ListGoalResponse_Data) String() string            { return proto.CompactTextString(m) }
func (*ListGoalResponse_Data) ProtoMessage()               {}
func (*ListGoalResponse_Data) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25, 0} }

func (m *ListGoalResponse_Data) GetResponse() []*JoinGoalResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

type SignupToChallengeRequest struct {
	ChallengeId string `protobuf:"bytes,1,opt,name=challenge_id,json=challengeId" json:"challenge_id,omitempty"`
	UserId      string `protobuf:"bytes,2,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	OrgId       string `protobuf:"bytes,3,opt,name=org_id,json=orgId" json:"org_id,omitempty"`
}

func (m *SignupToChallengeRequest) Reset()                    { *m = SignupToChallengeRequest{} }
func (m *SignupToChallengeRequest) String() string            { return proto.CompactTextString(m) }
func (*SignupToChallengeRequest) ProtoMessage()               {}
func (*SignupToChallengeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *SignupToChallengeRequest) GetChallengeId() string {
	if m != nil {
		return m.ChallengeId
	}
	return ""
}

func (m *SignupToChallengeRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *SignupToChallengeRequest) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

type SignupToChallengeResponse struct {
	Data    *SignupToChallengeResponse_Data `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	Code    int64                           `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Message string                          `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *SignupToChallengeResponse) Reset()                    { *m = SignupToChallengeResponse{} }
func (m *SignupToChallengeResponse) String() string            { return proto.CompactTextString(m) }
func (*SignupToChallengeResponse) ProtoMessage()               {}
func (*SignupToChallengeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *SignupToChallengeResponse) GetData() *SignupToChallengeResponse_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *SignupToChallengeResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *SignupToChallengeResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type SignupToChallengeResponse_Data struct {
	JoinChallenge *JoinChallenge `protobuf:"bytes,1,opt,name=join_challenge,json=joinChallenge" json:"join_challenge,omitempty"`
	Count         int64          `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
}

func (m *SignupToChallengeResponse_Data) Reset()         { *m = SignupToChallengeResponse_Data{} }
func (m *SignupToChallengeResponse_Data) String() string { return proto.CompactTextString(m) }
func (*SignupToChallengeResponse_Data) ProtoMessage()    {}
func (*SignupToChallengeResponse_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{27, 0}
}

func (m *SignupToChallengeResponse_Data) GetJoinChallenge() *JoinChallenge {
	if m != nil {
		return m.JoinChallenge
	}
	return nil
}

func (m *SignupToChallengeResponse_Data) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

type ListChallengeRequest struct {
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
}

func (m *ListChallengeRequest) Reset()                    { *m = ListChallengeRequest{} }
func (m *ListChallengeRequest) String() string            { return proto.CompactTextString(m) }
func (*ListChallengeRequest) ProtoMessage()               {}
func (*ListChallengeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func (m *ListChallengeRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

type ListChallengeResponse struct {
	Data    *ListChallengeResponse_Data `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	Code    int64                       `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Message string                      `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *ListChallengeResponse) Reset()                    { *m = ListChallengeResponse{} }
func (m *ListChallengeResponse) String() string            { return proto.CompactTextString(m) }
func (*ListChallengeResponse) ProtoMessage()               {}
func (*ListChallengeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

func (m *ListChallengeResponse) GetData() *ListChallengeResponse_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *ListChallengeResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *ListChallengeResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type ListChallengeResponse_Data struct {
	Response []*JoinChallengeResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *ListChallengeResponse_Data) Reset()                    { *m = ListChallengeResponse_Data{} }
func (m *ListChallengeResponse_Data) String() string            { return proto.CompactTextString(m) }
func (*ListChallengeResponse_Data) ProtoMessage()               {}
func (*ListChallengeResponse_Data) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29, 0} }

func (m *ListChallengeResponse_Data) GetResponse() []*JoinChallengeResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

type SignupToHabitRequest struct {
	HabitId string `protobuf:"bytes,1,opt,name=habit_id,json=habitId" json:"habit_id,omitempty"`
	UserId  string `protobuf:"bytes,2,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	OrgId   string `protobuf:"bytes,3,opt,name=org_id,json=orgId" json:"org_id,omitempty"`
}

func (m *SignupToHabitRequest) Reset()                    { *m = SignupToHabitRequest{} }
func (m *SignupToHabitRequest) String() string            { return proto.CompactTextString(m) }
func (*SignupToHabitRequest) ProtoMessage()               {}
func (*SignupToHabitRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30} }

func (m *SignupToHabitRequest) GetHabitId() string {
	if m != nil {
		return m.HabitId
	}
	return ""
}

func (m *SignupToHabitRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *SignupToHabitRequest) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

type SignupToHabitResponse struct {
	Data    *SignupToHabitResponse_Data `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	Code    int64                       `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Message string                      `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *SignupToHabitResponse) Reset()                    { *m = SignupToHabitResponse{} }
func (m *SignupToHabitResponse) String() string            { return proto.CompactTextString(m) }
func (*SignupToHabitResponse) ProtoMessage()               {}
func (*SignupToHabitResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{31} }

func (m *SignupToHabitResponse) GetData() *SignupToHabitResponse_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *SignupToHabitResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *SignupToHabitResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type SignupToHabitResponse_Data struct {
	JoinHabit *JoinHabit `protobuf:"bytes,1,opt,name=join_habit,json=joinHabit" json:"join_habit,omitempty"`
	Count     int64      `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
}

func (m *SignupToHabitResponse_Data) Reset()                    { *m = SignupToHabitResponse_Data{} }
func (m *SignupToHabitResponse_Data) String() string            { return proto.CompactTextString(m) }
func (*SignupToHabitResponse_Data) ProtoMessage()               {}
func (*SignupToHabitResponse_Data) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{31, 0} }

func (m *SignupToHabitResponse_Data) GetJoinHabit() *JoinHabit {
	if m != nil {
		return m.JoinHabit
	}
	return nil
}

func (m *SignupToHabitResponse_Data) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

type ListHabitRequest struct {
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
}

func (m *ListHabitRequest) Reset()                    { *m = ListHabitRequest{} }
func (m *ListHabitRequest) String() string            { return proto.CompactTextString(m) }
func (*ListHabitRequest) ProtoMessage()               {}
func (*ListHabitRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{32} }

func (m *ListHabitRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

type ListHabitResponse struct {
	Data    *ListHabitResponse_Data `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	Code    int64                   `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Message string                  `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *ListHabitResponse) Reset()                    { *m = ListHabitResponse{} }
func (m *ListHabitResponse) String() string            { return proto.CompactTextString(m) }
func (*ListHabitResponse) ProtoMessage()               {}
func (*ListHabitResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{33} }

func (m *ListHabitResponse) GetData() *ListHabitResponse_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *ListHabitResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *ListHabitResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type ListHabitResponse_Data struct {
	Response []*JoinHabitResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *ListHabitResponse_Data) Reset()                    { *m = ListHabitResponse_Data{} }
func (m *ListHabitResponse_Data) String() string            { return proto.CompactTextString(m) }
func (*ListHabitResponse_Data) ProtoMessage()               {}
func (*ListHabitResponse_Data) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{33, 0} }

func (m *ListHabitResponse_Data) GetResponse() []*JoinHabitResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

type ListMarkersRequest struct {
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
}

func (m *ListMarkersRequest) Reset()                    { *m = ListMarkersRequest{} }
func (m *ListMarkersRequest) String() string            { return proto.CompactTextString(m) }
func (*ListMarkersRequest) ProtoMessage()               {}
func (*ListMarkersRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{34} }

func (m *ListMarkersRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

type ListMarkersResponse struct {
	Data    *ListMarkersResponse_Data `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	Code    int64                     `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Message string                    `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *ListMarkersResponse) Reset()                    { *m = ListMarkersResponse{} }
func (m *ListMarkersResponse) String() string            { return proto.CompactTextString(m) }
func (*ListMarkersResponse) ProtoMessage()               {}
func (*ListMarkersResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{35} }

func (m *ListMarkersResponse) GetData() *ListMarkersResponse_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *ListMarkersResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *ListMarkersResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type ListMarkersResponse_Data struct {
	Markers []*MarkerResponse `protobuf:"bytes,1,rep,name=markers" json:"markers,omitempty"`
}

func (m *ListMarkersResponse_Data) Reset()                    { *m = ListMarkersResponse_Data{} }
func (m *ListMarkersResponse_Data) String() string            { return proto.CompactTextString(m) }
func (*ListMarkersResponse_Data) ProtoMessage()               {}
func (*ListMarkersResponse_Data) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{35, 0} }

func (m *ListMarkersResponse_Data) GetMarkers() []*MarkerResponse {
	if m != nil {
		return m.Markers
	}
	return nil
}

type GetPendingSharedActionsRequest struct {
	UserId        string `protobuf:"bytes,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	OrgId         string `protobuf:"bytes,2,opt,name=org_id,json=orgId" json:"org_id,omitempty"`
	Offset        int64  `protobuf:"varint,3,opt,name=offset" json:"offset,omitempty"`
	Limit         int64  `protobuf:"varint,4,opt,name=limit" json:"limit,omitempty"`
	From          int64  `protobuf:"varint,5,opt,name=from" json:"from,omitempty"`
	To            int64  `protobuf:"varint,6,opt,name=to" json:"to,omitempty"`
	SortParameter string `protobuf:"bytes,7,opt,name=sort_parameter,json=sortParameter" json:"sort_parameter,omitempty"`
	SortDirection string `protobuf:"bytes,8,opt,name=sort_direction,json=sortDirection" json:"sort_direction,omitempty"`
}

func (m *GetPendingSharedActionsRequest) Reset()                    { *m = GetPendingSharedActionsRequest{} }
func (m *GetPendingSharedActionsRequest) String() string            { return proto.CompactTextString(m) }
func (*GetPendingSharedActionsRequest) ProtoMessage()               {}
func (*GetPendingSharedActionsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{36} }

func (m *GetPendingSharedActionsRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *GetPendingSharedActionsRequest) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *GetPendingSharedActionsRequest) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *GetPendingSharedActionsRequest) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *GetPendingSharedActionsRequest) GetFrom() int64 {
	if m != nil {
		return m.From
	}
	return 0
}

func (m *GetPendingSharedActionsRequest) GetTo() int64 {
	if m != nil {
		return m.To
	}
	return 0
}

func (m *GetPendingSharedActionsRequest) GetSortParameter() string {
	if m != nil {
		return m.SortParameter
	}
	return ""
}

func (m *GetPendingSharedActionsRequest) GetSortDirection() string {
	if m != nil {
		return m.SortDirection
	}
	return ""
}

type GetPendingSharedActionsResponse struct {
	Data    *GetPendingSharedActionsResponse_Data `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	Code    int64                                 `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Message string                                `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *GetPendingSharedActionsResponse) Reset()         { *m = GetPendingSharedActionsResponse{} }
func (m *GetPendingSharedActionsResponse) String() string { return proto.CompactTextString(m) }
func (*GetPendingSharedActionsResponse) ProtoMessage()    {}
func (*GetPendingSharedActionsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{37}
}

func (m *GetPendingSharedActionsResponse) GetData() *GetPendingSharedActionsResponse_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *GetPendingSharedActionsResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *GetPendingSharedActionsResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type GetPendingSharedActionsResponse_Data struct {
	Pendings []*go_micro_srv_static2.PendingResponse `protobuf:"bytes,1,rep,name=pendings" json:"pendings,omitempty"`
}

func (m *GetPendingSharedActionsResponse_Data) Reset()         { *m = GetPendingSharedActionsResponse_Data{} }
func (m *GetPendingSharedActionsResponse_Data) String() string { return proto.CompactTextString(m) }
func (*GetPendingSharedActionsResponse_Data) ProtoMessage()    {}
func (*GetPendingSharedActionsResponse_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{37, 0}
}

func (m *GetPendingSharedActionsResponse_Data) GetPendings() []*go_micro_srv_static2.PendingResponse {
	if m != nil {
		return m.Pendings
	}
	return nil
}

type GetGoalProgressRequest struct {
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
}

func (m *GetGoalProgressRequest) Reset()                    { *m = GetGoalProgressRequest{} }
func (m *GetGoalProgressRequest) String() string            { return proto.CompactTextString(m) }
func (*GetGoalProgressRequest) ProtoMessage()               {}
func (*GetGoalProgressRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{38} }

func (m *GetGoalProgressRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

type GetGoalProgressResponse struct {
	Data    *GetGoalProgressResponse_Data `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	Code    int64                         `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Message string                        `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *GetGoalProgressResponse) Reset()                    { *m = GetGoalProgressResponse{} }
func (m *GetGoalProgressResponse) String() string            { return proto.CompactTextString(m) }
func (*GetGoalProgressResponse) ProtoMessage()               {}
func (*GetGoalProgressResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{39} }

func (m *GetGoalProgressResponse) GetData() *GetGoalProgressResponse_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *GetGoalProgressResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *GetGoalProgressResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type GetGoalProgressResponse_Data struct {
	Response []*GoalProgressResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *GetGoalProgressResponse_Data) Reset()         { *m = GetGoalProgressResponse_Data{} }
func (m *GetGoalProgressResponse_Data) String() string { return proto.CompactTextString(m) }
func (*GetGoalProgressResponse_Data) ProtoMessage()    {}
func (*GetGoalProgressResponse_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{39, 0}
}

func (m *GetGoalProgressResponse_Data) GetResponse() []*GoalProgressResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

type GetCurrentChallengesWithCountRequest struct {
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
}

func (m *GetCurrentChallengesWithCountRequest) Reset()         { *m = GetCurrentChallengesWithCountRequest{} }
func (m *GetCurrentChallengesWithCountRequest) String() string { return proto.CompactTextString(m) }
func (*GetCurrentChallengesWithCountRequest) ProtoMessage()    {}
func (*GetCurrentChallengesWithCountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{40}
}

func (m *GetCurrentChallengesWithCountRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

type GetCurrentChallengesWithCountResponse struct {
	Data    *GetCurrentChallengesWithCountResponse_Data `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	Code    int64                                       `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Message string                                      `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *GetCurrentChallengesWithCountResponse) Reset()         { *m = GetCurrentChallengesWithCountResponse{} }
func (m *GetCurrentChallengesWithCountResponse) String() string { return proto.CompactTextString(m) }
func (*GetCurrentChallengesWithCountResponse) ProtoMessage()    {}
func (*GetCurrentChallengesWithCountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{41}
}

func (m *GetCurrentChallengesWithCountResponse) GetData() *GetCurrentChallengesWithCountResponse_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *GetCurrentChallengesWithCountResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *GetCurrentChallengesWithCountResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type GetCurrentChallengesWithCountResponse_Data struct {
	Response []*ChallengeCountResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *GetCurrentChallengesWithCountResponse_Data) Reset() {
	*m = GetCurrentChallengesWithCountResponse_Data{}
}
func (m *GetCurrentChallengesWithCountResponse_Data) String() string {
	return proto.CompactTextString(m)
}
func (*GetCurrentChallengesWithCountResponse_Data) ProtoMessage() {}
func (*GetCurrentChallengesWithCountResponse_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{41, 0}
}

func (m *GetCurrentChallengesWithCountResponse_Data) GetResponse() []*ChallengeCountResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

type GetCurrentHabitsWithCountRequest struct {
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
}

func (m *GetCurrentHabitsWithCountRequest) Reset()         { *m = GetCurrentHabitsWithCountRequest{} }
func (m *GetCurrentHabitsWithCountRequest) String() string { return proto.CompactTextString(m) }
func (*GetCurrentHabitsWithCountRequest) ProtoMessage()    {}
func (*GetCurrentHabitsWithCountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{42}
}

func (m *GetCurrentHabitsWithCountRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

type GetCurrentHabitsWithCountResponse struct {
	Data    *GetCurrentHabitsWithCountResponse_Data `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	Code    int64                                   `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Message string                                  `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *GetCurrentHabitsWithCountResponse) Reset()         { *m = GetCurrentHabitsWithCountResponse{} }
func (m *GetCurrentHabitsWithCountResponse) String() string { return proto.CompactTextString(m) }
func (*GetCurrentHabitsWithCountResponse) ProtoMessage()    {}
func (*GetCurrentHabitsWithCountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{43}
}

func (m *GetCurrentHabitsWithCountResponse) GetData() *GetCurrentHabitsWithCountResponse_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *GetCurrentHabitsWithCountResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *GetCurrentHabitsWithCountResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type GetCurrentHabitsWithCountResponse_Data struct {
	Response []*HabitCountResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *GetCurrentHabitsWithCountResponse_Data) Reset() {
	*m = GetCurrentHabitsWithCountResponse_Data{}
}
func (m *GetCurrentHabitsWithCountResponse_Data) String() string { return proto.CompactTextString(m) }
func (*GetCurrentHabitsWithCountResponse_Data) ProtoMessage()    {}
func (*GetCurrentHabitsWithCountResponse_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{43, 0}
}

func (m *GetCurrentHabitsWithCountResponse_Data) GetResponse() []*HabitCountResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

type SaveRateForContentRequest struct {
	UserId    string `protobuf:"bytes,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	OrgId     string `protobuf:"bytes,2,opt,name=org_id,json=orgId" json:"org_id,omitempty"`
	ContentId string `protobuf:"bytes,3,opt,name=content_id,json=contentId" json:"content_id,omitempty"`
	Rating    int64  `protobuf:"varint,4,opt,name=rating" json:"rating,omitempty"`
}

func (m *SaveRateForContentRequest) Reset()                    { *m = SaveRateForContentRequest{} }
func (m *SaveRateForContentRequest) String() string            { return proto.CompactTextString(m) }
func (*SaveRateForContentRequest) ProtoMessage()               {}
func (*SaveRateForContentRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{44} }

func (m *SaveRateForContentRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *SaveRateForContentRequest) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *SaveRateForContentRequest) GetContentId() string {
	if m != nil {
		return m.ContentId
	}
	return ""
}

func (m *SaveRateForContentRequest) GetRating() int64 {
	if m != nil {
		return m.Rating
	}
	return 0
}

type SaveRateForContentResponse struct {
	Data    *SaveRateForContentResponse_Data `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	Code    int64                            `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Message string                           `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *SaveRateForContentResponse) Reset()                    { *m = SaveRateForContentResponse{} }
func (m *SaveRateForContentResponse) String() string            { return proto.CompactTextString(m) }
func (*SaveRateForContentResponse) ProtoMessage()               {}
func (*SaveRateForContentResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{45} }

func (m *SaveRateForContentResponse) GetData() *SaveRateForContentResponse_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *SaveRateForContentResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *SaveRateForContentResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type SaveRateForContentResponse_Data struct {
	ContentRating *ContentRating `protobuf:"bytes,1,opt,name=content_rating,json=contentRating" json:"content_rating,omitempty"`
}

func (m *SaveRateForContentResponse_Data) Reset()         { *m = SaveRateForContentResponse_Data{} }
func (m *SaveRateForContentResponse_Data) String() string { return proto.CompactTextString(m) }
func (*SaveRateForContentResponse_Data) ProtoMessage()    {}
func (*SaveRateForContentResponse_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{45, 0}
}

func (m *SaveRateForContentResponse_Data) GetContentRating() *ContentRating {
	if m != nil {
		return m.ContentRating
	}
	return nil
}

type DislikeForContentRequest struct {
	UserId    string `protobuf:"bytes,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	OrgId     string `protobuf:"bytes,2,opt,name=org_id,json=orgId" json:"org_id,omitempty"`
	ContentId string `protobuf:"bytes,3,opt,name=content_id,json=contentId" json:"content_id,omitempty"`
}

func (m *DislikeForContentRequest) Reset()                    { *m = DislikeForContentRequest{} }
func (m *DislikeForContentRequest) String() string            { return proto.CompactTextString(m) }
func (*DislikeForContentRequest) ProtoMessage()               {}
func (*DislikeForContentRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{46} }

func (m *DislikeForContentRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *DislikeForContentRequest) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *DislikeForContentRequest) GetContentId() string {
	if m != nil {
		return m.ContentId
	}
	return ""
}

type DislikeForContentResponse struct {
	Data    *DislikeForContentResponse_Data `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	Code    int64                           `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Message string                          `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *DislikeForContentResponse) Reset()                    { *m = DislikeForContentResponse{} }
func (m *DislikeForContentResponse) String() string            { return proto.CompactTextString(m) }
func (*DislikeForContentResponse) ProtoMessage()               {}
func (*DislikeForContentResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{47} }

func (m *DislikeForContentResponse) GetData() *DislikeForContentResponse_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *DislikeForContentResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *DislikeForContentResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type DislikeForContentResponse_Data struct {
	ContentDislike *ContentDislike `protobuf:"bytes,1,opt,name=content_dislike,json=contentDislike" json:"content_dislike,omitempty"`
}

func (m *DislikeForContentResponse_Data) Reset()         { *m = DislikeForContentResponse_Data{} }
func (m *DislikeForContentResponse_Data) String() string { return proto.CompactTextString(m) }
func (*DislikeForContentResponse_Data) ProtoMessage()    {}
func (*DislikeForContentResponse_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{47, 0}
}

func (m *DislikeForContentResponse_Data) GetContentDislike() *ContentDislike {
	if m != nil {
		return m.ContentDislike
	}
	return nil
}

type DislikeForSimilarContentRequest struct {
	UserId    string                                     `protobuf:"bytes,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	OrgId     string                                     `protobuf:"bytes,2,opt,name=org_id,json=orgId" json:"org_id,omitempty"`
	ContentId string                                     `protobuf:"bytes,3,opt,name=content_id,json=contentId" json:"content_id,omitempty"`
	Tags      []*go_micro_srv_static.ContentCategoryItem `protobuf:"bytes,4,rep,name=tags" json:"tags,omitempty"`
}

func (m *DislikeForSimilarContentRequest) Reset()         { *m = DislikeForSimilarContentRequest{} }
func (m *DislikeForSimilarContentRequest) String() string { return proto.CompactTextString(m) }
func (*DislikeForSimilarContentRequest) ProtoMessage()    {}
func (*DislikeForSimilarContentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{48}
}

func (m *DislikeForSimilarContentRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *DislikeForSimilarContentRequest) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *DislikeForSimilarContentRequest) GetContentId() string {
	if m != nil {
		return m.ContentId
	}
	return ""
}

func (m *DislikeForSimilarContentRequest) GetTags() []*go_micro_srv_static.ContentCategoryItem {
	if m != nil {
		return m.Tags
	}
	return nil
}

type DislikeForSimilarContentResponse struct {
	Data    *DislikeForSimilarContentResponse_Data `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	Code    int64                                  `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Message string                                 `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *DislikeForSimilarContentResponse) Reset()         { *m = DislikeForSimilarContentResponse{} }
func (m *DislikeForSimilarContentResponse) String() string { return proto.CompactTextString(m) }
func (*DislikeForSimilarContentResponse) ProtoMessage()    {}
func (*DislikeForSimilarContentResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{49}
}

func (m *DislikeForSimilarContentResponse) GetData() *DislikeForSimilarContentResponse_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *DislikeForSimilarContentResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *DislikeForSimilarContentResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type DislikeForSimilarContentResponse_Data struct {
	ContentDislikeSimilar *ContentDislikeSimilar `protobuf:"bytes,1,opt,name=content_dislike_similar,json=contentDislikeSimilar" json:"content_dislike_similar,omitempty"`
}

func (m *DislikeForSimilarContentResponse_Data) Reset()         { *m = DislikeForSimilarContentResponse_Data{} }
func (m *DislikeForSimilarContentResponse_Data) String() string { return proto.CompactTextString(m) }
func (*DislikeForSimilarContentResponse_Data) ProtoMessage()    {}
func (*DislikeForSimilarContentResponse_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{49, 0}
}

func (m *DislikeForSimilarContentResponse_Data) GetContentDislikeSimilar() *ContentDislikeSimilar {
	if m != nil {
		return m.ContentDislikeSimilar
	}
	return nil
}

type SaveUserDetailsRequest struct {
	Firstname string                     `protobuf:"bytes,1,opt,name=firstname" json:"firstname,omitempty"`
	Lastname  string                     `protobuf:"bytes,2,opt,name=lastname" json:"lastname,omitempty"`
	AvatarUrl string                     `protobuf:"bytes,3,opt,name=avatar_url,json=avatarUrl" json:"avatar_url,omitempty"`
	Gender    go_micro_srv_static.Gender `protobuf:"varint,4,opt,name=gender,enum=go.micro.srv.static.Gender" json:"gender,omitempty"`
	Dob       int64                      `protobuf:"varint,5,opt,name=dob" json:"dob,omitempty"`
	UserId    string                     `protobuf:"bytes,6,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	OrgId     string                     `protobuf:"bytes,7,opt,name=org_id,json=orgId" json:"org_id,omitempty"`
}

func (m *SaveUserDetailsRequest) Reset()                    { *m = SaveUserDetailsRequest{} }
func (m *SaveUserDetailsRequest) String() string            { return proto.CompactTextString(m) }
func (*SaveUserDetailsRequest) ProtoMessage()               {}
func (*SaveUserDetailsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{50} }

func (m *SaveUserDetailsRequest) GetFirstname() string {
	if m != nil {
		return m.Firstname
	}
	return ""
}

func (m *SaveUserDetailsRequest) GetLastname() string {
	if m != nil {
		return m.Lastname
	}
	return ""
}

func (m *SaveUserDetailsRequest) GetAvatarUrl() string {
	if m != nil {
		return m.AvatarUrl
	}
	return ""
}

func (m *SaveUserDetailsRequest) GetGender() go_micro_srv_static.Gender {
	if m != nil {
		return m.Gender
	}
	return go_micro_srv_static.Gender_Gender_NONE
}

func (m *SaveUserDetailsRequest) GetDob() int64 {
	if m != nil {
		return m.Dob
	}
	return 0
}

func (m *SaveUserDetailsRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *SaveUserDetailsRequest) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

type SaveUserDetailsResponse struct {
	Data    *SaveUserDetailsResponse_Data `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	Code    int64                         `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Message string                        `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *SaveUserDetailsResponse) Reset()                    { *m = SaveUserDetailsResponse{} }
func (m *SaveUserDetailsResponse) String() string            { return proto.CompactTextString(m) }
func (*SaveUserDetailsResponse) ProtoMessage()               {}
func (*SaveUserDetailsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{51} }

func (m *SaveUserDetailsResponse) GetData() *SaveUserDetailsResponse_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *SaveUserDetailsResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *SaveUserDetailsResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type SaveUserDetailsResponse_Data struct {
	Firstname string                     `protobuf:"bytes,1,opt,name=firstname" json:"firstname,omitempty"`
	Lastname  string                     `protobuf:"bytes,2,opt,name=lastname" json:"lastname,omitempty"`
	AvatarUrl string                     `protobuf:"bytes,3,opt,name=avatar_url,json=avatarUrl" json:"avatar_url,omitempty"`
	Gender    go_micro_srv_static.Gender `protobuf:"varint,4,opt,name=gender,enum=go.micro.srv.static.Gender" json:"gender,omitempty"`
	Dob       int64                      `protobuf:"varint,5,opt,name=dob" json:"dob,omitempty"`
}

func (m *SaveUserDetailsResponse_Data) Reset()         { *m = SaveUserDetailsResponse_Data{} }
func (m *SaveUserDetailsResponse_Data) String() string { return proto.CompactTextString(m) }
func (*SaveUserDetailsResponse_Data) ProtoMessage()    {}
func (*SaveUserDetailsResponse_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{51, 0}
}

func (m *SaveUserDetailsResponse_Data) GetFirstname() string {
	if m != nil {
		return m.Firstname
	}
	return ""
}

func (m *SaveUserDetailsResponse_Data) GetLastname() string {
	if m != nil {
		return m.Lastname
	}
	return ""
}

func (m *SaveUserDetailsResponse_Data) GetAvatarUrl() string {
	if m != nil {
		return m.AvatarUrl
	}
	return ""
}

func (m *SaveUserDetailsResponse_Data) GetGender() go_micro_srv_static.Gender {
	if m != nil {
		return m.Gender
	}
	return go_micro_srv_static.Gender_Gender_NONE
}

func (m *SaveUserDetailsResponse_Data) GetDob() int64 {
	if m != nil {
		return m.Dob
	}
	return 0
}

type SaveUserFeedbackRequest struct {
	Feedback string `protobuf:"bytes,1,opt,name=feedback" json:"feedback,omitempty"`
	Rating   int64  `protobuf:"varint,2,opt,name=rating" json:"rating,omitempty"`
	UserId   string `protobuf:"bytes,3,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	OrgId    string `protobuf:"bytes,4,opt,name=org_id,json=orgId" json:"org_id,omitempty"`
}

func (m *SaveUserFeedbackRequest) Reset()                    { *m = SaveUserFeedbackRequest{} }
func (m *SaveUserFeedbackRequest) String() string            { return proto.CompactTextString(m) }
func (*SaveUserFeedbackRequest) ProtoMessage()               {}
func (*SaveUserFeedbackRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{52} }

func (m *SaveUserFeedbackRequest) GetFeedback() string {
	if m != nil {
		return m.Feedback
	}
	return ""
}

func (m *SaveUserFeedbackRequest) GetRating() int64 {
	if m != nil {
		return m.Rating
	}
	return 0
}

func (m *SaveUserFeedbackRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *SaveUserFeedbackRequest) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

type SaveUserFeedbackResponse struct {
	Data    *SaveUserFeedbackResponse_Data `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	Code    int64                          `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Message string                         `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *SaveUserFeedbackResponse) Reset()                    { *m = SaveUserFeedbackResponse{} }
func (m *SaveUserFeedbackResponse) String() string            { return proto.CompactTextString(m) }
func (*SaveUserFeedbackResponse) ProtoMessage()               {}
func (*SaveUserFeedbackResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{53} }

func (m *SaveUserFeedbackResponse) GetData() *SaveUserFeedbackResponse_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *SaveUserFeedbackResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *SaveUserFeedbackResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type SaveUserFeedbackResponse_Data struct {
	Feedback *go_micro_srv_user.UserFeedback `protobuf:"bytes,1,opt,name=feedback" json:"feedback,omitempty"`
}

func (m *SaveUserFeedbackResponse_Data) Reset()         { *m = SaveUserFeedbackResponse_Data{} }
func (m *SaveUserFeedbackResponse_Data) String() string { return proto.CompactTextString(m) }
func (*SaveUserFeedbackResponse_Data) ProtoMessage()    {}
func (*SaveUserFeedbackResponse_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{53, 0}
}

func (m *SaveUserFeedbackResponse_Data) GetFeedback() *go_micro_srv_user.UserFeedback {
	if m != nil {
		return m.Feedback
	}
	return nil
}

type JoinUserPlanRequest struct {
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	PlanId string `protobuf:"bytes,2,opt,name=plan_id,json=planId" json:"plan_id,omitempty"`
	OrgId  string `protobuf:"bytes,3,opt,name=org_id,json=orgId" json:"org_id,omitempty"`
}

func (m *JoinUserPlanRequest) Reset()                    { *m = JoinUserPlanRequest{} }
func (m *JoinUserPlanRequest) String() string            { return proto.CompactTextString(m) }
func (*JoinUserPlanRequest) ProtoMessage()               {}
func (*JoinUserPlanRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{54} }

func (m *JoinUserPlanRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *JoinUserPlanRequest) GetPlanId() string {
	if m != nil {
		return m.PlanId
	}
	return ""
}

func (m *JoinUserPlanRequest) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

type JoinUserPlanResponse struct {
	Data    *JoinUserPlanResponse_Data `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	Code    int64                      `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Message string                     `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *JoinUserPlanResponse) Reset()                    { *m = JoinUserPlanResponse{} }
func (m *JoinUserPlanResponse) String() string            { return proto.CompactTextString(m) }
func (*JoinUserPlanResponse) ProtoMessage()               {}
func (*JoinUserPlanResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{55} }

func (m *JoinUserPlanResponse) GetData() *JoinUserPlanResponse_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *JoinUserPlanResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *JoinUserPlanResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type JoinUserPlanResponse_Data struct {
	UserPlan *UserPlan `protobuf:"bytes,1,opt,name=user_plan,json=userPlan" json:"user_plan,omitempty"`
}

func (m *JoinUserPlanResponse_Data) Reset()                    { *m = JoinUserPlanResponse_Data{} }
func (m *JoinUserPlanResponse_Data) String() string            { return proto.CompactTextString(m) }
func (*JoinUserPlanResponse_Data) ProtoMessage()               {}
func (*JoinUserPlanResponse_Data) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{55, 0} }

func (m *JoinUserPlanResponse_Data) GetUserPlan() *UserPlan {
	if m != nil {
		return m.UserPlan
	}
	return nil
}

type CreateUserPlanRequest struct {
	UserId      string `protobuf:"bytes,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	GoalId      string `protobuf:"bytes,2,opt,name=goal_id,json=goalId" json:"goal_id,omitempty"`
	Days        int64  `protobuf:"varint,3,opt,name=days" json:"days,omitempty"`
	ItemsPerDay int64  `protobuf:"varint,4,opt,name=itemsPerDay" json:"itemsPerDay,omitempty"`
}

func (m *CreateUserPlanRequest) Reset()                    { *m = CreateUserPlanRequest{} }
func (m *CreateUserPlanRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateUserPlanRequest) ProtoMessage()               {}
func (*CreateUserPlanRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{56} }

func (m *CreateUserPlanRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *CreateUserPlanRequest) GetGoalId() string {
	if m != nil {
		return m.GoalId
	}
	return ""
}

func (m *CreateUserPlanRequest) GetDays() int64 {
	if m != nil {
		return m.Days
	}
	return 0
}

func (m *CreateUserPlanRequest) GetItemsPerDay() int64 {
	if m != nil {
		return m.ItemsPerDay
	}
	return 0
}

type CreateUserPlanResponse struct {
	Data    *CreateUserPlanResponse_Data `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	Code    int64                        `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Message string                       `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *CreateUserPlanResponse) Reset()                    { *m = CreateUserPlanResponse{} }
func (m *CreateUserPlanResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateUserPlanResponse) ProtoMessage()               {}
func (*CreateUserPlanResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{57} }

func (m *CreateUserPlanResponse) GetData() *CreateUserPlanResponse_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *CreateUserPlanResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *CreateUserPlanResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type CreateUserPlanResponse_Data struct {
	UserPlan *UserPlan `protobuf:"bytes,1,opt,name=user_plan,json=userPlan" json:"user_plan,omitempty"`
}

func (m *CreateUserPlanResponse_Data) Reset()                    { *m = CreateUserPlanResponse_Data{} }
func (m *CreateUserPlanResponse_Data) String() string            { return proto.CompactTextString(m) }
func (*CreateUserPlanResponse_Data) ProtoMessage()               {}
func (*CreateUserPlanResponse_Data) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{57, 0} }

func (m *CreateUserPlanResponse_Data) GetUserPlan() *UserPlan {
	if m != nil {
		return m.UserPlan
	}
	return nil
}

type GetUserPlanRequest struct {
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
}

func (m *GetUserPlanRequest) Reset()                    { *m = GetUserPlanRequest{} }
func (m *GetUserPlanRequest) String() string            { return proto.CompactTextString(m) }
func (*GetUserPlanRequest) ProtoMessage()               {}
func (*GetUserPlanRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{58} }

func (m *GetUserPlanRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

type GetUserPlanResponse struct {
	Data    *GetUserPlanResponse_Data `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	Code    int64                     `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Message string                    `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *GetUserPlanResponse) Reset()                    { *m = GetUserPlanResponse{} }
func (m *GetUserPlanResponse) String() string            { return proto.CompactTextString(m) }
func (*GetUserPlanResponse) ProtoMessage()               {}
func (*GetUserPlanResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{59} }

func (m *GetUserPlanResponse) GetData() *GetUserPlanResponse_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *GetUserPlanResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *GetUserPlanResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type GetUserPlanResponse_Data struct {
	UserPlan *UserPlan `protobuf:"bytes,1,opt,name=user_plan,json=userPlan" json:"user_plan,omitempty"`
}

func (m *GetUserPlanResponse_Data) Reset()                    { *m = GetUserPlanResponse_Data{} }
func (m *GetUserPlanResponse_Data) String() string            { return proto.CompactTextString(m) }
func (*GetUserPlanResponse_Data) ProtoMessage()               {}
func (*GetUserPlanResponse_Data) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{59, 0} }

func (m *GetUserPlanResponse_Data) GetUserPlan() *UserPlan {
	if m != nil {
		return m.UserPlan
	}
	return nil
}

type UpdateUserPlanRequest struct {
	Id    string                                    `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	OrgId string                                    `protobuf:"bytes,2,opt,name=org_id,json=orgId" json:"org_id,omitempty"`
	Goals []*go_micro_srv_behaviour.Goal            `protobuf:"bytes,3,rep,name=goals" json:"goals,omitempty"`
	Days  map[string]*go_micro_srv_static2.DayItems `protobuf:"bytes,4,rep,name=days" json:"days,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *UpdateUserPlanRequest) Reset()                    { *m = UpdateUserPlanRequest{} }
func (m *UpdateUserPlanRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateUserPlanRequest) ProtoMessage()               {}
func (*UpdateUserPlanRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{60} }

func (m *UpdateUserPlanRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *UpdateUserPlanRequest) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *UpdateUserPlanRequest) GetGoals() []*go_micro_srv_behaviour.Goal {
	if m != nil {
		return m.Goals
	}
	return nil
}

func (m *UpdateUserPlanRequest) GetDays() map[string]*go_micro_srv_static2.DayItems {
	if m != nil {
		return m.Days
	}
	return nil
}

type UpdateUserPlanResponse struct {
	Data    *UpdateUserPlanResponse_Data `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	Code    int64                        `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Message string                       `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *UpdateUserPlanResponse) Reset()                    { *m = UpdateUserPlanResponse{} }
func (m *UpdateUserPlanResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateUserPlanResponse) ProtoMessage()               {}
func (*UpdateUserPlanResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{61} }

func (m *UpdateUserPlanResponse) GetData() *UpdateUserPlanResponse_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *UpdateUserPlanResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *UpdateUserPlanResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type UpdateUserPlanResponse_Data struct {
	UserPlan *UserPlan `protobuf:"bytes,1,opt,name=user_plan,json=userPlan" json:"user_plan,omitempty"`
}

func (m *UpdateUserPlanResponse_Data) Reset()                    { *m = UpdateUserPlanResponse_Data{} }
func (m *UpdateUserPlanResponse_Data) String() string            { return proto.CompactTextString(m) }
func (*UpdateUserPlanResponse_Data) ProtoMessage()               {}
func (*UpdateUserPlanResponse_Data) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{61, 0} }

func (m *UpdateUserPlanResponse_Data) GetUserPlan() *UserPlan {
	if m != nil {
		return m.UserPlan
	}
	return nil
}

type GetPlanItemsCountByCategoryRequest struct {
	PlanId string `protobuf:"bytes,1,opt,name=plan_id,json=planId" json:"plan_id,omitempty"`
}

func (m *GetPlanItemsCountByCategoryRequest) Reset()         { *m = GetPlanItemsCountByCategoryRequest{} }
func (m *GetPlanItemsCountByCategoryRequest) String() string { return proto.CompactTextString(m) }
func (*GetPlanItemsCountByCategoryRequest) ProtoMessage()    {}
func (*GetPlanItemsCountByCategoryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{62}
}

func (m *GetPlanItemsCountByCategoryRequest) GetPlanId() string {
	if m != nil {
		return m.PlanId
	}
	return ""
}

type GetPlanItemsCountByCategoryResponse struct {
	Data    *GetPlanItemsCountByCategoryResponse_Data `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	Code    int64                                     `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Message string                                    `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *GetPlanItemsCountByCategoryResponse) Reset()         { *m = GetPlanItemsCountByCategoryResponse{} }
func (m *GetPlanItemsCountByCategoryResponse) String() string { return proto.CompactTextString(m) }
func (*GetPlanItemsCountByCategoryResponse) ProtoMessage()    {}
func (*GetPlanItemsCountByCategoryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{63}
}

func (m *GetPlanItemsCountByCategoryResponse) GetData() *GetPlanItemsCountByCategoryResponse_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *GetPlanItemsCountByCategoryResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *GetPlanItemsCountByCategoryResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type GetPlanItemsCountByCategoryResponse_Data struct {
	ContentCount []*CategoryCountResponse `protobuf:"bytes,1,rep,name=content_count,json=contentCount" json:"content_count,omitempty"`
}

func (m *GetPlanItemsCountByCategoryResponse_Data) Reset() {
	*m = GetPlanItemsCountByCategoryResponse_Data{}
}
func (m *GetPlanItemsCountByCategoryResponse_Data) String() string { return proto.CompactTextString(m) }
func (*GetPlanItemsCountByCategoryResponse_Data) ProtoMessage()    {}
func (*GetPlanItemsCountByCategoryResponse_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{63, 0}
}

func (m *GetPlanItemsCountByCategoryResponse_Data) GetContentCount() []*CategoryCountResponse {
	if m != nil {
		return m.ContentCount
	}
	return nil
}

type GetPlanItemsCountByDayRequest struct {
	PlanId    string `protobuf:"bytes,1,opt,name=plan_id,json=planId" json:"plan_id,omitempty"`
	DayNumber string `protobuf:"bytes,2,opt,name=day_number,json=dayNumber" json:"day_number,omitempty"`
}

func (m *GetPlanItemsCountByDayRequest) Reset()                    { *m = GetPlanItemsCountByDayRequest{} }
func (m *GetPlanItemsCountByDayRequest) String() string            { return proto.CompactTextString(m) }
func (*GetPlanItemsCountByDayRequest) ProtoMessage()               {}
func (*GetPlanItemsCountByDayRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{64} }

func (m *GetPlanItemsCountByDayRequest) GetPlanId() string {
	if m != nil {
		return m.PlanId
	}
	return ""
}

func (m *GetPlanItemsCountByDayRequest) GetDayNumber() string {
	if m != nil {
		return m.DayNumber
	}
	return ""
}

type GetPlanItemsCountByDayResponse struct {
	Data    *GetPlanItemsCountByDayResponse_Data `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	Code    int64                                `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Message string                               `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *GetPlanItemsCountByDayResponse) Reset()                    { *m = GetPlanItemsCountByDayResponse{} }
func (m *GetPlanItemsCountByDayResponse) String() string            { return proto.CompactTextString(m) }
func (*GetPlanItemsCountByDayResponse) ProtoMessage()               {}
func (*GetPlanItemsCountByDayResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{65} }

func (m *GetPlanItemsCountByDayResponse) GetData() *GetPlanItemsCountByDayResponse_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *GetPlanItemsCountByDayResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *GetPlanItemsCountByDayResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type GetPlanItemsCountByDayResponse_Data struct {
	ContentCount []*CategoryCountResponse `protobuf:"bytes,1,rep,name=content_count,json=contentCount" json:"content_count,omitempty"`
}

func (m *GetPlanItemsCountByDayResponse_Data) Reset()         { *m = GetPlanItemsCountByDayResponse_Data{} }
func (m *GetPlanItemsCountByDayResponse_Data) String() string { return proto.CompactTextString(m) }
func (*GetPlanItemsCountByDayResponse_Data) ProtoMessage()    {}
func (*GetPlanItemsCountByDayResponse_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{65, 0}
}

func (m *GetPlanItemsCountByDayResponse_Data) GetContentCount() []*CategoryCountResponse {
	if m != nil {
		return m.ContentCount
	}
	return nil
}

type GetPlanItemsCountByCategoryAndDayRequest struct {
	PlanId string `protobuf:"bytes,1,opt,name=plan_id,json=planId" json:"plan_id,omitempty"`
}

func (m *GetPlanItemsCountByCategoryAndDayRequest) Reset() {
	*m = GetPlanItemsCountByCategoryAndDayRequest{}
}
func (m *GetPlanItemsCountByCategoryAndDayRequest) String() string { return proto.CompactTextString(m) }
func (*GetPlanItemsCountByCategoryAndDayRequest) ProtoMessage()    {}
func (*GetPlanItemsCountByCategoryAndDayRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{66}
}

func (m *GetPlanItemsCountByCategoryAndDayRequest) GetPlanId() string {
	if m != nil {
		return m.PlanId
	}
	return ""
}

type GetPlanItemsCountByCategoryAndDayResponse struct {
	Data    *GetPlanItemsCountByCategoryAndDayResponse_Data `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	Code    int64                                           `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Message string                                          `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *GetPlanItemsCountByCategoryAndDayResponse) Reset() {
	*m = GetPlanItemsCountByCategoryAndDayResponse{}
}
func (m *GetPlanItemsCountByCategoryAndDayResponse) String() string { return proto.CompactTextString(m) }
func (*GetPlanItemsCountByCategoryAndDayResponse) ProtoMessage()    {}
func (*GetPlanItemsCountByCategoryAndDayResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{67}
}

func (m *GetPlanItemsCountByCategoryAndDayResponse) GetData() *GetPlanItemsCountByCategoryAndDayResponse_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *GetPlanItemsCountByCategoryAndDayResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *GetPlanItemsCountByCategoryAndDayResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type GetPlanItemsCountByCategoryAndDayResponse_Data struct {
	ContentCount []*CategoryCountResponse `protobuf:"bytes,1,rep,name=content_count,json=contentCount" json:"content_count,omitempty"`
}

func (m *GetPlanItemsCountByCategoryAndDayResponse_Data) Reset() {
	*m = GetPlanItemsCountByCategoryAndDayResponse_Data{}
}
func (m *GetPlanItemsCountByCategoryAndDayResponse_Data) String() string {
	return proto.CompactTextString(m)
}
func (*GetPlanItemsCountByCategoryAndDayResponse_Data) ProtoMessage() {}
func (*GetPlanItemsCountByCategoryAndDayResponse_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{67, 0}
}

func (m *GetPlanItemsCountByCategoryAndDayResponse_Data) GetContentCount() []*CategoryCountResponse {
	if m != nil {
		return m.ContentCount
	}
	return nil
}

type Bookmark struct {
	Id              string                               `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Content         *go_micro_srv_content.Content        `protobuf:"bytes,2,opt,name=content" json:"content,omitempty"`
	User            *go_micro_srv_user.User              `protobuf:"bytes,3,opt,name=user" json:"user,omitempty"`
	Created         int64                                `protobuf:"varint,4,opt,name=created" json:"created,omitempty"`
	ContentCategory *go_micro_srv_static.ContentCategory `protobuf:"bytes,5,opt,name=content_category,json=contentCategory" json:"content_category,omitempty"`
}

func (m *Bookmark) Reset()                    { *m = Bookmark{} }
func (m *Bookmark) String() string            { return proto.CompactTextString(m) }
func (*Bookmark) ProtoMessage()               {}
func (*Bookmark) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{68} }

func (m *Bookmark) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Bookmark) GetContent() *go_micro_srv_content.Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *Bookmark) GetUser() *go_micro_srv_user.User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *Bookmark) GetCreated() int64 {
	if m != nil {
		return m.Created
	}
	return 0
}

func (m *Bookmark) GetContentCategory() *go_micro_srv_static.ContentCategory {
	if m != nil {
		return m.ContentCategory
	}
	return nil
}

type BookmarkContent struct {
	Id         string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	ContentId  string `protobuf:"bytes,2,opt,name=content_id,json=contentId" json:"content_id,omitempty"`
	Image      string `protobuf:"bytes,3,opt,name=image" json:"image,omitempty"`
	Title      string `protobuf:"bytes,4,opt,name=title" json:"title,omitempty"`
	Category   string `protobuf:"bytes,5,opt,name=category" json:"category,omitempty"`
	CategoryId string `protobuf:"bytes,6,opt,name=category_id,json=categoryId" json:"category_id,omitempty"`
}

func (m *BookmarkContent) Reset()                    { *m = BookmarkContent{} }
func (m *BookmarkContent) String() string            { return proto.CompactTextString(m) }
func (*BookmarkContent) ProtoMessage()               {}
func (*BookmarkContent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{69} }

func (m *BookmarkContent) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *BookmarkContent) GetContentId() string {
	if m != nil {
		return m.ContentId
	}
	return ""
}

func (m *BookmarkContent) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *BookmarkContent) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *BookmarkContent) GetCategory() string {
	if m != nil {
		return m.Category
	}
	return ""
}

func (m *BookmarkContent) GetCategoryId() string {
	if m != nil {
		return m.CategoryId
	}
	return ""
}

type SharedSurvey struct {
	Id       string                  `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	SurveyId string                  `protobuf:"bytes,2,opt,name=survey_id,json=surveyId" json:"survey_id,omitempty"`
	Image    string                  `protobuf:"bytes,3,opt,name=image" json:"image,omitempty"`
	Title    string                  `protobuf:"bytes,4,opt,name=title" json:"title,omitempty"`
	Count    int64                   `protobuf:"varint,5,opt,name=count" json:"count,omitempty"`
	Summary  string                  `protobuf:"bytes,6,opt,name=summary" json:"summary,omitempty"`
	SharedBy *go_micro_srv_user.User `protobuf:"bytes,7,opt,name=shared_by,json=sharedBy" json:"shared_by,omitempty"`
}

func (m *SharedSurvey) Reset()                    { *m = SharedSurvey{} }
func (m *SharedSurvey) String() string            { return proto.CompactTextString(m) }
func (*SharedSurvey) ProtoMessage()               {}
func (*SharedSurvey) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{70} }

func (m *SharedSurvey) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *SharedSurvey) GetSurveyId() string {
	if m != nil {
		return m.SurveyId
	}
	return ""
}

func (m *SharedSurvey) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *SharedSurvey) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *SharedSurvey) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *SharedSurvey) GetSummary() string {
	if m != nil {
		return m.Summary
	}
	return ""
}

func (m *SharedSurvey) GetSharedBy() *go_micro_srv_user.User {
	if m != nil {
		return m.SharedBy
	}
	return nil
}

type SharedPlan struct {
	Id       string                  `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	PlanId   string                  `protobuf:"bytes,2,opt,name=plan_id,json=planId" json:"plan_id,omitempty"`
	Image    string                  `protobuf:"bytes,3,opt,name=image" json:"image,omitempty"`
	Title    string                  `protobuf:"bytes,4,opt,name=title" json:"title,omitempty"`
	Duration string                  `protobuf:"bytes,5,opt,name=duration" json:"duration,omitempty"`
	Count    int64                   `protobuf:"varint,6,opt,name=count" json:"count,omitempty"`
	Summary  string                  `protobuf:"bytes,7,opt,name=summary" json:"summary,omitempty"`
	SharedBy *go_micro_srv_user.User `protobuf:"bytes,8,opt,name=shared_by,json=sharedBy" json:"shared_by,omitempty"`
}

func (m *SharedPlan) Reset()                    { *m = SharedPlan{} }
func (m *SharedPlan) String() string            { return proto.CompactTextString(m) }
func (*SharedPlan) ProtoMessage()               {}
func (*SharedPlan) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{71} }

func (m *SharedPlan) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *SharedPlan) GetPlanId() string {
	if m != nil {
		return m.PlanId
	}
	return ""
}

func (m *SharedPlan) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *SharedPlan) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *SharedPlan) GetDuration() string {
	if m != nil {
		return m.Duration
	}
	return ""
}

func (m *SharedPlan) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *SharedPlan) GetSummary() string {
	if m != nil {
		return m.Summary
	}
	return ""
}

func (m *SharedPlan) GetSharedBy() *go_micro_srv_user.User {
	if m != nil {
		return m.SharedBy
	}
	return nil
}

type SharedGoal struct {
	Id       string                  `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	GoalId   string                  `protobuf:"bytes,2,opt,name=goal_id,json=goalId" json:"goal_id,omitempty"`
	Image    string                  `protobuf:"bytes,3,opt,name=image" json:"image,omitempty"`
	Title    string                  `protobuf:"bytes,4,opt,name=title" json:"title,omitempty"`
	Current  int64                   `protobuf:"varint,5,opt,name=current" json:"current,omitempty"`
	Target   int64                   `protobuf:"varint,6,opt,name=target" json:"target,omitempty"`
	Duration string                  `protobuf:"bytes,7,opt,name=duration" json:"duration,omitempty"`
	Summary  string                  `protobuf:"bytes,8,opt,name=summary" json:"summary,omitempty"`
	SharedBy *go_micro_srv_user.User `protobuf:"bytes,9,opt,name=shared_by,json=sharedBy" json:"shared_by,omitempty"`
}

func (m *SharedGoal) Reset()                    { *m = SharedGoal{} }
func (m *SharedGoal) String() string            { return proto.CompactTextString(m) }
func (*SharedGoal) ProtoMessage()               {}
func (*SharedGoal) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{72} }

func (m *SharedGoal) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *SharedGoal) GetGoalId() string {
	if m != nil {
		return m.GoalId
	}
	return ""
}

func (m *SharedGoal) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *SharedGoal) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *SharedGoal) GetCurrent() int64 {
	if m != nil {
		return m.Current
	}
	return 0
}

func (m *SharedGoal) GetTarget() int64 {
	if m != nil {
		return m.Target
	}
	return 0
}

func (m *SharedGoal) GetDuration() string {
	if m != nil {
		return m.Duration
	}
	return ""
}

func (m *SharedGoal) GetSummary() string {
	if m != nil {
		return m.Summary
	}
	return ""
}

func (m *SharedGoal) GetSharedBy() *go_micro_srv_user.User {
	if m != nil {
		return m.SharedBy
	}
	return nil
}

type SharedHabit struct {
	Id       string                  `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	HabitId  string                  `protobuf:"bytes,2,opt,name=habit_id,json=habitId" json:"habit_id,omitempty"`
	Image    string                  `protobuf:"bytes,3,opt,name=image" json:"image,omitempty"`
	Title    string                  `protobuf:"bytes,4,opt,name=title" json:"title,omitempty"`
	Current  int64                   `protobuf:"varint,5,opt,name=current" json:"current,omitempty"`
	Target   int64                   `protobuf:"varint,6,opt,name=target" json:"target,omitempty"`
	Duration string                  `protobuf:"bytes,7,opt,name=duration" json:"duration,omitempty"`
	Summary  string                  `protobuf:"bytes,8,opt,name=summary" json:"summary,omitempty"`
	SharedBy *go_micro_srv_user.User `protobuf:"bytes,9,opt,name=shared_by,json=sharedBy" json:"shared_by,omitempty"`
}

func (m *SharedHabit) Reset()                    { *m = SharedHabit{} }
func (m *SharedHabit) String() string            { return proto.CompactTextString(m) }
func (*SharedHabit) ProtoMessage()               {}
func (*SharedHabit) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{73} }

func (m *SharedHabit) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *SharedHabit) GetHabitId() string {
	if m != nil {
		return m.HabitId
	}
	return ""
}

func (m *SharedHabit) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *SharedHabit) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *SharedHabit) GetCurrent() int64 {
	if m != nil {
		return m.Current
	}
	return 0
}

func (m *SharedHabit) GetTarget() int64 {
	if m != nil {
		return m.Target
	}
	return 0
}

func (m *SharedHabit) GetDuration() string {
	if m != nil {
		return m.Duration
	}
	return ""
}

func (m *SharedHabit) GetSummary() string {
	if m != nil {
		return m.Summary
	}
	return ""
}

func (m *SharedHabit) GetSharedBy() *go_micro_srv_user.User {
	if m != nil {
		return m.SharedBy
	}
	return nil
}

type SharedChallenge struct {
	Id          string                  `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	ChallengeId string                  `protobuf:"bytes,2,opt,name=challenge_id,json=challengeId" json:"challenge_id,omitempty"`
	Image       string                  `protobuf:"bytes,3,opt,name=image" json:"image,omitempty"`
	Title       string                  `protobuf:"bytes,4,opt,name=title" json:"title,omitempty"`
	Current     int64                   `protobuf:"varint,5,opt,name=current" json:"current,omitempty"`
	Target      int64                   `protobuf:"varint,6,opt,name=target" json:"target,omitempty"`
	Duration    string                  `protobuf:"bytes,7,opt,name=duration" json:"duration,omitempty"`
	Summary     string                  `protobuf:"bytes,8,opt,name=summary" json:"summary,omitempty"`
	SharedBy    *go_micro_srv_user.User `protobuf:"bytes,9,opt,name=shared_by,json=sharedBy" json:"shared_by,omitempty"`
}

func (m *SharedChallenge) Reset()                    { *m = SharedChallenge{} }
func (m *SharedChallenge) String() string            { return proto.CompactTextString(m) }
func (*SharedChallenge) ProtoMessage()               {}
func (*SharedChallenge) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{74} }

func (m *SharedChallenge) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *SharedChallenge) GetChallengeId() string {
	if m != nil {
		return m.ChallengeId
	}
	return ""
}

func (m *SharedChallenge) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *SharedChallenge) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *SharedChallenge) GetCurrent() int64 {
	if m != nil {
		return m.Current
	}
	return 0
}

func (m *SharedChallenge) GetTarget() int64 {
	if m != nil {
		return m.Target
	}
	return 0
}

func (m *SharedChallenge) GetDuration() string {
	if m != nil {
		return m.Duration
	}
	return ""
}

func (m *SharedChallenge) GetSummary() string {
	if m != nil {
		return m.Summary
	}
	return ""
}

func (m *SharedChallenge) GetSharedBy() *go_micro_srv_user.User {
	if m != nil {
		return m.SharedBy
	}
	return nil
}

type JoinGoal struct {
	Id     string                       `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Goal   *go_micro_srv_behaviour.Goal `protobuf:"bytes,2,opt,name=goal" json:"goal,omitempty"`
	User   *go_micro_srv_user.User      `protobuf:"bytes,3,opt,name=user" json:"user,omitempty"`
	Status ActionStatus                 `protobuf:"varint,4,opt,name=status,enum=go.micro.srv.userapp.ActionStatus" json:"status,omitempty"`
	Start  int64                        `protobuf:"varint,5,opt,name=start" json:"start,omitempty"`
	End    int64                        `protobuf:"varint,6,opt,name=end" json:"end,omitempty"`
	Target *go_micro_srv_static.Target  `protobuf:"bytes,7,opt,name=target" json:"target,omitempty"`
}

func (m *JoinGoal) Reset()                    { *m = JoinGoal{} }
func (m *JoinGoal) String() string            { return proto.CompactTextString(m) }
func (*JoinGoal) ProtoMessage()               {}
func (*JoinGoal) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{75} }

func (m *JoinGoal) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *JoinGoal) GetGoal() *go_micro_srv_behaviour.Goal {
	if m != nil {
		return m.Goal
	}
	return nil
}

func (m *JoinGoal) GetUser() *go_micro_srv_user.User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *JoinGoal) GetStatus() ActionStatus {
	if m != nil {
		return m.Status
	}
	return ActionStatus_ActionStatus_NONE
}

func (m *JoinGoal) GetStart() int64 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *JoinGoal) GetEnd() int64 {
	if m != nil {
		return m.End
	}
	return 0
}

func (m *JoinGoal) GetTarget() *go_micro_srv_static.Target {
	if m != nil {
		return m.Target
	}
	return nil
}

type JoinChallenge struct {
	Id        string                            `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Challenge *go_micro_srv_behaviour.Challenge `protobuf:"bytes,2,opt,name=challenge" json:"challenge,omitempty"`
	User      *go_micro_srv_user.User           `protobuf:"bytes,3,opt,name=user" json:"user,omitempty"`
	Status    ActionStatus                      `protobuf:"varint,4,opt,name=status,enum=go.micro.srv.userapp.ActionStatus" json:"status,omitempty"`
	Start     int64                             `protobuf:"varint,5,opt,name=start" json:"start,omitempty"`
	End       int64                             `protobuf:"varint,6,opt,name=end" json:"end,omitempty"`
	Target    *go_micro_srv_static.Target       `protobuf:"bytes,7,opt,name=target" json:"target,omitempty"`
}

func (m *JoinChallenge) Reset()                    { *m = JoinChallenge{} }
func (m *JoinChallenge) String() string            { return proto.CompactTextString(m) }
func (*JoinChallenge) ProtoMessage()               {}
func (*JoinChallenge) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{76} }

func (m *JoinChallenge) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *JoinChallenge) GetChallenge() *go_micro_srv_behaviour.Challenge {
	if m != nil {
		return m.Challenge
	}
	return nil
}

func (m *JoinChallenge) GetUser() *go_micro_srv_user.User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *JoinChallenge) GetStatus() ActionStatus {
	if m != nil {
		return m.Status
	}
	return ActionStatus_ActionStatus_NONE
}

func (m *JoinChallenge) GetStart() int64 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *JoinChallenge) GetEnd() int64 {
	if m != nil {
		return m.End
	}
	return 0
}

func (m *JoinChallenge) GetTarget() *go_micro_srv_static.Target {
	if m != nil {
		return m.Target
	}
	return nil
}

type JoinHabit struct {
	Id     string                        `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Habit  *go_micro_srv_behaviour.Habit `protobuf:"bytes,2,opt,name=habit" json:"habit,omitempty"`
	User   *go_micro_srv_user.User       `protobuf:"bytes,3,opt,name=user" json:"user,omitempty"`
	Status ActionStatus                  `protobuf:"varint,4,opt,name=status,enum=go.micro.srv.userapp.ActionStatus" json:"status,omitempty"`
	Start  int64                         `protobuf:"varint,5,opt,name=start" json:"start,omitempty"`
	End    int64                         `protobuf:"varint,6,opt,name=end" json:"end,omitempty"`
	Target *go_micro_srv_static.Target   `protobuf:"bytes,7,opt,name=target" json:"target,omitempty"`
}

func (m *JoinHabit) Reset()                    { *m = JoinHabit{} }
func (m *JoinHabit) String() string            { return proto.CompactTextString(m) }
func (*JoinHabit) ProtoMessage()               {}
func (*JoinHabit) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{77} }

func (m *JoinHabit) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *JoinHabit) GetHabit() *go_micro_srv_behaviour.Habit {
	if m != nil {
		return m.Habit
	}
	return nil
}

func (m *JoinHabit) GetUser() *go_micro_srv_user.User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *JoinHabit) GetStatus() ActionStatus {
	if m != nil {
		return m.Status
	}
	return ActionStatus_ActionStatus_NONE
}

func (m *JoinHabit) GetStart() int64 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *JoinHabit) GetEnd() int64 {
	if m != nil {
		return m.End
	}
	return 0
}

func (m *JoinHabit) GetTarget() *go_micro_srv_static.Target {
	if m != nil {
		return m.Target
	}
	return nil
}

type JoinGoalResponse struct {
	Id            string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	GoalId        string `protobuf:"bytes,2,opt,name=goal_id,json=goalId" json:"goal_id,omitempty"`
	Image         string `protobuf:"bytes,3,opt,name=image" json:"image,omitempty"`
	Title         string `protobuf:"bytes,4,opt,name=title" json:"title,omitempty"`
	SharedBy      string `protobuf:"bytes,5,opt,name=shared_by,json=sharedBy" json:"shared_by,omitempty"`
	SharedByImage string `protobuf:"bytes,6,opt,name=shared_by_image,json=sharedByImage" json:"shared_by_image,omitempty"`
	Current       int64  `protobuf:"varint,7,opt,name=current" json:"current,omitempty"`
	Target        int64  `protobuf:"varint,8,opt,name=target" json:"target,omitempty"`
	Duration      string `protobuf:"bytes,9,opt,name=duration" json:"duration,omitempty"`
}

func (m *JoinGoalResponse) Reset()                    { *m = JoinGoalResponse{} }
func (m *JoinGoalResponse) String() string            { return proto.CompactTextString(m) }
func (*JoinGoalResponse) ProtoMessage()               {}
func (*JoinGoalResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{78} }

func (m *JoinGoalResponse) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *JoinGoalResponse) GetGoalId() string {
	if m != nil {
		return m.GoalId
	}
	return ""
}

func (m *JoinGoalResponse) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *JoinGoalResponse) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *JoinGoalResponse) GetSharedBy() string {
	if m != nil {
		return m.SharedBy
	}
	return ""
}

func (m *JoinGoalResponse) GetSharedByImage() string {
	if m != nil {
		return m.SharedByImage
	}
	return ""
}

func (m *JoinGoalResponse) GetCurrent() int64 {
	if m != nil {
		return m.Current
	}
	return 0
}

func (m *JoinGoalResponse) GetTarget() int64 {
	if m != nil {
		return m.Target
	}
	return 0
}

func (m *JoinGoalResponse) GetDuration() string {
	if m != nil {
		return m.Duration
	}
	return ""
}

type JoinChallengeResponse struct {
	Id            string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	ChallengeId   string `protobuf:"bytes,2,opt,name=challenge_id,json=challengeId" json:"challenge_id,omitempty"`
	Image         string `protobuf:"bytes,3,opt,name=image" json:"image,omitempty"`
	Title         string `protobuf:"bytes,4,opt,name=title" json:"title,omitempty"`
	SharedBy      string `protobuf:"bytes,5,opt,name=shared_by,json=sharedBy" json:"shared_by,omitempty"`
	SharedByImage string `protobuf:"bytes,6,opt,name=shared_by_image,json=sharedByImage" json:"shared_by_image,omitempty"`
	Current       int64  `protobuf:"varint,7,opt,name=current" json:"current,omitempty"`
	Target        int64  `protobuf:"varint,8,opt,name=target" json:"target,omitempty"`
	Duration      string `protobuf:"bytes,9,opt,name=duration" json:"duration,omitempty"`
}

func (m *JoinChallengeResponse) Reset()                    { *m = JoinChallengeResponse{} }
func (m *JoinChallengeResponse) String() string            { return proto.CompactTextString(m) }
func (*JoinChallengeResponse) ProtoMessage()               {}
func (*JoinChallengeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{79} }

func (m *JoinChallengeResponse) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *JoinChallengeResponse) GetChallengeId() string {
	if m != nil {
		return m.ChallengeId
	}
	return ""
}

func (m *JoinChallengeResponse) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *JoinChallengeResponse) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *JoinChallengeResponse) GetSharedBy() string {
	if m != nil {
		return m.SharedBy
	}
	return ""
}

func (m *JoinChallengeResponse) GetSharedByImage() string {
	if m != nil {
		return m.SharedByImage
	}
	return ""
}

func (m *JoinChallengeResponse) GetCurrent() int64 {
	if m != nil {
		return m.Current
	}
	return 0
}

func (m *JoinChallengeResponse) GetTarget() int64 {
	if m != nil {
		return m.Target
	}
	return 0
}

func (m *JoinChallengeResponse) GetDuration() string {
	if m != nil {
		return m.Duration
	}
	return ""
}

type JoinHabitResponse struct {
	Id            string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	HabitId       string `protobuf:"bytes,2,opt,name=habit_id,json=habitId" json:"habit_id,omitempty"`
	Image         string `protobuf:"bytes,3,opt,name=image" json:"image,omitempty"`
	Title         string `protobuf:"bytes,4,opt,name=title" json:"title,omitempty"`
	SharedBy      string `protobuf:"bytes,5,opt,name=shared_by,json=sharedBy" json:"shared_by,omitempty"`
	SharedByImage string `protobuf:"bytes,6,opt,name=shared_by_image,json=sharedByImage" json:"shared_by_image,omitempty"`
	Current       int64  `protobuf:"varint,7,opt,name=current" json:"current,omitempty"`
	Target        int64  `protobuf:"varint,8,opt,name=target" json:"target,omitempty"`
	Duration      string `protobuf:"bytes,9,opt,name=duration" json:"duration,omitempty"`
}

func (m *JoinHabitResponse) Reset()                    { *m = JoinHabitResponse{} }
func (m *JoinHabitResponse) String() string            { return proto.CompactTextString(m) }
func (*JoinHabitResponse) ProtoMessage()               {}
func (*JoinHabitResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{80} }

func (m *JoinHabitResponse) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *JoinHabitResponse) GetHabitId() string {
	if m != nil {
		return m.HabitId
	}
	return ""
}

func (m *JoinHabitResponse) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *JoinHabitResponse) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *JoinHabitResponse) GetSharedBy() string {
	if m != nil {
		return m.SharedBy
	}
	return ""
}

func (m *JoinHabitResponse) GetSharedByImage() string {
	if m != nil {
		return m.SharedByImage
	}
	return ""
}

func (m *JoinHabitResponse) GetCurrent() int64 {
	if m != nil {
		return m.Current
	}
	return 0
}

func (m *JoinHabitResponse) GetTarget() int64 {
	if m != nil {
		return m.Target
	}
	return 0
}

func (m *JoinHabitResponse) GetDuration() string {
	if m != nil {
		return m.Duration
	}
	return ""
}

type MarkerResponse struct {
	IsDefault      bool                                 `protobuf:"varint,1,opt,name=is_default,json=isDefault" json:"is_default,omitempty"`
	MarkerId       string                               `protobuf:"bytes,2,opt,name=marker_id,json=markerId" json:"marker_id,omitempty"`
	Name           string                               `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	IconSlug       string                               `protobuf:"bytes,4,opt,name=icon_slug,json=iconSlug" json:"icon_slug,omitempty"`
	NameSlug       string                               `protobuf:"bytes,5,opt,name=name_slug,json=nameSlug" json:"name_slug,omitempty"`
	Unit           []string                             `protobuf:"bytes,6,rep,name=unit" json:"unit,omitempty"`
	TrackerMethods []*go_micro_srv_static.TrackerMethod `protobuf:"bytes,7,rep,name=tracker_methods,json=trackerMethods" json:"tracker_methods,omitempty"`
}

func (m *MarkerResponse) Reset()                    { *m = MarkerResponse{} }
func (m *MarkerResponse) String() string            { return proto.CompactTextString(m) }
func (*MarkerResponse) ProtoMessage()               {}
func (*MarkerResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{81} }

func (m *MarkerResponse) GetIsDefault() bool {
	if m != nil {
		return m.IsDefault
	}
	return false
}

func (m *MarkerResponse) GetMarkerId() string {
	if m != nil {
		return m.MarkerId
	}
	return ""
}

func (m *MarkerResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MarkerResponse) GetIconSlug() string {
	if m != nil {
		return m.IconSlug
	}
	return ""
}

func (m *MarkerResponse) GetNameSlug() string {
	if m != nil {
		return m.NameSlug
	}
	return ""
}

func (m *MarkerResponse) GetUnit() []string {
	if m != nil {
		return m.Unit
	}
	return nil
}

func (m *MarkerResponse) GetTrackerMethods() []*go_micro_srv_static.TrackerMethod {
	if m != nil {
		return m.TrackerMethods
	}
	return nil
}

type GoalProgressResponse struct {
	Goal        *go_micro_srv_behaviour.Goal `protobuf:"bytes,1,opt,name=goal" json:"goal,omitempty"`
	User        *go_micro_srv_user.User      `protobuf:"bytes,2,opt,name=user" json:"user,omitempty"`
	LatestValue int64                        `protobuf:"varint,3,opt,name=latestValue" json:"latestValue,omitempty"`
	Target      int64                        `protobuf:"varint,4,opt,name=target" json:"target,omitempty"`
	Unit        string                       `protobuf:"bytes,5,opt,name=unit" json:"unit,omitempty"`
}

func (m *GoalProgressResponse) Reset()                    { *m = GoalProgressResponse{} }
func (m *GoalProgressResponse) String() string            { return proto.CompactTextString(m) }
func (*GoalProgressResponse) ProtoMessage()               {}
func (*GoalProgressResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{82} }

func (m *GoalProgressResponse) GetGoal() *go_micro_srv_behaviour.Goal {
	if m != nil {
		return m.Goal
	}
	return nil
}

func (m *GoalProgressResponse) GetUser() *go_micro_srv_user.User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *GoalProgressResponse) GetLatestValue() int64 {
	if m != nil {
		return m.LatestValue
	}
	return 0
}

func (m *GoalProgressResponse) GetTarget() int64 {
	if m != nil {
		return m.Target
	}
	return 0
}

func (m *GoalProgressResponse) GetUnit() string {
	if m != nil {
		return m.Unit
	}
	return ""
}

type ChallengeCountResponse struct {
	ChallengeId string `protobuf:"bytes,1,opt,name=challenge_id,json=challengeId" json:"challenge_id,omitempty"`
	Title       string `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
	Current     int64  `protobuf:"varint,3,opt,name=current" json:"current,omitempty"`
	Target      int64  `protobuf:"varint,4,opt,name=target" json:"target,omitempty"`
	Duration    string `protobuf:"bytes,5,opt,name=duration" json:"duration,omitempty"`
	Count       int64  `protobuf:"varint,6,opt,name=count" json:"count,omitempty"`
	Image       string `protobuf:"bytes,7,opt,name=image" json:"image,omitempty"`
}

func (m *ChallengeCountResponse) Reset()                    { *m = ChallengeCountResponse{} }
func (m *ChallengeCountResponse) String() string            { return proto.CompactTextString(m) }
func (*ChallengeCountResponse) ProtoMessage()               {}
func (*ChallengeCountResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{83} }

func (m *ChallengeCountResponse) GetChallengeId() string {
	if m != nil {
		return m.ChallengeId
	}
	return ""
}

func (m *ChallengeCountResponse) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *ChallengeCountResponse) GetCurrent() int64 {
	if m != nil {
		return m.Current
	}
	return 0
}

func (m *ChallengeCountResponse) GetTarget() int64 {
	if m != nil {
		return m.Target
	}
	return 0
}

func (m *ChallengeCountResponse) GetDuration() string {
	if m != nil {
		return m.Duration
	}
	return ""
}

func (m *ChallengeCountResponse) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *ChallengeCountResponse) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

type HabitCountResponse struct {
	HabitId  string `protobuf:"bytes,1,opt,name=habit_id,json=habitId" json:"habit_id,omitempty"`
	Title    string `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
	Current  int64  `protobuf:"varint,3,opt,name=current" json:"current,omitempty"`
	Target   int64  `protobuf:"varint,4,opt,name=target" json:"target,omitempty"`
	Duration string `protobuf:"bytes,5,opt,name=duration" json:"duration,omitempty"`
	Count    int64  `protobuf:"varint,6,opt,name=count" json:"count,omitempty"`
	Image    string `protobuf:"bytes,7,opt,name=image" json:"image,omitempty"`
}

func (m *HabitCountResponse) Reset()                    { *m = HabitCountResponse{} }
func (m *HabitCountResponse) String() string            { return proto.CompactTextString(m) }
func (*HabitCountResponse) ProtoMessage()               {}
func (*HabitCountResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{84} }

func (m *HabitCountResponse) GetHabitId() string {
	if m != nil {
		return m.HabitId
	}
	return ""
}

func (m *HabitCountResponse) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *HabitCountResponse) GetCurrent() int64 {
	if m != nil {
		return m.Current
	}
	return 0
}

func (m *HabitCountResponse) GetTarget() int64 {
	if m != nil {
		return m.Target
	}
	return 0
}

func (m *HabitCountResponse) GetDuration() string {
	if m != nil {
		return m.Duration
	}
	return ""
}

func (m *HabitCountResponse) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *HabitCountResponse) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

type ContentRating struct {
	OrgId     string `protobuf:"bytes,1,opt,name=org_id,json=orgId" json:"org_id,omitempty"`
	UserId    string `protobuf:"bytes,2,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	ContentId string `protobuf:"bytes,3,opt,name=content_id,json=contentId" json:"content_id,omitempty"`
	Rating    int64  `protobuf:"varint,4,opt,name=rating" json:"rating,omitempty"`
	Created   int64  `protobuf:"varint,5,opt,name=created" json:"created,omitempty"`
	Updated   int64  `protobuf:"varint,6,opt,name=updated" json:"updated,omitempty"`
}

func (m *ContentRating) Reset()                    { *m = ContentRating{} }
func (m *ContentRating) String() string            { return proto.CompactTextString(m) }
func (*ContentRating) ProtoMessage()               {}
func (*ContentRating) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{85} }

func (m *ContentRating) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *ContentRating) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *ContentRating) GetContentId() string {
	if m != nil {
		return m.ContentId
	}
	return ""
}

func (m *ContentRating) GetRating() int64 {
	if m != nil {
		return m.Rating
	}
	return 0
}

func (m *ContentRating) GetCreated() int64 {
	if m != nil {
		return m.Created
	}
	return 0
}

func (m *ContentRating) GetUpdated() int64 {
	if m != nil {
		return m.Updated
	}
	return 0
}

type ContentRatingMessage struct {
	UserId    string `protobuf:"bytes,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	ContentId string `protobuf:"bytes,2,opt,name=content_id,json=contentId" json:"content_id,omitempty"`
	Rating    int64  `protobuf:"varint,3,opt,name=rating" json:"rating,omitempty"`
}

func (m *ContentRatingMessage) Reset()                    { *m = ContentRatingMessage{} }
func (m *ContentRatingMessage) String() string            { return proto.CompactTextString(m) }
func (*ContentRatingMessage) ProtoMessage()               {}
func (*ContentRatingMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{86} }

func (m *ContentRatingMessage) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *ContentRatingMessage) GetContentId() string {
	if m != nil {
		return m.ContentId
	}
	return ""
}

func (m *ContentRatingMessage) GetRating() int64 {
	if m != nil {
		return m.Rating
	}
	return 0
}

type ContentDislike struct {
	OrgId     string `protobuf:"bytes,1,opt,name=org_id,json=orgId" json:"org_id,omitempty"`
	UserId    string `protobuf:"bytes,2,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	ContentId string `protobuf:"bytes,3,opt,name=content_id,json=contentId" json:"content_id,omitempty"`
	Created   int64  `protobuf:"varint,4,opt,name=created" json:"created,omitempty"`
	Updated   int64  `protobuf:"varint,5,opt,name=updated" json:"updated,omitempty"`
}

func (m *ContentDislike) Reset()                    { *m = ContentDislike{} }
func (m *ContentDislike) String() string            { return proto.CompactTextString(m) }
func (*ContentDislike) ProtoMessage()               {}
func (*ContentDislike) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{87} }

func (m *ContentDislike) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *ContentDislike) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *ContentDislike) GetContentId() string {
	if m != nil {
		return m.ContentId
	}
	return ""
}

func (m *ContentDislike) GetCreated() int64 {
	if m != nil {
		return m.Created
	}
	return 0
}

func (m *ContentDislike) GetUpdated() int64 {
	if m != nil {
		return m.Updated
	}
	return 0
}

type ContentDislikeMessage struct {
	UserId    string `protobuf:"bytes,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	ContentId string `protobuf:"bytes,2,opt,name=content_id,json=contentId" json:"content_id,omitempty"`
}

func (m *ContentDislikeMessage) Reset()                    { *m = ContentDislikeMessage{} }
func (m *ContentDislikeMessage) String() string            { return proto.CompactTextString(m) }
func (*ContentDislikeMessage) ProtoMessage()               {}
func (*ContentDislikeMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{88} }

func (m *ContentDislikeMessage) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *ContentDislikeMessage) GetContentId() string {
	if m != nil {
		return m.ContentId
	}
	return ""
}

type ContentDislikeSimilar struct {
	OrgId     string                                     `protobuf:"bytes,1,opt,name=org_id,json=orgId" json:"org_id,omitempty"`
	UserId    string                                     `protobuf:"bytes,2,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	ContentId string                                     `protobuf:"bytes,3,opt,name=content_id,json=contentId" json:"content_id,omitempty"`
	Tags      []*go_micro_srv_static.ContentCategoryItem `protobuf:"bytes,4,rep,name=tags" json:"tags,omitempty"`
	Created   int64                                      `protobuf:"varint,5,opt,name=created" json:"created,omitempty"`
	Updated   int64                                      `protobuf:"varint,6,opt,name=updated" json:"updated,omitempty"`
}

func (m *ContentDislikeSimilar) Reset()                    { *m = ContentDislikeSimilar{} }
func (m *ContentDislikeSimilar) String() string            { return proto.CompactTextString(m) }
func (*ContentDislikeSimilar) ProtoMessage()               {}
func (*ContentDislikeSimilar) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{89} }

func (m *ContentDislikeSimilar) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *ContentDislikeSimilar) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *ContentDislikeSimilar) GetContentId() string {
	if m != nil {
		return m.ContentId
	}
	return ""
}

func (m *ContentDislikeSimilar) GetTags() []*go_micro_srv_static.ContentCategoryItem {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *ContentDislikeSimilar) GetCreated() int64 {
	if m != nil {
		return m.Created
	}
	return 0
}

func (m *ContentDislikeSimilar) GetUpdated() int64 {
	if m != nil {
		return m.Updated
	}
	return 0
}

type ContentDislikeSimilarMessage struct {
	UserId    string                                     `protobuf:"bytes,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	ContentId string                                     `protobuf:"bytes,2,opt,name=content_id,json=contentId" json:"content_id,omitempty"`
	Tags      []*go_micro_srv_static.ContentCategoryItem `protobuf:"bytes,3,rep,name=tags" json:"tags,omitempty"`
}

func (m *ContentDislikeSimilarMessage) Reset()                    { *m = ContentDislikeSimilarMessage{} }
func (m *ContentDislikeSimilarMessage) String() string            { return proto.CompactTextString(m) }
func (*ContentDislikeSimilarMessage) ProtoMessage()               {}
func (*ContentDislikeSimilarMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{90} }

func (m *ContentDislikeSimilarMessage) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *ContentDislikeSimilarMessage) GetContentId() string {
	if m != nil {
		return m.ContentId
	}
	return ""
}

func (m *ContentDislikeSimilarMessage) GetTags() []*go_micro_srv_static.ContentCategoryItem {
	if m != nil {
		return m.Tags
	}
	return nil
}

type ContentBookmarkStatusMessage struct {
	UserId     string `protobuf:"bytes,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	ContentId  string `protobuf:"bytes,2,opt,name=content_id,json=contentId" json:"content_id,omitempty"`
	Bookmarked bool   `protobuf:"varint,3,opt,name=bookmarked" json:"bookmarked,omitempty"`
}

func (m *ContentBookmarkStatusMessage) Reset()                    { *m = ContentBookmarkStatusMessage{} }
func (m *ContentBookmarkStatusMessage) String() string            { return proto.CompactTextString(m) }
func (*ContentBookmarkStatusMessage) ProtoMessage()               {}
func (*ContentBookmarkStatusMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{91} }

func (m *ContentBookmarkStatusMessage) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *ContentBookmarkStatusMessage) GetContentId() string {
	if m != nil {
		return m.ContentId
	}
	return ""
}

func (m *ContentBookmarkStatusMessage) GetBookmarked() bool {
	if m != nil {
		return m.Bookmarked
	}
	return false
}

type UserPlan struct {
	Id          string                                    `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Name        string                                    `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	OrgId       string                                    `protobuf:"bytes,3,opt,name=org_id,json=orgId" json:"org_id,omitempty"`
	Pic         string                                    `protobuf:"bytes,4,opt,name=pic" json:"pic,omitempty"`
	Description string                                    `protobuf:"bytes,5,opt,name=description" json:"description,omitempty"`
	Created     int64                                     `protobuf:"varint,6,opt,name=created" json:"created,omitempty"`
	Updated     int64                                     `protobuf:"varint,7,opt,name=updated" json:"updated,omitempty"`
	TargetUser  string                                    `protobuf:"bytes,8,opt,name=targetUser" json:"targetUser,omitempty"`
	Plan        *go_micro_srv_plan.Plan                   `protobuf:"bytes,9,opt,name=plan" json:"plan,omitempty"`
	Goals       []*go_micro_srv_behaviour.Goal            `protobuf:"bytes,10,rep,name=goals" json:"goals,omitempty"`
	Duration    string                                    `protobuf:"bytes,11,opt,name=duration" json:"duration,omitempty"`
	Start       int64                                     `protobuf:"varint,12,opt,name=start" json:"start,omitempty"`
	End         int64                                     `protobuf:"varint,13,opt,name=end" json:"end,omitempty"`
	Creator     *go_micro_srv_user.User                   `protobuf:"bytes,14,opt,name=creator" json:"creator,omitempty"`
	Days        map[string]*go_micro_srv_static2.DayItems `protobuf:"bytes,15,rep,name=days" json:"days,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	ItemsCount  int64                                     `protobuf:"varint,16,opt,name=items_count,json=itemsCount" json:"items_count,omitempty"`
}

func (m *UserPlan) Reset()                    { *m = UserPlan{} }
func (m *UserPlan) String() string            { return proto.CompactTextString(m) }
func (*UserPlan) ProtoMessage()               {}
func (*UserPlan) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{92} }

func (m *UserPlan) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *UserPlan) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UserPlan) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *UserPlan) GetPic() string {
	if m != nil {
		return m.Pic
	}
	return ""
}

func (m *UserPlan) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *UserPlan) GetCreated() int64 {
	if m != nil {
		return m.Created
	}
	return 0
}

func (m *UserPlan) GetUpdated() int64 {
	if m != nil {
		return m.Updated
	}
	return 0
}

func (m *UserPlan) GetTargetUser() string {
	if m != nil {
		return m.TargetUser
	}
	return ""
}

func (m *UserPlan) GetPlan() *go_micro_srv_plan.Plan {
	if m != nil {
		return m.Plan
	}
	return nil
}

func (m *UserPlan) GetGoals() []*go_micro_srv_behaviour.Goal {
	if m != nil {
		return m.Goals
	}
	return nil
}

func (m *UserPlan) GetDuration() string {
	if m != nil {
		return m.Duration
	}
	return ""
}

func (m *UserPlan) GetStart() int64 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *UserPlan) GetEnd() int64 {
	if m != nil {
		return m.End
	}
	return 0
}

func (m *UserPlan) GetCreator() *go_micro_srv_user.User {
	if m != nil {
		return m.Creator
	}
	return nil
}

func (m *UserPlan) GetDays() map[string]*go_micro_srv_static2.DayItems {
	if m != nil {
		return m.Days
	}
	return nil
}

func (m *UserPlan) GetItemsCount() int64 {
	if m != nil {
		return m.ItemsCount
	}
	return 0
}

type CategoryCountResponse struct {
	DayNumber        string `protobuf:"bytes,1,opt,name=day_number,json=dayNumber" json:"day_number,omitempty"`
	CategoryId       string `protobuf:"bytes,2,opt,name=category_id,json=categoryId" json:"category_id,omitempty"`
	CategoryIconSlug string `protobuf:"bytes,3,opt,name=category_icon_slug,json=categoryIconSlug" json:"category_icon_slug,omitempty"`
	CategoryName     string `protobuf:"bytes,4,opt,name=category_name,json=categoryName" json:"category_name,omitempty"`
	ItemCount        int64  `protobuf:"varint,5,opt,name=item_count,json=itemCount" json:"item_count,omitempty"`
}

func (m *CategoryCountResponse) Reset()                    { *m = CategoryCountResponse{} }
func (m *CategoryCountResponse) String() string            { return proto.CompactTextString(m) }
func (*CategoryCountResponse) ProtoMessage()               {}
func (*CategoryCountResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{93} }

func (m *CategoryCountResponse) GetDayNumber() string {
	if m != nil {
		return m.DayNumber
	}
	return ""
}

func (m *CategoryCountResponse) GetCategoryId() string {
	if m != nil {
		return m.CategoryId
	}
	return ""
}

func (m *CategoryCountResponse) GetCategoryIconSlug() string {
	if m != nil {
		return m.CategoryIconSlug
	}
	return ""
}

func (m *CategoryCountResponse) GetCategoryName() string {
	if m != nil {
		return m.CategoryName
	}
	return ""
}

func (m *CategoryCountResponse) GetItemCount() int64 {
	if m != nil {
		return m.ItemCount
	}
	return 0
}

type SharedItem struct {
	Type string `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	Id   string `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
}

func (m *SharedItem) Reset()                    { *m = SharedItem{} }
func (m *SharedItem) String() string            { return proto.CompactTextString(m) }
func (*SharedItem) ProtoMessage()               {}
func (*SharedItem) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{94} }

func (m *SharedItem) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *SharedItem) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type ReceivedItemsRequest struct {
	Shared []*SharedItem `protobuf:"bytes,1,rep,name=shared" json:"shared,omitempty"`
	UserId string        `protobuf:"bytes,2,opt,name=user_id,json=userId" json:"user_id,omitempty"`
}

func (m *ReceivedItemsRequest) Reset()                    { *m = ReceivedItemsRequest{} }
func (m *ReceivedItemsRequest) String() string            { return proto.CompactTextString(m) }
func (*ReceivedItemsRequest) ProtoMessage()               {}
func (*ReceivedItemsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{95} }

func (m *ReceivedItemsRequest) GetShared() []*SharedItem {
	if m != nil {
		return m.Shared
	}
	return nil
}

func (m *ReceivedItemsRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

type ReceivedItemsResponse struct {
	Code    int64  `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Message string `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *ReceivedItemsResponse) Reset()                    { *m = ReceivedItemsResponse{} }
func (m *ReceivedItemsResponse) String() string            { return proto.CompactTextString(m) }
func (*ReceivedItemsResponse) ProtoMessage()               {}
func (*ReceivedItemsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{96} }

func (m *ReceivedItemsResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *ReceivedItemsResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type ReadGoalResponse struct {
	Data    *ReadGoalResponse_Data `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	Code    int64                  `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Message string                 `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *ReadGoalResponse) Reset()                    { *m = ReadGoalResponse{} }
func (m *ReadGoalResponse) String() string            { return proto.CompactTextString(m) }
func (*ReadGoalResponse) ProtoMessage()               {}
func (*ReadGoalResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{97} }

func (m *ReadGoalResponse) GetData() *ReadGoalResponse_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *ReadGoalResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *ReadGoalResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type ReadGoalResponse_Data struct {
	Detail *GoalDetail `protobuf:"bytes,1,opt,name=detail" json:"detail,omitempty"`
}

func (m *ReadGoalResponse_Data) Reset()                    { *m = ReadGoalResponse_Data{} }
func (m *ReadGoalResponse_Data) String() string            { return proto.CompactTextString(m) }
func (*ReadGoalResponse_Data) ProtoMessage()               {}
func (*ReadGoalResponse_Data) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{97, 0} }

func (m *ReadGoalResponse_Data) GetDetail() *GoalDetail {
	if m != nil {
		return m.Detail
	}
	return nil
}

type ReadChallengeResponse struct {
	Data    *ReadChallengeResponse_Data `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	Code    int64                       `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Message string                      `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *ReadChallengeResponse) Reset()                    { *m = ReadChallengeResponse{} }
func (m *ReadChallengeResponse) String() string            { return proto.CompactTextString(m) }
func (*ReadChallengeResponse) ProtoMessage()               {}
func (*ReadChallengeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{98} }

func (m *ReadChallengeResponse) GetData() *ReadChallengeResponse_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *ReadChallengeResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *ReadChallengeResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type ReadChallengeResponse_Data struct {
	Detail *ChallengeDetail `protobuf:"bytes,1,opt,name=detail" json:"detail,omitempty"`
}

func (m *ReadChallengeResponse_Data) Reset()                    { *m = ReadChallengeResponse_Data{} }
func (m *ReadChallengeResponse_Data) String() string            { return proto.CompactTextString(m) }
func (*ReadChallengeResponse_Data) ProtoMessage()               {}
func (*ReadChallengeResponse_Data) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{98, 0} }

func (m *ReadChallengeResponse_Data) GetDetail() *ChallengeDetail {
	if m != nil {
		return m.Detail
	}
	return nil
}

type ReadHabitResponse struct {
	Data    *ReadHabitResponse_Data `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	Code    int64                   `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Message string                  `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *ReadHabitResponse) Reset()                    { *m = ReadHabitResponse{} }
func (m *ReadHabitResponse) String() string            { return proto.CompactTextString(m) }
func (*ReadHabitResponse) ProtoMessage()               {}
func (*ReadHabitResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{99} }

func (m *ReadHabitResponse) GetData() *ReadHabitResponse_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *ReadHabitResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *ReadHabitResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type ReadHabitResponse_Data struct {
	Detail *HabitDetail `protobuf:"bytes,1,opt,name=detail" json:"detail,omitempty"`
}

func (m *ReadHabitResponse_Data) Reset()                    { *m = ReadHabitResponse_Data{} }
func (m *ReadHabitResponse_Data) String() string            { return proto.CompactTextString(m) }
func (*ReadHabitResponse_Data) ProtoMessage()               {}
func (*ReadHabitResponse_Data) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{99, 0} }

func (m *ReadHabitResponse_Data) GetDetail() *HabitDetail {
	if m != nil {
		return m.Detail
	}
	return nil
}

type ReadContentResponse struct {
	Data    *ReadContentResponse_Data `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	Code    int64                     `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Message string                    `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *ReadContentResponse) Reset()                    { *m = ReadContentResponse{} }
func (m *ReadContentResponse) String() string            { return proto.CompactTextString(m) }
func (*ReadContentResponse) ProtoMessage()               {}
func (*ReadContentResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{100} }

func (m *ReadContentResponse) GetData() *ReadContentResponse_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *ReadContentResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *ReadContentResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type ReadContentResponse_Data struct {
	Detail *ContentDetail `protobuf:"bytes,1,opt,name=detail" json:"detail,omitempty"`
}

func (m *ReadContentResponse_Data) Reset()                    { *m = ReadContentResponse_Data{} }
func (m *ReadContentResponse_Data) String() string            { return proto.CompactTextString(m) }
func (*ReadContentResponse_Data) ProtoMessage()               {}
func (*ReadContentResponse_Data) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{100, 0} }

func (m *ReadContentResponse_Data) GetDetail() *ContentDetail {
	if m != nil {
		return m.Detail
	}
	return nil
}

type GoalDetail struct {
	GoalId      string                                 `protobuf:"bytes,1,opt,name=goal_id,json=goalId" json:"goal_id,omitempty"`
	Title       string                                 `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
	Summary     string                                 `protobuf:"bytes,3,opt,name=summary" json:"summary,omitempty"`
	Description string                                 `protobuf:"bytes,4,opt,name=description" json:"description,omitempty"`
	Tags        []string                               `protobuf:"bytes,5,rep,name=tags" json:"tags,omitempty"`
	Image       string                                 `protobuf:"bytes,6,opt,name=image" json:"image,omitempty"`
	Target      *go_micro_srv_static.Target            `protobuf:"bytes,7,opt,name=target" json:"target,omitempty"`
	SharedBy    *go_micro_srv_user.User                `protobuf:"bytes,8,opt,name=shared_by,json=sharedBy" json:"shared_by,omitempty"`
	Current     int64                                  `protobuf:"varint,9,opt,name=current" json:"current,omitempty"`
	Duration    string                                 `protobuf:"bytes,10,opt,name=duration" json:"duration,omitempty"`
	Source      string                                 `protobuf:"bytes,11,opt,name=source" json:"source,omitempty"`
	Challenges  []*go_micro_srv_behaviour.Challenge    `protobuf:"bytes,12,rep,name=challenges" json:"challenges,omitempty"`
	Habits      []*go_micro_srv_behaviour.Habit        `protobuf:"bytes,13,rep,name=habits" json:"habits,omitempty"`
	Todos       *go_micro_srv_todo.Todo                `protobuf:"bytes,14,opt,name=todos" json:"todos,omitempty"`
	Category    *go_micro_srv_static.BehaviourCategory `protobuf:"bytes,15,opt,name=category" json:"category,omitempty"`
}

func (m *GoalDetail) Reset()                    { *m = GoalDetail{} }
func (m *GoalDetail) String() string            { return proto.CompactTextString(m) }
func (*GoalDetail) ProtoMessage()               {}
func (*GoalDetail) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{101} }

func (m *GoalDetail) GetGoalId() string {
	if m != nil {
		return m.GoalId
	}
	return ""
}

func (m *GoalDetail) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *GoalDetail) GetSummary() string {
	if m != nil {
		return m.Summary
	}
	return ""
}

func (m *GoalDetail) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *GoalDetail) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *GoalDetail) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *GoalDetail) GetTarget() *go_micro_srv_static.Target {
	if m != nil {
		return m.Target
	}
	return nil
}

func (m *GoalDetail) GetSharedBy() *go_micro_srv_user.User {
	if m != nil {
		return m.SharedBy
	}
	return nil
}

func (m *GoalDetail) GetCurrent() int64 {
	if m != nil {
		return m.Current
	}
	return 0
}

func (m *GoalDetail) GetDuration() string {
	if m != nil {
		return m.Duration
	}
	return ""
}

func (m *GoalDetail) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *GoalDetail) GetChallenges() []*go_micro_srv_behaviour.Challenge {
	if m != nil {
		return m.Challenges
	}
	return nil
}

func (m *GoalDetail) GetHabits() []*go_micro_srv_behaviour.Habit {
	if m != nil {
		return m.Habits
	}
	return nil
}

func (m *GoalDetail) GetTodos() *go_micro_srv_todo.Todo {
	if m != nil {
		return m.Todos
	}
	return nil
}

func (m *GoalDetail) GetCategory() *go_micro_srv_static.BehaviourCategory {
	if m != nil {
		return m.Category
	}
	return nil
}

type ChallengeDetail struct {
	ChallengeId string                                 `protobuf:"bytes,1,opt,name=challenge_id,json=challengeId" json:"challenge_id,omitempty"`
	Title       string                                 `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
	Summary     string                                 `protobuf:"bytes,3,opt,name=summary" json:"summary,omitempty"`
	Description string                                 `protobuf:"bytes,4,opt,name=description" json:"description,omitempty"`
	Tags        []string                               `protobuf:"bytes,5,rep,name=tags" json:"tags,omitempty"`
	Image       string                                 `protobuf:"bytes,6,opt,name=image" json:"image,omitempty"`
	Target      *go_micro_srv_static.Target            `protobuf:"bytes,7,opt,name=target" json:"target,omitempty"`
	SharedBy    *go_micro_srv_user.User                `protobuf:"bytes,8,opt,name=shared_by,json=sharedBy" json:"shared_by,omitempty"`
	Current     int64                                  `protobuf:"varint,9,opt,name=current" json:"current,omitempty"`
	Duration    string                                 `protobuf:"bytes,10,opt,name=duration" json:"duration,omitempty"`
	Source      string                                 `protobuf:"bytes,11,opt,name=source" json:"source,omitempty"`
	Habits      []*go_micro_srv_behaviour.Habit        `protobuf:"bytes,12,rep,name=habits" json:"habits,omitempty"`
	Todos       *go_micro_srv_todo.Todo                `protobuf:"bytes,13,opt,name=todos" json:"todos,omitempty"`
	Category    *go_micro_srv_static.BehaviourCategory `protobuf:"bytes,14,opt,name=category" json:"category,omitempty"`
}

func (m *ChallengeDetail) Reset()                    { *m = ChallengeDetail{} }
func (m *ChallengeDetail) String() string            { return proto.CompactTextString(m) }
func (*ChallengeDetail) ProtoMessage()               {}
func (*ChallengeDetail) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{102} }

func (m *ChallengeDetail) GetChallengeId() string {
	if m != nil {
		return m.ChallengeId
	}
	return ""
}

func (m *ChallengeDetail) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *ChallengeDetail) GetSummary() string {
	if m != nil {
		return m.Summary
	}
	return ""
}

func (m *ChallengeDetail) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *ChallengeDetail) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *ChallengeDetail) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *ChallengeDetail) GetTarget() *go_micro_srv_static.Target {
	if m != nil {
		return m.Target
	}
	return nil
}

func (m *ChallengeDetail) GetSharedBy() *go_micro_srv_user.User {
	if m != nil {
		return m.SharedBy
	}
	return nil
}

func (m *ChallengeDetail) GetCurrent() int64 {
	if m != nil {
		return m.Current
	}
	return 0
}

func (m *ChallengeDetail) GetDuration() string {
	if m != nil {
		return m.Duration
	}
	return ""
}

func (m *ChallengeDetail) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *ChallengeDetail) GetHabits() []*go_micro_srv_behaviour.Habit {
	if m != nil {
		return m.Habits
	}
	return nil
}

func (m *ChallengeDetail) GetTodos() *go_micro_srv_todo.Todo {
	if m != nil {
		return m.Todos
	}
	return nil
}

func (m *ChallengeDetail) GetCategory() *go_micro_srv_static.BehaviourCategory {
	if m != nil {
		return m.Category
	}
	return nil
}

type HabitDetail struct {
	HabitId     string                                 `protobuf:"bytes,1,opt,name=habit_id,json=habitId" json:"habit_id,omitempty"`
	Title       string                                 `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
	Summary     string                                 `protobuf:"bytes,3,opt,name=summary" json:"summary,omitempty"`
	Description string                                 `protobuf:"bytes,4,opt,name=description" json:"description,omitempty"`
	Tags        []string                               `protobuf:"bytes,5,rep,name=tags" json:"tags,omitempty"`
	Image       string                                 `protobuf:"bytes,6,opt,name=image" json:"image,omitempty"`
	Target      *go_micro_srv_static.Target            `protobuf:"bytes,7,opt,name=target" json:"target,omitempty"`
	SharedBy    *go_micro_srv_user.User                `protobuf:"bytes,8,opt,name=shared_by,json=sharedBy" json:"shared_by,omitempty"`
	Current     int64                                  `protobuf:"varint,9,opt,name=current" json:"current,omitempty"`
	Duration    string                                 `protobuf:"bytes,10,opt,name=duration" json:"duration,omitempty"`
	Source      string                                 `protobuf:"bytes,11,opt,name=source" json:"source,omitempty"`
	Todos       *go_micro_srv_todo.Todo                `protobuf:"bytes,12,opt,name=todos" json:"todos,omitempty"`
	Category    *go_micro_srv_static.BehaviourCategory `protobuf:"bytes,13,opt,name=category" json:"category,omitempty"`
}

func (m *HabitDetail) Reset()                    { *m = HabitDetail{} }
func (m *HabitDetail) String() string            { return proto.CompactTextString(m) }
func (*HabitDetail) ProtoMessage()               {}
func (*HabitDetail) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{103} }

func (m *HabitDetail) GetHabitId() string {
	if m != nil {
		return m.HabitId
	}
	return ""
}

func (m *HabitDetail) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *HabitDetail) GetSummary() string {
	if m != nil {
		return m.Summary
	}
	return ""
}

func (m *HabitDetail) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *HabitDetail) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *HabitDetail) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *HabitDetail) GetTarget() *go_micro_srv_static.Target {
	if m != nil {
		return m.Target
	}
	return nil
}

func (m *HabitDetail) GetSharedBy() *go_micro_srv_user.User {
	if m != nil {
		return m.SharedBy
	}
	return nil
}

func (m *HabitDetail) GetCurrent() int64 {
	if m != nil {
		return m.Current
	}
	return 0
}

func (m *HabitDetail) GetDuration() string {
	if m != nil {
		return m.Duration
	}
	return ""
}

func (m *HabitDetail) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *HabitDetail) GetTodos() *go_micro_srv_todo.Todo {
	if m != nil {
		return m.Todos
	}
	return nil
}

func (m *HabitDetail) GetCategory() *go_micro_srv_static.BehaviourCategory {
	if m != nil {
		return m.Category
	}
	return nil
}

type ContentDetail struct {
	Id         string                           `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Image      string                           `protobuf:"bytes,2,opt,name=image" json:"image,omitempty"`
	Title      string                           `protobuf:"bytes,3,opt,name=title" json:"title,omitempty"`
	Summary    string                           `protobuf:"bytes,4,opt,name=summary" json:"summary,omitempty"`
	Category   string                           `protobuf:"bytes,5,opt,name=category" json:"category,omitempty"`
	CategoryId string                           `protobuf:"bytes,6,opt,name=category_id,json=categoryId" json:"category_id,omitempty"`
	Actions    []*go_micro_srv_static.Action    `protobuf:"bytes,7,rep,name=actions" json:"actions,omitempty"`
	Type       *go_micro_srv_static.ContentType `protobuf:"bytes,8,opt,name=type" json:"type,omitempty"`
	Source     *go_micro_srv_content.Source     `protobuf:"bytes,9,opt,name=source" json:"source,omitempty"`
	SharedBy   *go_micro_srv_user.User          `protobuf:"bytes,10,opt,name=shared_by,json=sharedBy" json:"shared_by,omitempty"`
	Item       *google_protobuf.Any             `protobuf:"bytes,11,opt,name=item" json:"item,omitempty"`
	Rating     int64                            `protobuf:"varint,12,opt,name=rating" json:"rating,omitempty"`
	Bookmarked bool                             `protobuf:"varint,13,opt,name=bookmarked" json:"bookmarked,omitempty"`
}

func (m *ContentDetail) Reset()                    { *m = ContentDetail{} }
func (m *ContentDetail) String() string            { return proto.CompactTextString(m) }
func (*ContentDetail) ProtoMessage()               {}
func (*ContentDetail) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{104} }

func (m *ContentDetail) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ContentDetail) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *ContentDetail) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *ContentDetail) GetSummary() string {
	if m != nil {
		return m.Summary
	}
	return ""
}

func (m *ContentDetail) GetCategory() string {
	if m != nil {
		return m.Category
	}
	return ""
}

func (m *ContentDetail) GetCategoryId() string {
	if m != nil {
		return m.CategoryId
	}
	return ""
}

func (m *ContentDetail) GetActions() []*go_micro_srv_static.Action {
	if m != nil {
		return m.Actions
	}
	return nil
}

func (m *ContentDetail) GetType() *go_micro_srv_static.ContentType {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *ContentDetail) GetSource() *go_micro_srv_content.Source {
	if m != nil {
		return m.Source
	}
	return nil
}

func (m *ContentDetail) GetSharedBy() *go_micro_srv_user.User {
	if m != nil {
		return m.SharedBy
	}
	return nil
}

func (m *ContentDetail) GetItem() *google_protobuf.Any {
	if m != nil {
		return m.Item
	}
	return nil
}

func (m *ContentDetail) GetRating() int64 {
	if m != nil {
		return m.Rating
	}
	return 0
}

func (m *ContentDetail) GetBookmarked() bool {
	if m != nil {
		return m.Bookmarked
	}
	return false
}

type UpsertOperation struct {
	Type string `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
}

func (m *UpsertOperation) Reset()                    { *m = UpsertOperation{} }
func (m *UpsertOperation) String() string            { return proto.CompactTextString(m) }
func (*UpsertOperation) ProtoMessage()               {}
func (*UpsertOperation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{105} }

func (m *UpsertOperation) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

type SearchBookmarkRequest struct {
	OrgId       string `protobuf:"bytes,1,opt,name=org_id,json=orgId" json:"org_id,omitempty"`
	TeamId      string `protobuf:"bytes,2,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
	Limit       int64  `protobuf:"varint,3,opt,name=limit" json:"limit,omitempty"`
	Offset      int64  `protobuf:"varint,4,opt,name=offset" json:"offset,omitempty"`
	Title       string `protobuf:"bytes,5,opt,name=title" json:"title,omitempty"`
	Summary     string `protobuf:"bytes,6,opt,name=summary" json:"summary,omitempty"`
	Description string `protobuf:"bytes,7,opt,name=description" json:"description,omitempty"`
	UserId      string `protobuf:"bytes,8,opt,name=user_id,json=userId" json:"user_id,omitempty"`
}

func (m *SearchBookmarkRequest) Reset()                    { *m = SearchBookmarkRequest{} }
func (m *SearchBookmarkRequest) String() string            { return proto.CompactTextString(m) }
func (*SearchBookmarkRequest) ProtoMessage()               {}
func (*SearchBookmarkRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{106} }

func (m *SearchBookmarkRequest) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *SearchBookmarkRequest) GetTeamId() string {
	if m != nil {
		return m.TeamId
	}
	return ""
}

func (m *SearchBookmarkRequest) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *SearchBookmarkRequest) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *SearchBookmarkRequest) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *SearchBookmarkRequest) GetSummary() string {
	if m != nil {
		return m.Summary
	}
	return ""
}

func (m *SearchBookmarkRequest) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *SearchBookmarkRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func init() {
	proto.RegisterType((*CreateBookmarkRequest)(nil), "go.micro.srv.userapp.CreateBookmarkRequest")
	proto.RegisterType((*CreateBookmarkResponse)(nil), "go.micro.srv.userapp.CreateBookmarkResponse")
	proto.RegisterType((*CreateBookmarkResponse_Data)(nil), "go.micro.srv.userapp.CreateBookmarkResponse.Data")
	proto.RegisterType((*ReadBookmarkContentRequest)(nil), "go.micro.srv.userapp.ReadBookmarkContentRequest")
	proto.RegisterType((*ReadBookmarkContentResponse)(nil), "go.micro.srv.userapp.ReadBookmarkContentResponse")
	proto.RegisterType((*ReadBookmarkContentResponse_Data)(nil), "go.micro.srv.userapp.ReadBookmarkContentResponse.Data")
	proto.RegisterType((*ReadBookmarkContentCategorysRequest)(nil), "go.micro.srv.userapp.ReadBookmarkContentCategorysRequest")
	proto.RegisterType((*ReadBookmarkContentCategorysResponse)(nil), "go.micro.srv.userapp.ReadBookmarkContentCategorysResponse")
	proto.RegisterType((*ReadBookmarkContentCategorysResponse_Data)(nil), "go.micro.srv.userapp.ReadBookmarkContentCategorysResponse.Data")
	proto.RegisterType((*ReadBookmarkByCategoryRequest)(nil), "go.micro.srv.userapp.ReadBookmarkByCategoryRequest")
	proto.RegisterType((*ReadBookmarkByCategoryResponse)(nil), "go.micro.srv.userapp.ReadBookmarkByCategoryResponse")
	proto.RegisterType((*ReadBookmarkByCategoryResponse_Data)(nil), "go.micro.srv.userapp.ReadBookmarkByCategoryResponse.Data")
	proto.RegisterType((*DeleteBookmarkRequest)(nil), "go.micro.srv.userapp.DeleteBookmarkRequest")
	proto.RegisterType((*DeleteBookmarkResponse)(nil), "go.micro.srv.userapp.DeleteBookmarkResponse")
	proto.RegisterType((*GetSharedPlanRequest)(nil), "go.micro.srv.userapp.GetSharedPlanRequest")
	proto.RegisterType((*GetSharedPlanResponse)(nil), "go.micro.srv.userapp.GetSharedPlanResponse")
	proto.RegisterType((*GetSharedPlanResponse_Data)(nil), "go.micro.srv.userapp.GetSharedPlanResponse.Data")
	proto.RegisterType((*GetSharedSurveyRequest)(nil), "go.micro.srv.userapp.GetSharedSurveyRequest")
	proto.RegisterType((*GetSharedSurveyResponse)(nil), "go.micro.srv.userapp.GetSharedSurveyResponse")
	proto.RegisterType((*GetSharedSurveyResponse_Data)(nil), "go.micro.srv.userapp.GetSharedSurveyResponse.Data")
	proto.RegisterType((*GetSharedContentRequest)(nil), "go.micro.srv.userapp.GetSharedContentRequest")
	proto.RegisterType((*GetSharedContentResponse)(nil), "go.micro.srv.userapp.GetSharedContentResponse")
	proto.RegisterType((*GetSharedContentResponse_Data)(nil), "go.micro.srv.userapp.GetSharedContentResponse.Data")
	proto.RegisterType((*GetSharedGoalRequest)(nil), "go.micro.srv.userapp.GetSharedGoalRequest")
	proto.RegisterType((*GetSharedGoalResponse)(nil), "go.micro.srv.userapp.GetSharedGoalResponse")
	proto.RegisterType((*GetSharedGoalResponse_Data)(nil), "go.micro.srv.userapp.GetSharedGoalResponse.Data")
	proto.RegisterType((*GetSharedChallengeRequest)(nil), "go.micro.srv.userapp.GetSharedChallengeRequest")
	proto.RegisterType((*GetSharedChallengeResponse)(nil), "go.micro.srv.userapp.GetSharedChallengeResponse")
	proto.RegisterType((*GetSharedChallengeResponse_Data)(nil), "go.micro.srv.userapp.GetSharedChallengeResponse.Data")
	proto.RegisterType((*GetSharedHabitRequest)(nil), "go.micro.srv.userapp.GetSharedHabitRequest")
	proto.RegisterType((*GetSharedHabitResponse)(nil), "go.micro.srv.userapp.GetSharedHabitResponse")
	proto.RegisterType((*GetSharedHabitResponse_Data)(nil), "go.micro.srv.userapp.GetSharedHabitResponse.Data")
	proto.RegisterType((*SignupToGoalRequest)(nil), "go.micro.srv.userapp.SignupToGoalRequest")
	proto.RegisterType((*SignupToGoalResponse)(nil), "go.micro.srv.userapp.SignupToGoalResponse")
	proto.RegisterType((*SignupToGoalResponse_Data)(nil), "go.micro.srv.userapp.SignupToGoalResponse.Data")
	proto.RegisterType((*ListGoalRequest)(nil), "go.micro.srv.userapp.ListGoalRequest")
	proto.RegisterType((*ListGoalResponse)(nil), "go.micro.srv.userapp.ListGoalResponse")
	proto.RegisterType((*ListGoalResponse_Data)(nil), "go.micro.srv.userapp.ListGoalResponse.Data")
	proto.RegisterType((*SignupToChallengeRequest)(nil), "go.micro.srv.userapp.SignupToChallengeRequest")
	proto.RegisterType((*SignupToChallengeResponse)(nil), "go.micro.srv.userapp.SignupToChallengeResponse")
	proto.RegisterType((*SignupToChallengeResponse_Data)(nil), "go.micro.srv.userapp.SignupToChallengeResponse.Data")
	proto.RegisterType((*ListChallengeRequest)(nil), "go.micro.srv.userapp.ListChallengeRequest")
	proto.RegisterType((*ListChallengeResponse)(nil), "go.micro.srv.userapp.ListChallengeResponse")
	proto.RegisterType((*ListChallengeResponse_Data)(nil), "go.micro.srv.userapp.ListChallengeResponse.Data")
	proto.RegisterType((*SignupToHabitRequest)(nil), "go.micro.srv.userapp.SignupToHabitRequest")
	proto.RegisterType((*SignupToHabitResponse)(nil), "go.micro.srv.userapp.SignupToHabitResponse")
	proto.RegisterType((*SignupToHabitResponse_Data)(nil), "go.micro.srv.userapp.SignupToHabitResponse.Data")
	proto.RegisterType((*ListHabitRequest)(nil), "go.micro.srv.userapp.ListHabitRequest")
	proto.RegisterType((*ListHabitResponse)(nil), "go.micro.srv.userapp.ListHabitResponse")
	proto.RegisterType((*ListHabitResponse_Data)(nil), "go.micro.srv.userapp.ListHabitResponse.Data")
	proto.RegisterType((*ListMarkersRequest)(nil), "go.micro.srv.userapp.ListMarkersRequest")
	proto.RegisterType((*ListMarkersResponse)(nil), "go.micro.srv.userapp.ListMarkersResponse")
	proto.RegisterType((*ListMarkersResponse_Data)(nil), "go.micro.srv.userapp.ListMarkersResponse.Data")
	proto.RegisterType((*GetPendingSharedActionsRequest)(nil), "go.micro.srv.userapp.GetPendingSharedActionsRequest")
	proto.RegisterType((*GetPendingSharedActionsResponse)(nil), "go.micro.srv.userapp.GetPendingSharedActionsResponse")
	proto.RegisterType((*GetPendingSharedActionsResponse_Data)(nil), "go.micro.srv.userapp.GetPendingSharedActionsResponse.Data")
	proto.RegisterType((*GetGoalProgressRequest)(nil), "go.micro.srv.userapp.GetGoalProgressRequest")
	proto.RegisterType((*GetGoalProgressResponse)(nil), "go.micro.srv.userapp.GetGoalProgressResponse")
	proto.RegisterType((*GetGoalProgressResponse_Data)(nil), "go.micro.srv.userapp.GetGoalProgressResponse.Data")
	proto.RegisterType((*GetCurrentChallengesWithCountRequest)(nil), "go.micro.srv.userapp.GetCurrentChallengesWithCountRequest")
	proto.RegisterType((*GetCurrentChallengesWithCountResponse)(nil), "go.micro.srv.userapp.GetCurrentChallengesWithCountResponse")
	proto.RegisterType((*GetCurrentChallengesWithCountResponse_Data)(nil), "go.micro.srv.userapp.GetCurrentChallengesWithCountResponse.Data")
	proto.RegisterType((*GetCurrentHabitsWithCountRequest)(nil), "go.micro.srv.userapp.GetCurrentHabitsWithCountRequest")
	proto.RegisterType((*GetCurrentHabitsWithCountResponse)(nil), "go.micro.srv.userapp.GetCurrentHabitsWithCountResponse")
	proto.RegisterType((*GetCurrentHabitsWithCountResponse_Data)(nil), "go.micro.srv.userapp.GetCurrentHabitsWithCountResponse.Data")
	proto.RegisterType((*SaveRateForContentRequest)(nil), "go.micro.srv.userapp.SaveRateForContentRequest")
	proto.RegisterType((*SaveRateForContentResponse)(nil), "go.micro.srv.userapp.SaveRateForContentResponse")
	proto.RegisterType((*SaveRateForContentResponse_Data)(nil), "go.micro.srv.userapp.SaveRateForContentResponse.Data")
	proto.RegisterType((*DislikeForContentRequest)(nil), "go.micro.srv.userapp.DislikeForContentRequest")
	proto.RegisterType((*DislikeForContentResponse)(nil), "go.micro.srv.userapp.DislikeForContentResponse")
	proto.RegisterType((*DislikeForContentResponse_Data)(nil), "go.micro.srv.userapp.DislikeForContentResponse.Data")
	proto.RegisterType((*DislikeForSimilarContentRequest)(nil), "go.micro.srv.userapp.DislikeForSimilarContentRequest")
	proto.RegisterType((*DislikeForSimilarContentResponse)(nil), "go.micro.srv.userapp.DislikeForSimilarContentResponse")
	proto.RegisterType((*DislikeForSimilarContentResponse_Data)(nil), "go.micro.srv.userapp.DislikeForSimilarContentResponse.Data")
	proto.RegisterType((*SaveUserDetailsRequest)(nil), "go.micro.srv.userapp.SaveUserDetailsRequest")
	proto.RegisterType((*SaveUserDetailsResponse)(nil), "go.micro.srv.userapp.SaveUserDetailsResponse")
	proto.RegisterType((*SaveUserDetailsResponse_Data)(nil), "go.micro.srv.userapp.SaveUserDetailsResponse.Data")
	proto.RegisterType((*SaveUserFeedbackRequest)(nil), "go.micro.srv.userapp.SaveUserFeedbackRequest")
	proto.RegisterType((*SaveUserFeedbackResponse)(nil), "go.micro.srv.userapp.SaveUserFeedbackResponse")
	proto.RegisterType((*SaveUserFeedbackResponse_Data)(nil), "go.micro.srv.userapp.SaveUserFeedbackResponse.Data")
	proto.RegisterType((*JoinUserPlanRequest)(nil), "go.micro.srv.userapp.JoinUserPlanRequest")
	proto.RegisterType((*JoinUserPlanResponse)(nil), "go.micro.srv.userapp.JoinUserPlanResponse")
	proto.RegisterType((*JoinUserPlanResponse_Data)(nil), "go.micro.srv.userapp.JoinUserPlanResponse.Data")
	proto.RegisterType((*CreateUserPlanRequest)(nil), "go.micro.srv.userapp.CreateUserPlanRequest")
	proto.RegisterType((*CreateUserPlanResponse)(nil), "go.micro.srv.userapp.CreateUserPlanResponse")
	proto.RegisterType((*CreateUserPlanResponse_Data)(nil), "go.micro.srv.userapp.CreateUserPlanResponse.Data")
	proto.RegisterType((*GetUserPlanRequest)(nil), "go.micro.srv.userapp.GetUserPlanRequest")
	proto.RegisterType((*GetUserPlanResponse)(nil), "go.micro.srv.userapp.GetUserPlanResponse")
	proto.RegisterType((*GetUserPlanResponse_Data)(nil), "go.micro.srv.userapp.GetUserPlanResponse.Data")
	proto.RegisterType((*UpdateUserPlanRequest)(nil), "go.micro.srv.userapp.UpdateUserPlanRequest")
	proto.RegisterType((*UpdateUserPlanResponse)(nil), "go.micro.srv.userapp.UpdateUserPlanResponse")
	proto.RegisterType((*UpdateUserPlanResponse_Data)(nil), "go.micro.srv.userapp.UpdateUserPlanResponse.Data")
	proto.RegisterType((*GetPlanItemsCountByCategoryRequest)(nil), "go.micro.srv.userapp.GetPlanItemsCountByCategoryRequest")
	proto.RegisterType((*GetPlanItemsCountByCategoryResponse)(nil), "go.micro.srv.userapp.GetPlanItemsCountByCategoryResponse")
	proto.RegisterType((*GetPlanItemsCountByCategoryResponse_Data)(nil), "go.micro.srv.userapp.GetPlanItemsCountByCategoryResponse.Data")
	proto.RegisterType((*GetPlanItemsCountByDayRequest)(nil), "go.micro.srv.userapp.GetPlanItemsCountByDayRequest")
	proto.RegisterType((*GetPlanItemsCountByDayResponse)(nil), "go.micro.srv.userapp.GetPlanItemsCountByDayResponse")
	proto.RegisterType((*GetPlanItemsCountByDayResponse_Data)(nil), "go.micro.srv.userapp.GetPlanItemsCountByDayResponse.Data")
	proto.RegisterType((*GetPlanItemsCountByCategoryAndDayRequest)(nil), "go.micro.srv.userapp.GetPlanItemsCountByCategoryAndDayRequest")
	proto.RegisterType((*GetPlanItemsCountByCategoryAndDayResponse)(nil), "go.micro.srv.userapp.GetPlanItemsCountByCategoryAndDayResponse")
	proto.RegisterType((*GetPlanItemsCountByCategoryAndDayResponse_Data)(nil), "go.micro.srv.userapp.GetPlanItemsCountByCategoryAndDayResponse.Data")
	proto.RegisterType((*Bookmark)(nil), "go.micro.srv.userapp.Bookmark")
	proto.RegisterType((*BookmarkContent)(nil), "go.micro.srv.userapp.BookmarkContent")
	proto.RegisterType((*SharedSurvey)(nil), "go.micro.srv.userapp.SharedSurvey")
	proto.RegisterType((*SharedPlan)(nil), "go.micro.srv.userapp.SharedPlan")
	proto.RegisterType((*SharedGoal)(nil), "go.micro.srv.userapp.SharedGoal")
	proto.RegisterType((*SharedHabit)(nil), "go.micro.srv.userapp.SharedHabit")
	proto.RegisterType((*SharedChallenge)(nil), "go.micro.srv.userapp.SharedChallenge")
	proto.RegisterType((*JoinGoal)(nil), "go.micro.srv.userapp.JoinGoal")
	proto.RegisterType((*JoinChallenge)(nil), "go.micro.srv.userapp.JoinChallenge")
	proto.RegisterType((*JoinHabit)(nil), "go.micro.srv.userapp.JoinHabit")
	proto.RegisterType((*JoinGoalResponse)(nil), "go.micro.srv.userapp.JoinGoalResponse")
	proto.RegisterType((*JoinChallengeResponse)(nil), "go.micro.srv.userapp.JoinChallengeResponse")
	proto.RegisterType((*JoinHabitResponse)(nil), "go.micro.srv.userapp.JoinHabitResponse")
	proto.RegisterType((*MarkerResponse)(nil), "go.micro.srv.userapp.MarkerResponse")
	proto.RegisterType((*GoalProgressResponse)(nil), "go.micro.srv.userapp.GoalProgressResponse")
	proto.RegisterType((*ChallengeCountResponse)(nil), "go.micro.srv.userapp.ChallengeCountResponse")
	proto.RegisterType((*HabitCountResponse)(nil), "go.micro.srv.userapp.HabitCountResponse")
	proto.RegisterType((*ContentRating)(nil), "go.micro.srv.userapp.ContentRating")
	proto.RegisterType((*ContentRatingMessage)(nil), "go.micro.srv.userapp.ContentRatingMessage")
	proto.RegisterType((*ContentDislike)(nil), "go.micro.srv.userapp.ContentDislike")
	proto.RegisterType((*ContentDislikeMessage)(nil), "go.micro.srv.userapp.ContentDislikeMessage")
	proto.RegisterType((*ContentDislikeSimilar)(nil), "go.micro.srv.userapp.ContentDislikeSimilar")
	proto.RegisterType((*ContentDislikeSimilarMessage)(nil), "go.micro.srv.userapp.ContentDislikeSimilarMessage")
	proto.RegisterType((*ContentBookmarkStatusMessage)(nil), "go.micro.srv.userapp.ContentBookmarkStatusMessage")
	proto.RegisterType((*UserPlan)(nil), "go.micro.srv.userapp.UserPlan")
	proto.RegisterType((*CategoryCountResponse)(nil), "go.micro.srv.userapp.CategoryCountResponse")
	proto.RegisterType((*SharedItem)(nil), "go.micro.srv.userapp.SharedItem")
	proto.RegisterType((*ReceivedItemsRequest)(nil), "go.micro.srv.userapp.ReceivedItemsRequest")
	proto.RegisterType((*ReceivedItemsResponse)(nil), "go.micro.srv.userapp.ReceivedItemsResponse")
	proto.RegisterType((*ReadGoalResponse)(nil), "go.micro.srv.userapp.ReadGoalResponse")
	proto.RegisterType((*ReadGoalResponse_Data)(nil), "go.micro.srv.userapp.ReadGoalResponse.Data")
	proto.RegisterType((*ReadChallengeResponse)(nil), "go.micro.srv.userapp.ReadChallengeResponse")
	proto.RegisterType((*ReadChallengeResponse_Data)(nil), "go.micro.srv.userapp.ReadChallengeResponse.Data")
	proto.RegisterType((*ReadHabitResponse)(nil), "go.micro.srv.userapp.ReadHabitResponse")
	proto.RegisterType((*ReadHabitResponse_Data)(nil), "go.micro.srv.userapp.ReadHabitResponse.Data")
	proto.RegisterType((*ReadContentResponse)(nil), "go.micro.srv.userapp.ReadContentResponse")
	proto.RegisterType((*ReadContentResponse_Data)(nil), "go.micro.srv.userapp.ReadContentResponse.Data")
	proto.RegisterType((*GoalDetail)(nil), "go.micro.srv.userapp.GoalDetail")
	proto.RegisterType((*ChallengeDetail)(nil), "go.micro.srv.userapp.ChallengeDetail")
	proto.RegisterType((*HabitDetail)(nil), "go.micro.srv.userapp.HabitDetail")
	proto.RegisterType((*ContentDetail)(nil), "go.micro.srv.userapp.ContentDetail")
	proto.RegisterType((*UpsertOperation)(nil), "go.micro.srv.userapp.UpsertOperation")
	proto.RegisterType((*SearchBookmarkRequest)(nil), "go.micro.srv.userapp.SearchBookmarkRequest")
	proto.RegisterEnum("go.micro.srv.userapp.ActionStatus", ActionStatus_name, ActionStatus_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for UserAppService service

type UserAppServiceClient interface {
	CreateBookmark(ctx context.Context, in *CreateBookmarkRequest, opts ...client.CallOption) (*CreateBookmarkResponse, error)
	ReadBookmarkContents(ctx context.Context, in *ReadBookmarkContentRequest, opts ...client.CallOption) (*ReadBookmarkContentResponse, error)
	ReadBookmarkContentCategorys(ctx context.Context, in *ReadBookmarkContentCategorysRequest, opts ...client.CallOption) (*ReadBookmarkContentCategorysResponse, error)
	ReadBookmarkByCategory(ctx context.Context, in *ReadBookmarkByCategoryRequest, opts ...client.CallOption) (*ReadBookmarkByCategoryResponse, error)
	DeleteBookmark(ctx context.Context, in *DeleteBookmarkRequest, opts ...client.CallOption) (*DeleteBookmarkResponse, error)
	SearchBookmarks(ctx context.Context, in *SearchBookmarkRequest, opts ...client.CallOption) (*go_micro_srv_user.GetShareableContentResponse, error)
	GetSharedContent(ctx context.Context, in *GetSharedContentRequest, opts ...client.CallOption) (*GetSharedContentResponse, error)
	GetSharedPlansForUser(ctx context.Context, in *GetSharedPlanRequest, opts ...client.CallOption) (*GetSharedPlanResponse, error)
	GetSharedSurveysForUser(ctx context.Context, in *GetSharedSurveyRequest, opts ...client.CallOption) (*GetSharedSurveyResponse, error)
	GetSharedGoalsForUser(ctx context.Context, in *GetSharedGoalRequest, opts ...client.CallOption) (*GetSharedGoalResponse, error)
	GetSharedChallengesForUser(ctx context.Context, in *GetSharedChallengeRequest, opts ...client.CallOption) (*GetSharedChallengeResponse, error)
	GetSharedHabitsForUser(ctx context.Context, in *GetSharedHabitRequest, opts ...client.CallOption) (*GetSharedHabitResponse, error)
	SignupToGoal(ctx context.Context, in *SignupToGoalRequest, opts ...client.CallOption) (*SignupToGoalResponse, error)
	GetCurrentJoinedGoals(ctx context.Context, in *ListGoalRequest, opts ...client.CallOption) (*ListGoalResponse, error)
	GetAllJoinedGoals(ctx context.Context, in *ListGoalRequest, opts ...client.CallOption) (*ListGoalResponse, error)
	SignupToChallenge(ctx context.Context, in *SignupToChallengeRequest, opts ...client.CallOption) (*SignupToChallengeResponse, error)
	GetCurrentJoinedChallenges(ctx context.Context, in *ListChallengeRequest, opts ...client.CallOption) (*ListChallengeResponse, error)
	GetAllJoinedChallenges(ctx context.Context, in *ListChallengeRequest, opts ...client.CallOption) (*ListChallengeResponse, error)
	SignupToHabit(ctx context.Context, in *SignupToHabitRequest, opts ...client.CallOption) (*SignupToHabitResponse, error)
	GetCurrentJoinedHabits(ctx context.Context, in *ListHabitRequest, opts ...client.CallOption) (*ListHabitResponse, error)
	GetAllJoinedHabits(ctx context.Context, in *ListHabitRequest, opts ...client.CallOption) (*ListHabitResponse, error)
	ListMarkers(ctx context.Context, in *ListMarkersRequest, opts ...client.CallOption) (*ListMarkersResponse, error)
	GetPendingSharedActions(ctx context.Context, in *GetPendingSharedActionsRequest, opts ...client.CallOption) (*GetPendingSharedActionsResponse, error)
	GetGoalProgress(ctx context.Context, in *GetGoalProgressRequest, opts ...client.CallOption) (*GetGoalProgressResponse, error)
	GetDefaultMarkerHistory(ctx context.Context, in *go_micro_srv_track.GetDefaultMarkerHistoryRequest, opts ...client.CallOption) (*go_micro_srv_track.GetDefaultMarkerHistoryResponse, error)
	GetCurrentChallengesWithCount(ctx context.Context, in *GetCurrentChallengesWithCountRequest, opts ...client.CallOption) (*GetCurrentChallengesWithCountResponse, error)
	GetCurrentHabitsWithCount(ctx context.Context, in *GetCurrentHabitsWithCountRequest, opts ...client.CallOption) (*GetCurrentHabitsWithCountResponse, error)
	GetContentCategorys(ctx context.Context, in *go_micro_srv_content.GetContentCategorysRequest, opts ...client.CallOption) (*go_micro_srv_content.GetContentCategorysResponse, error)
	GetContentByCategory(ctx context.Context, in *go_micro_srv_content.GetContentByCategoryRequest, opts ...client.CallOption) (*go_micro_srv_content.GetContentByCategoryResponse, error)
	GetFiltersForCategory(ctx context.Context, in *go_micro_srv_content.GetFiltersForCategoryRequest, opts ...client.CallOption) (*go_micro_srv_content.GetFiltersForCategoryResponse, error)
	FiltersAutocomplete(ctx context.Context, in *go_micro_srv_content.FiltersAutocompleteRequest, opts ...client.CallOption) (*go_micro_srv_content.FiltersAutocompleteResponse, error)
	FilterContentInParticularCategory(ctx context.Context, in *go_micro_srv_content.FilterContentInParticularCategoryRequest, opts ...client.CallOption) (*go_micro_srv_content.FilterContentInParticularCategoryResponse, error)
	SaveUserPreference(ctx context.Context, in *go_micro_srv_user.SaveUserPreferenceRequest, opts ...client.CallOption) (*go_micro_srv_user.SaveUserPreferenceResponse, error)
	GetUserPreference(ctx context.Context, in *go_micro_srv_user.ReadUserPreferenceRequest, opts ...client.CallOption) (*go_micro_srv_user.ReadUserPreferenceResponse, error)
	SaveUserDetails(ctx context.Context, in *SaveUserDetailsRequest, opts ...client.CallOption) (*SaveUserDetailsResponse, error)
	GetContentRecommendationByUser(ctx context.Context, in *go_micro_srv_content.GetContentRecommendationByUserRequest, opts ...client.CallOption) (*go_micro_srv_content.GetContentRecommendationByUserResponse, error)
	GetContentRecommendationByCategory(ctx context.Context, in *go_micro_srv_content.GetContentRecommendationByCategoryRequest, opts ...client.CallOption) (*go_micro_srv_content.GetContentRecommendationByCategoryResponse, error)
	SaveRateForContent(ctx context.Context, in *SaveRateForContentRequest, opts ...client.CallOption) (*SaveRateForContentResponse, error)
	DislikeForContent(ctx context.Context, in *DislikeForContentRequest, opts ...client.CallOption) (*DislikeForContentResponse, error)
	DislikeForSimilarContent(ctx context.Context, in *DislikeForSimilarContentRequest, opts ...client.CallOption) (*DislikeForSimilarContentResponse, error)
	SaveUserFeedback(ctx context.Context, in *SaveUserFeedbackRequest, opts ...client.CallOption) (*SaveUserFeedbackResponse, error)
	JoinUserPlan(ctx context.Context, in *JoinUserPlanRequest, opts ...client.CallOption) (*JoinUserPlanResponse, error)
	CreateUserPlan(ctx context.Context, in *CreateUserPlanRequest, opts ...client.CallOption) (*CreateUserPlanResponse, error)
	GetUserPlan(ctx context.Context, in *GetUserPlanRequest, opts ...client.CallOption) (*GetUserPlanResponse, error)
	UpdateUserPlan(ctx context.Context, in *UpdateUserPlanRequest, opts ...client.CallOption) (*UpdateUserPlanResponse, error)
	// rpc GetContentByCategory(GetContentByCategoryRequest) returns (GetContentByCategoryResponse) {}
	GetPlanItemsCountByCategory(ctx context.Context, in *GetPlanItemsCountByCategoryRequest, opts ...client.CallOption) (*GetPlanItemsCountByCategoryResponse, error)
	GetPlanItemsCountByDay(ctx context.Context, in *GetPlanItemsCountByDayRequest, opts ...client.CallOption) (*GetPlanItemsCountByDayResponse, error)
	GetPlanItemsCountByCategoryAndDay(ctx context.Context, in *GetPlanItemsCountByCategoryAndDayRequest, opts ...client.CallOption) (*GetPlanItemsCountByCategoryAndDayResponse, error)
	Login(ctx context.Context, in *go_micro_srv_account.LoginRequest, opts ...client.CallOption) (*go_micro_srv_account.LoginResponse, error)
	Logout(ctx context.Context, in *go_micro_srv_account.LogoutRequest, opts ...client.CallOption) (*go_micro_srv_account.LogoutResponse, error)
	AllGoalResponse(ctx context.Context, in *go_micro_srv_user.AllGoalResponseRequest, opts ...client.CallOption) (*go_micro_srv_user.AllGoalResponseResponse, error)
	AllChallengeResponse(ctx context.Context, in *go_micro_srv_user.AllChallengeResponseRequest, opts ...client.CallOption) (*go_micro_srv_user.AllChallengeResponseResponse, error)
	AllHabitResponse(ctx context.Context, in *go_micro_srv_user.AllHabitResponseRequest, opts ...client.CallOption) (*go_micro_srv_user.AllHabitResponseResponse, error)
	GetShareableContent(ctx context.Context, in *go_micro_srv_user.GetShareableContentRequest, opts ...client.CallOption) (*go_micro_srv_user.GetShareableContentResponse, error)
	ReceivedItems(ctx context.Context, in *ReceivedItemsRequest, opts ...client.CallOption) (*ReceivedItemsResponse, error)
	ReadUser(ctx context.Context, in *go_micro_srv_user.ReadRequest, opts ...client.CallOption) (*go_micro_srv_user.ReadResponse, error)
	AutocompleteContentCategoryItem(ctx context.Context, in *go_micro_srv_content.AutocompleteContentCategoryItemRequest, opts ...client.CallOption) (*go_micro_srv_content.AutocompleteContentCategoryItemResponse, error)
	AllContentCategoryItemByNameslug(ctx context.Context, in *go_micro_srv_content.AllContentCategoryItemByNameslugRequest, opts ...client.CallOption) (*go_micro_srv_content.AllContentCategoryItemByNameslugResponse, error)
	ReadMarkerByNameslug(ctx context.Context, in *go_micro_srv_static.ReadByNameslugRequest, opts ...client.CallOption) (*go_micro_srv_static.ReadMarkerResponse, error)
	GetGoalDetail(ctx context.Context, in *go_micro_srv_behaviour.ReadGoalRequest, opts ...client.CallOption) (*ReadGoalResponse, error)
	GetChallengeDetail(ctx context.Context, in *go_micro_srv_behaviour.ReadChallengeRequest, opts ...client.CallOption) (*ReadChallengeResponse, error)
	GetHabitDetail(ctx context.Context, in *go_micro_srv_behaviour.ReadHabitRequest, opts ...client.CallOption) (*ReadHabitResponse, error)
	GetContentDetail(ctx context.Context, in *go_micro_srv_content.ReadContentRequest, opts ...client.CallOption) (*ReadContentResponse, error)
}

type userAppServiceClient struct {
	c           client.Client
	serviceName string
}

func NewUserAppServiceClient(serviceName string, c client.Client) UserAppServiceClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "go.micro.srv.userapp"
	}
	return &userAppServiceClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *userAppServiceClient) CreateBookmark(ctx context.Context, in *CreateBookmarkRequest, opts ...client.CallOption) (*CreateBookmarkResponse, error) {
	req := c.c.NewRequest(c.serviceName, "UserAppService.CreateBookmark", in)
	out := new(CreateBookmarkResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAppServiceClient) ReadBookmarkContents(ctx context.Context, in *ReadBookmarkContentRequest, opts ...client.CallOption) (*ReadBookmarkContentResponse, error) {
	req := c.c.NewRequest(c.serviceName, "UserAppService.ReadBookmarkContents", in)
	out := new(ReadBookmarkContentResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAppServiceClient) ReadBookmarkContentCategorys(ctx context.Context, in *ReadBookmarkContentCategorysRequest, opts ...client.CallOption) (*ReadBookmarkContentCategorysResponse, error) {
	req := c.c.NewRequest(c.serviceName, "UserAppService.ReadBookmarkContentCategorys", in)
	out := new(ReadBookmarkContentCategorysResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAppServiceClient) ReadBookmarkByCategory(ctx context.Context, in *ReadBookmarkByCategoryRequest, opts ...client.CallOption) (*ReadBookmarkByCategoryResponse, error) {
	req := c.c.NewRequest(c.serviceName, "UserAppService.ReadBookmarkByCategory", in)
	out := new(ReadBookmarkByCategoryResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAppServiceClient) DeleteBookmark(ctx context.Context, in *DeleteBookmarkRequest, opts ...client.CallOption) (*DeleteBookmarkResponse, error) {
	req := c.c.NewRequest(c.serviceName, "UserAppService.DeleteBookmark", in)
	out := new(DeleteBookmarkResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAppServiceClient) SearchBookmarks(ctx context.Context, in *SearchBookmarkRequest, opts ...client.CallOption) (*go_micro_srv_user.GetShareableContentResponse, error) {
	req := c.c.NewRequest(c.serviceName, "UserAppService.SearchBookmarks", in)
	out := new(go_micro_srv_user.GetShareableContentResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAppServiceClient) GetSharedContent(ctx context.Context, in *GetSharedContentRequest, opts ...client.CallOption) (*GetSharedContentResponse, error) {
	req := c.c.NewRequest(c.serviceName, "UserAppService.GetSharedContent", in)
	out := new(GetSharedContentResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAppServiceClient) GetSharedPlansForUser(ctx context.Context, in *GetSharedPlanRequest, opts ...client.CallOption) (*GetSharedPlanResponse, error) {
	req := c.c.NewRequest(c.serviceName, "UserAppService.GetSharedPlansForUser", in)
	out := new(GetSharedPlanResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAppServiceClient) GetSharedSurveysForUser(ctx context.Context, in *GetSharedSurveyRequest, opts ...client.CallOption) (*GetSharedSurveyResponse, error) {
	req := c.c.NewRequest(c.serviceName, "UserAppService.GetSharedSurveysForUser", in)
	out := new(GetSharedSurveyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAppServiceClient) GetSharedGoalsForUser(ctx context.Context, in *GetSharedGoalRequest, opts ...client.CallOption) (*GetSharedGoalResponse, error) {
	req := c.c.NewRequest(c.serviceName, "UserAppService.GetSharedGoalsForUser", in)
	out := new(GetSharedGoalResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAppServiceClient) GetSharedChallengesForUser(ctx context.Context, in *GetSharedChallengeRequest, opts ...client.CallOption) (*GetSharedChallengeResponse, error) {
	req := c.c.NewRequest(c.serviceName, "UserAppService.GetSharedChallengesForUser", in)
	out := new(GetSharedChallengeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAppServiceClient) GetSharedHabitsForUser(ctx context.Context, in *GetSharedHabitRequest, opts ...client.CallOption) (*GetSharedHabitResponse, error) {
	req := c.c.NewRequest(c.serviceName, "UserAppService.GetSharedHabitsForUser", in)
	out := new(GetSharedHabitResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAppServiceClient) SignupToGoal(ctx context.Context, in *SignupToGoalRequest, opts ...client.CallOption) (*SignupToGoalResponse, error) {
	req := c.c.NewRequest(c.serviceName, "UserAppService.SignupToGoal", in)
	out := new(SignupToGoalResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAppServiceClient) GetCurrentJoinedGoals(ctx context.Context, in *ListGoalRequest, opts ...client.CallOption) (*ListGoalResponse, error) {
	req := c.c.NewRequest(c.serviceName, "UserAppService.GetCurrentJoinedGoals", in)
	out := new(ListGoalResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAppServiceClient) GetAllJoinedGoals(ctx context.Context, in *ListGoalRequest, opts ...client.CallOption) (*ListGoalResponse, error) {
	req := c.c.NewRequest(c.serviceName, "UserAppService.GetAllJoinedGoals", in)
	out := new(ListGoalResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAppServiceClient) SignupToChallenge(ctx context.Context, in *SignupToChallengeRequest, opts ...client.CallOption) (*SignupToChallengeResponse, error) {
	req := c.c.NewRequest(c.serviceName, "UserAppService.SignupToChallenge", in)
	out := new(SignupToChallengeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAppServiceClient) GetCurrentJoinedChallenges(ctx context.Context, in *ListChallengeRequest, opts ...client.CallOption) (*ListChallengeResponse, error) {
	req := c.c.NewRequest(c.serviceName, "UserAppService.GetCurrentJoinedChallenges", in)
	out := new(ListChallengeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAppServiceClient) GetAllJoinedChallenges(ctx context.Context, in *ListChallengeRequest, opts ...client.CallOption) (*ListChallengeResponse, error) {
	req := c.c.NewRequest(c.serviceName, "UserAppService.GetAllJoinedChallenges", in)
	out := new(ListChallengeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAppServiceClient) SignupToHabit(ctx context.Context, in *SignupToHabitRequest, opts ...client.CallOption) (*SignupToHabitResponse, error) {
	req := c.c.NewRequest(c.serviceName, "UserAppService.SignupToHabit", in)
	out := new(SignupToHabitResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAppServiceClient) GetCurrentJoinedHabits(ctx context.Context, in *ListHabitRequest, opts ...client.CallOption) (*ListHabitResponse, error) {
	req := c.c.NewRequest(c.serviceName, "UserAppService.GetCurrentJoinedHabits", in)
	out := new(ListHabitResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAppServiceClient) GetAllJoinedHabits(ctx context.Context, in *ListHabitRequest, opts ...client.CallOption) (*ListHabitResponse, error) {
	req := c.c.NewRequest(c.serviceName, "UserAppService.GetAllJoinedHabits", in)
	out := new(ListHabitResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAppServiceClient) ListMarkers(ctx context.Context, in *ListMarkersRequest, opts ...client.CallOption) (*ListMarkersResponse, error) {
	req := c.c.NewRequest(c.serviceName, "UserAppService.ListMarkers", in)
	out := new(ListMarkersResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAppServiceClient) GetPendingSharedActions(ctx context.Context, in *GetPendingSharedActionsRequest, opts ...client.CallOption) (*GetPendingSharedActionsResponse, error) {
	req := c.c.NewRequest(c.serviceName, "UserAppService.GetPendingSharedActions", in)
	out := new(GetPendingSharedActionsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAppServiceClient) GetGoalProgress(ctx context.Context, in *GetGoalProgressRequest, opts ...client.CallOption) (*GetGoalProgressResponse, error) {
	req := c.c.NewRequest(c.serviceName, "UserAppService.GetGoalProgress", in)
	out := new(GetGoalProgressResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAppServiceClient) GetDefaultMarkerHistory(ctx context.Context, in *go_micro_srv_track.GetDefaultMarkerHistoryRequest, opts ...client.CallOption) (*go_micro_srv_track.GetDefaultMarkerHistoryResponse, error) {
	req := c.c.NewRequest(c.serviceName, "UserAppService.GetDefaultMarkerHistory", in)
	out := new(go_micro_srv_track.GetDefaultMarkerHistoryResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAppServiceClient) GetCurrentChallengesWithCount(ctx context.Context, in *GetCurrentChallengesWithCountRequest, opts ...client.CallOption) (*GetCurrentChallengesWithCountResponse, error) {
	req := c.c.NewRequest(c.serviceName, "UserAppService.GetCurrentChallengesWithCount", in)
	out := new(GetCurrentChallengesWithCountResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAppServiceClient) GetCurrentHabitsWithCount(ctx context.Context, in *GetCurrentHabitsWithCountRequest, opts ...client.CallOption) (*GetCurrentHabitsWithCountResponse, error) {
	req := c.c.NewRequest(c.serviceName, "UserAppService.GetCurrentHabitsWithCount", in)
	out := new(GetCurrentHabitsWithCountResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAppServiceClient) GetContentCategorys(ctx context.Context, in *go_micro_srv_content.GetContentCategorysRequest, opts ...client.CallOption) (*go_micro_srv_content.GetContentCategorysResponse, error) {
	req := c.c.NewRequest(c.serviceName, "UserAppService.GetContentCategorys", in)
	out := new(go_micro_srv_content.GetContentCategorysResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAppServiceClient) GetContentByCategory(ctx context.Context, in *go_micro_srv_content.GetContentByCategoryRequest, opts ...client.CallOption) (*go_micro_srv_content.GetContentByCategoryResponse, error) {
	req := c.c.NewRequest(c.serviceName, "UserAppService.GetContentByCategory", in)
	out := new(go_micro_srv_content.GetContentByCategoryResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAppServiceClient) GetFiltersForCategory(ctx context.Context, in *go_micro_srv_content.GetFiltersForCategoryRequest, opts ...client.CallOption) (*go_micro_srv_content.GetFiltersForCategoryResponse, error) {
	req := c.c.NewRequest(c.serviceName, "UserAppService.GetFiltersForCategory", in)
	out := new(go_micro_srv_content.GetFiltersForCategoryResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAppServiceClient) FiltersAutocomplete(ctx context.Context, in *go_micro_srv_content.FiltersAutocompleteRequest, opts ...client.CallOption) (*go_micro_srv_content.FiltersAutocompleteResponse, error) {
	req := c.c.NewRequest(c.serviceName, "UserAppService.FiltersAutocomplete", in)
	out := new(go_micro_srv_content.FiltersAutocompleteResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAppServiceClient) FilterContentInParticularCategory(ctx context.Context, in *go_micro_srv_content.FilterContentInParticularCategoryRequest, opts ...client.CallOption) (*go_micro_srv_content.FilterContentInParticularCategoryResponse, error) {
	req := c.c.NewRequest(c.serviceName, "UserAppService.FilterContentInParticularCategory", in)
	out := new(go_micro_srv_content.FilterContentInParticularCategoryResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAppServiceClient) SaveUserPreference(ctx context.Context, in *go_micro_srv_user.SaveUserPreferenceRequest, opts ...client.CallOption) (*go_micro_srv_user.SaveUserPreferenceResponse, error) {
	req := c.c.NewRequest(c.serviceName, "UserAppService.SaveUserPreference", in)
	out := new(go_micro_srv_user.SaveUserPreferenceResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAppServiceClient) GetUserPreference(ctx context.Context, in *go_micro_srv_user.ReadUserPreferenceRequest, opts ...client.CallOption) (*go_micro_srv_user.ReadUserPreferenceResponse, error) {
	req := c.c.NewRequest(c.serviceName, "UserAppService.GetUserPreference", in)
	out := new(go_micro_srv_user.ReadUserPreferenceResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAppServiceClient) SaveUserDetails(ctx context.Context, in *SaveUserDetailsRequest, opts ...client.CallOption) (*SaveUserDetailsResponse, error) {
	req := c.c.NewRequest(c.serviceName, "UserAppService.SaveUserDetails", in)
	out := new(SaveUserDetailsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAppServiceClient) GetContentRecommendationByUser(ctx context.Context, in *go_micro_srv_content.GetContentRecommendationByUserRequest, opts ...client.CallOption) (*go_micro_srv_content.GetContentRecommendationByUserResponse, error) {
	req := c.c.NewRequest(c.serviceName, "UserAppService.GetContentRecommendationByUser", in)
	out := new(go_micro_srv_content.GetContentRecommendationByUserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAppServiceClient) GetContentRecommendationByCategory(ctx context.Context, in *go_micro_srv_content.GetContentRecommendationByCategoryRequest, opts ...client.CallOption) (*go_micro_srv_content.GetContentRecommendationByCategoryResponse, error) {
	req := c.c.NewRequest(c.serviceName, "UserAppService.GetContentRecommendationByCategory", in)
	out := new(go_micro_srv_content.GetContentRecommendationByCategoryResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAppServiceClient) SaveRateForContent(ctx context.Context, in *SaveRateForContentRequest, opts ...client.CallOption) (*SaveRateForContentResponse, error) {
	req := c.c.NewRequest(c.serviceName, "UserAppService.SaveRateForContent", in)
	out := new(SaveRateForContentResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAppServiceClient) DislikeForContent(ctx context.Context, in *DislikeForContentRequest, opts ...client.CallOption) (*DislikeForContentResponse, error) {
	req := c.c.NewRequest(c.serviceName, "UserAppService.DislikeForContent", in)
	out := new(DislikeForContentResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAppServiceClient) DislikeForSimilarContent(ctx context.Context, in *DislikeForSimilarContentRequest, opts ...client.CallOption) (*DislikeForSimilarContentResponse, error) {
	req := c.c.NewRequest(c.serviceName, "UserAppService.DislikeForSimilarContent", in)
	out := new(DislikeForSimilarContentResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAppServiceClient) SaveUserFeedback(ctx context.Context, in *SaveUserFeedbackRequest, opts ...client.CallOption) (*SaveUserFeedbackResponse, error) {
	req := c.c.NewRequest(c.serviceName, "UserAppService.SaveUserFeedback", in)
	out := new(SaveUserFeedbackResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAppServiceClient) JoinUserPlan(ctx context.Context, in *JoinUserPlanRequest, opts ...client.CallOption) (*JoinUserPlanResponse, error) {
	req := c.c.NewRequest(c.serviceName, "UserAppService.JoinUserPlan", in)
	out := new(JoinUserPlanResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAppServiceClient) CreateUserPlan(ctx context.Context, in *CreateUserPlanRequest, opts ...client.CallOption) (*CreateUserPlanResponse, error) {
	req := c.c.NewRequest(c.serviceName, "UserAppService.CreateUserPlan", in)
	out := new(CreateUserPlanResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAppServiceClient) GetUserPlan(ctx context.Context, in *GetUserPlanRequest, opts ...client.CallOption) (*GetUserPlanResponse, error) {
	req := c.c.NewRequest(c.serviceName, "UserAppService.GetUserPlan", in)
	out := new(GetUserPlanResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAppServiceClient) UpdateUserPlan(ctx context.Context, in *UpdateUserPlanRequest, opts ...client.CallOption) (*UpdateUserPlanResponse, error) {
	req := c.c.NewRequest(c.serviceName, "UserAppService.UpdateUserPlan", in)
	out := new(UpdateUserPlanResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAppServiceClient) GetPlanItemsCountByCategory(ctx context.Context, in *GetPlanItemsCountByCategoryRequest, opts ...client.CallOption) (*GetPlanItemsCountByCategoryResponse, error) {
	req := c.c.NewRequest(c.serviceName, "UserAppService.GetPlanItemsCountByCategory", in)
	out := new(GetPlanItemsCountByCategoryResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAppServiceClient) GetPlanItemsCountByDay(ctx context.Context, in *GetPlanItemsCountByDayRequest, opts ...client.CallOption) (*GetPlanItemsCountByDayResponse, error) {
	req := c.c.NewRequest(c.serviceName, "UserAppService.GetPlanItemsCountByDay", in)
	out := new(GetPlanItemsCountByDayResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAppServiceClient) GetPlanItemsCountByCategoryAndDay(ctx context.Context, in *GetPlanItemsCountByCategoryAndDayRequest, opts ...client.CallOption) (*GetPlanItemsCountByCategoryAndDayResponse, error) {
	req := c.c.NewRequest(c.serviceName, "UserAppService.GetPlanItemsCountByCategoryAndDay", in)
	out := new(GetPlanItemsCountByCategoryAndDayResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAppServiceClient) Login(ctx context.Context, in *go_micro_srv_account.LoginRequest, opts ...client.CallOption) (*go_micro_srv_account.LoginResponse, error) {
	req := c.c.NewRequest(c.serviceName, "UserAppService.Login", in)
	out := new(go_micro_srv_account.LoginResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAppServiceClient) Logout(ctx context.Context, in *go_micro_srv_account.LogoutRequest, opts ...client.CallOption) (*go_micro_srv_account.LogoutResponse, error) {
	req := c.c.NewRequest(c.serviceName, "UserAppService.Logout", in)
	out := new(go_micro_srv_account.LogoutResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAppServiceClient) AllGoalResponse(ctx context.Context, in *go_micro_srv_user.AllGoalResponseRequest, opts ...client.CallOption) (*go_micro_srv_user.AllGoalResponseResponse, error) {
	req := c.c.NewRequest(c.serviceName, "UserAppService.AllGoalResponse", in)
	out := new(go_micro_srv_user.AllGoalResponseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAppServiceClient) AllChallengeResponse(ctx context.Context, in *go_micro_srv_user.AllChallengeResponseRequest, opts ...client.CallOption) (*go_micro_srv_user.AllChallengeResponseResponse, error) {
	req := c.c.NewRequest(c.serviceName, "UserAppService.AllChallengeResponse", in)
	out := new(go_micro_srv_user.AllChallengeResponseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAppServiceClient) AllHabitResponse(ctx context.Context, in *go_micro_srv_user.AllHabitResponseRequest, opts ...client.CallOption) (*go_micro_srv_user.AllHabitResponseResponse, error) {
	req := c.c.NewRequest(c.serviceName, "UserAppService.AllHabitResponse", in)
	out := new(go_micro_srv_user.AllHabitResponseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAppServiceClient) GetShareableContent(ctx context.Context, in *go_micro_srv_user.GetShareableContentRequest, opts ...client.CallOption) (*go_micro_srv_user.GetShareableContentResponse, error) {
	req := c.c.NewRequest(c.serviceName, "UserAppService.GetShareableContent", in)
	out := new(go_micro_srv_user.GetShareableContentResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAppServiceClient) ReceivedItems(ctx context.Context, in *ReceivedItemsRequest, opts ...client.CallOption) (*ReceivedItemsResponse, error) {
	req := c.c.NewRequest(c.serviceName, "UserAppService.ReceivedItems", in)
	out := new(ReceivedItemsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAppServiceClient) ReadUser(ctx context.Context, in *go_micro_srv_user.ReadRequest, opts ...client.CallOption) (*go_micro_srv_user.ReadResponse, error) {
	req := c.c.NewRequest(c.serviceName, "UserAppService.ReadUser", in)
	out := new(go_micro_srv_user.ReadResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAppServiceClient) AutocompleteContentCategoryItem(ctx context.Context, in *go_micro_srv_content.AutocompleteContentCategoryItemRequest, opts ...client.CallOption) (*go_micro_srv_content.AutocompleteContentCategoryItemResponse, error) {
	req := c.c.NewRequest(c.serviceName, "UserAppService.AutocompleteContentCategoryItem", in)
	out := new(go_micro_srv_content.AutocompleteContentCategoryItemResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAppServiceClient) AllContentCategoryItemByNameslug(ctx context.Context, in *go_micro_srv_content.AllContentCategoryItemByNameslugRequest, opts ...client.CallOption) (*go_micro_srv_content.AllContentCategoryItemByNameslugResponse, error) {
	req := c.c.NewRequest(c.serviceName, "UserAppService.AllContentCategoryItemByNameslug", in)
	out := new(go_micro_srv_content.AllContentCategoryItemByNameslugResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAppServiceClient) ReadMarkerByNameslug(ctx context.Context, in *go_micro_srv_static.ReadByNameslugRequest, opts ...client.CallOption) (*go_micro_srv_static.ReadMarkerResponse, error) {
	req := c.c.NewRequest(c.serviceName, "UserAppService.ReadMarkerByNameslug", in)
	out := new(go_micro_srv_static.ReadMarkerResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAppServiceClient) GetGoalDetail(ctx context.Context, in *go_micro_srv_behaviour.ReadGoalRequest, opts ...client.CallOption) (*ReadGoalResponse, error) {
	req := c.c.NewRequest(c.serviceName, "UserAppService.GetGoalDetail", in)
	out := new(ReadGoalResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAppServiceClient) GetChallengeDetail(ctx context.Context, in *go_micro_srv_behaviour.ReadChallengeRequest, opts ...client.CallOption) (*ReadChallengeResponse, error) {
	req := c.c.NewRequest(c.serviceName, "UserAppService.GetChallengeDetail", in)
	out := new(ReadChallengeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAppServiceClient) GetHabitDetail(ctx context.Context, in *go_micro_srv_behaviour.ReadHabitRequest, opts ...client.CallOption) (*ReadHabitResponse, error) {
	req := c.c.NewRequest(c.serviceName, "UserAppService.GetHabitDetail", in)
	out := new(ReadHabitResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAppServiceClient) GetContentDetail(ctx context.Context, in *go_micro_srv_content.ReadContentRequest, opts ...client.CallOption) (*ReadContentResponse, error) {
	req := c.c.NewRequest(c.serviceName, "UserAppService.GetContentDetail", in)
	out := new(ReadContentResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UserAppService service

type UserAppServiceHandler interface {
	CreateBookmark(context.Context, *CreateBookmarkRequest, *CreateBookmarkResponse) error
	ReadBookmarkContents(context.Context, *ReadBookmarkContentRequest, *ReadBookmarkContentResponse) error
	ReadBookmarkContentCategorys(context.Context, *ReadBookmarkContentCategorysRequest, *ReadBookmarkContentCategorysResponse) error
	ReadBookmarkByCategory(context.Context, *ReadBookmarkByCategoryRequest, *ReadBookmarkByCategoryResponse) error
	DeleteBookmark(context.Context, *DeleteBookmarkRequest, *DeleteBookmarkResponse) error
	SearchBookmarks(context.Context, *SearchBookmarkRequest, *go_micro_srv_user.GetShareableContentResponse) error
	GetSharedContent(context.Context, *GetSharedContentRequest, *GetSharedContentResponse) error
	GetSharedPlansForUser(context.Context, *GetSharedPlanRequest, *GetSharedPlanResponse) error
	GetSharedSurveysForUser(context.Context, *GetSharedSurveyRequest, *GetSharedSurveyResponse) error
	GetSharedGoalsForUser(context.Context, *GetSharedGoalRequest, *GetSharedGoalResponse) error
	GetSharedChallengesForUser(context.Context, *GetSharedChallengeRequest, *GetSharedChallengeResponse) error
	GetSharedHabitsForUser(context.Context, *GetSharedHabitRequest, *GetSharedHabitResponse) error
	SignupToGoal(context.Context, *SignupToGoalRequest, *SignupToGoalResponse) error
	GetCurrentJoinedGoals(context.Context, *ListGoalRequest, *ListGoalResponse) error
	GetAllJoinedGoals(context.Context, *ListGoalRequest, *ListGoalResponse) error
	SignupToChallenge(context.Context, *SignupToChallengeRequest, *SignupToChallengeResponse) error
	GetCurrentJoinedChallenges(context.Context, *ListChallengeRequest, *ListChallengeResponse) error
	GetAllJoinedChallenges(context.Context, *ListChallengeRequest, *ListChallengeResponse) error
	SignupToHabit(context.Context, *SignupToHabitRequest, *SignupToHabitResponse) error
	GetCurrentJoinedHabits(context.Context, *ListHabitRequest, *ListHabitResponse) error
	GetAllJoinedHabits(context.Context, *ListHabitRequest, *ListHabitResponse) error
	ListMarkers(context.Context, *ListMarkersRequest, *ListMarkersResponse) error
	GetPendingSharedActions(context.Context, *GetPendingSharedActionsRequest, *GetPendingSharedActionsResponse) error
	GetGoalProgress(context.Context, *GetGoalProgressRequest, *GetGoalProgressResponse) error
	GetDefaultMarkerHistory(context.Context, *go_micro_srv_track.GetDefaultMarkerHistoryRequest, *go_micro_srv_track.GetDefaultMarkerHistoryResponse) error
	GetCurrentChallengesWithCount(context.Context, *GetCurrentChallengesWithCountRequest, *GetCurrentChallengesWithCountResponse) error
	GetCurrentHabitsWithCount(context.Context, *GetCurrentHabitsWithCountRequest, *GetCurrentHabitsWithCountResponse) error
	GetContentCategorys(context.Context, *go_micro_srv_content.GetContentCategorysRequest, *go_micro_srv_content.GetContentCategorysResponse) error
	GetContentByCategory(context.Context, *go_micro_srv_content.GetContentByCategoryRequest, *go_micro_srv_content.GetContentByCategoryResponse) error
	GetFiltersForCategory(context.Context, *go_micro_srv_content.GetFiltersForCategoryRequest, *go_micro_srv_content.GetFiltersForCategoryResponse) error
	FiltersAutocomplete(context.Context, *go_micro_srv_content.FiltersAutocompleteRequest, *go_micro_srv_content.FiltersAutocompleteResponse) error
	FilterContentInParticularCategory(context.Context, *go_micro_srv_content.FilterContentInParticularCategoryRequest, *go_micro_srv_content.FilterContentInParticularCategoryResponse) error
	SaveUserPreference(context.Context, *go_micro_srv_user.SaveUserPreferenceRequest, *go_micro_srv_user.SaveUserPreferenceResponse) error
	GetUserPreference(context.Context, *go_micro_srv_user.ReadUserPreferenceRequest, *go_micro_srv_user.ReadUserPreferenceResponse) error
	SaveUserDetails(context.Context, *SaveUserDetailsRequest, *SaveUserDetailsResponse) error
	GetContentRecommendationByUser(context.Context, *go_micro_srv_content.GetContentRecommendationByUserRequest, *go_micro_srv_content.GetContentRecommendationByUserResponse) error
	GetContentRecommendationByCategory(context.Context, *go_micro_srv_content.GetContentRecommendationByCategoryRequest, *go_micro_srv_content.GetContentRecommendationByCategoryResponse) error
	SaveRateForContent(context.Context, *SaveRateForContentRequest, *SaveRateForContentResponse) error
	DislikeForContent(context.Context, *DislikeForContentRequest, *DislikeForContentResponse) error
	DislikeForSimilarContent(context.Context, *DislikeForSimilarContentRequest, *DislikeForSimilarContentResponse) error
	SaveUserFeedback(context.Context, *SaveUserFeedbackRequest, *SaveUserFeedbackResponse) error
	JoinUserPlan(context.Context, *JoinUserPlanRequest, *JoinUserPlanResponse) error
	CreateUserPlan(context.Context, *CreateUserPlanRequest, *CreateUserPlanResponse) error
	GetUserPlan(context.Context, *GetUserPlanRequest, *GetUserPlanResponse) error
	UpdateUserPlan(context.Context, *UpdateUserPlanRequest, *UpdateUserPlanResponse) error
	// rpc GetContentByCategory(GetContentByCategoryRequest) returns (GetContentByCategoryResponse) {}
	GetPlanItemsCountByCategory(context.Context, *GetPlanItemsCountByCategoryRequest, *GetPlanItemsCountByCategoryResponse) error
	GetPlanItemsCountByDay(context.Context, *GetPlanItemsCountByDayRequest, *GetPlanItemsCountByDayResponse) error
	GetPlanItemsCountByCategoryAndDay(context.Context, *GetPlanItemsCountByCategoryAndDayRequest, *GetPlanItemsCountByCategoryAndDayResponse) error
	Login(context.Context, *go_micro_srv_account.LoginRequest, *go_micro_srv_account.LoginResponse) error
	Logout(context.Context, *go_micro_srv_account.LogoutRequest, *go_micro_srv_account.LogoutResponse) error
	AllGoalResponse(context.Context, *go_micro_srv_user.AllGoalResponseRequest, *go_micro_srv_user.AllGoalResponseResponse) error
	AllChallengeResponse(context.Context, *go_micro_srv_user.AllChallengeResponseRequest, *go_micro_srv_user.AllChallengeResponseResponse) error
	AllHabitResponse(context.Context, *go_micro_srv_user.AllHabitResponseRequest, *go_micro_srv_user.AllHabitResponseResponse) error
	GetShareableContent(context.Context, *go_micro_srv_user.GetShareableContentRequest, *go_micro_srv_user.GetShareableContentResponse) error
	ReceivedItems(context.Context, *ReceivedItemsRequest, *ReceivedItemsResponse) error
	ReadUser(context.Context, *go_micro_srv_user.ReadRequest, *go_micro_srv_user.ReadResponse) error
	AutocompleteContentCategoryItem(context.Context, *go_micro_srv_content.AutocompleteContentCategoryItemRequest, *go_micro_srv_content.AutocompleteContentCategoryItemResponse) error
	AllContentCategoryItemByNameslug(context.Context, *go_micro_srv_content.AllContentCategoryItemByNameslugRequest, *go_micro_srv_content.AllContentCategoryItemByNameslugResponse) error
	ReadMarkerByNameslug(context.Context, *go_micro_srv_static.ReadByNameslugRequest, *go_micro_srv_static.ReadMarkerResponse) error
	GetGoalDetail(context.Context, *go_micro_srv_behaviour.ReadGoalRequest, *ReadGoalResponse) error
	GetChallengeDetail(context.Context, *go_micro_srv_behaviour.ReadChallengeRequest, *ReadChallengeResponse) error
	GetHabitDetail(context.Context, *go_micro_srv_behaviour.ReadHabitRequest, *ReadHabitResponse) error
	GetContentDetail(context.Context, *go_micro_srv_content.ReadContentRequest, *ReadContentResponse) error
}

func RegisterUserAppServiceHandler(s server.Server, hdlr UserAppServiceHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&UserAppService{hdlr}, opts...))
}

type UserAppService struct {
	UserAppServiceHandler
}

func (h *UserAppService) CreateBookmark(ctx context.Context, in *CreateBookmarkRequest, out *CreateBookmarkResponse) error {
	return h.UserAppServiceHandler.CreateBookmark(ctx, in, out)
}

func (h *UserAppService) ReadBookmarkContents(ctx context.Context, in *ReadBookmarkContentRequest, out *ReadBookmarkContentResponse) error {
	return h.UserAppServiceHandler.ReadBookmarkContents(ctx, in, out)
}

func (h *UserAppService) ReadBookmarkContentCategorys(ctx context.Context, in *ReadBookmarkContentCategorysRequest, out *ReadBookmarkContentCategorysResponse) error {
	return h.UserAppServiceHandler.ReadBookmarkContentCategorys(ctx, in, out)
}

func (h *UserAppService) ReadBookmarkByCategory(ctx context.Context, in *ReadBookmarkByCategoryRequest, out *ReadBookmarkByCategoryResponse) error {
	return h.UserAppServiceHandler.ReadBookmarkByCategory(ctx, in, out)
}

func (h *UserAppService) DeleteBookmark(ctx context.Context, in *DeleteBookmarkRequest, out *DeleteBookmarkResponse) error {
	return h.UserAppServiceHandler.DeleteBookmark(ctx, in, out)
}

func (h *UserAppService) SearchBookmarks(ctx context.Context, in *SearchBookmarkRequest, out *go_micro_srv_user.GetShareableContentResponse) error {
	return h.UserAppServiceHandler.SearchBookmarks(ctx, in, out)
}

func (h *UserAppService) GetSharedContent(ctx context.Context, in *GetSharedContentRequest, out *GetSharedContentResponse) error {
	return h.UserAppServiceHandler.GetSharedContent(ctx, in, out)
}

func (h *UserAppService) GetSharedPlansForUser(ctx context.Context, in *GetSharedPlanRequest, out *GetSharedPlanResponse) error {
	return h.UserAppServiceHandler.GetSharedPlansForUser(ctx, in, out)
}

func (h *UserAppService) GetSharedSurveysForUser(ctx context.Context, in *GetSharedSurveyRequest, out *GetSharedSurveyResponse) error {
	return h.UserAppServiceHandler.GetSharedSurveysForUser(ctx, in, out)
}

func (h *UserAppService) GetSharedGoalsForUser(ctx context.Context, in *GetSharedGoalRequest, out *GetSharedGoalResponse) error {
	return h.UserAppServiceHandler.GetSharedGoalsForUser(ctx, in, out)
}

func (h *UserAppService) GetSharedChallengesForUser(ctx context.Context, in *GetSharedChallengeRequest, out *GetSharedChallengeResponse) error {
	return h.UserAppServiceHandler.GetSharedChallengesForUser(ctx, in, out)
}

func (h *UserAppService) GetSharedHabitsForUser(ctx context.Context, in *GetSharedHabitRequest, out *GetSharedHabitResponse) error {
	return h.UserAppServiceHandler.GetSharedHabitsForUser(ctx, in, out)
}

func (h *UserAppService) SignupToGoal(ctx context.Context, in *SignupToGoalRequest, out *SignupToGoalResponse) error {
	return h.UserAppServiceHandler.SignupToGoal(ctx, in, out)
}

func (h *UserAppService) GetCurrentJoinedGoals(ctx context.Context, in *ListGoalRequest, out *ListGoalResponse) error {
	return h.UserAppServiceHandler.GetCurrentJoinedGoals(ctx, in, out)
}

func (h *UserAppService) GetAllJoinedGoals(ctx context.Context, in *ListGoalRequest, out *ListGoalResponse) error {
	return h.UserAppServiceHandler.GetAllJoinedGoals(ctx, in, out)
}

func (h *UserAppService) SignupToChallenge(ctx context.Context, in *SignupToChallengeRequest, out *SignupToChallengeResponse) error {
	return h.UserAppServiceHandler.SignupToChallenge(ctx, in, out)
}

func (h *UserAppService) GetCurrentJoinedChallenges(ctx context.Context, in *ListChallengeRequest, out *ListChallengeResponse) error {
	return h.UserAppServiceHandler.GetCurrentJoinedChallenges(ctx, in, out)
}

func (h *UserAppService) GetAllJoinedChallenges(ctx context.Context, in *ListChallengeRequest, out *ListChallengeResponse) error {
	return h.UserAppServiceHandler.GetAllJoinedChallenges(ctx, in, out)
}

func (h *UserAppService) SignupToHabit(ctx context.Context, in *SignupToHabitRequest, out *SignupToHabitResponse) error {
	return h.UserAppServiceHandler.SignupToHabit(ctx, in, out)
}

func (h *UserAppService) GetCurrentJoinedHabits(ctx context.Context, in *ListHabitRequest, out *ListHabitResponse) error {
	return h.UserAppServiceHandler.GetCurrentJoinedHabits(ctx, in, out)
}

func (h *UserAppService) GetAllJoinedHabits(ctx context.Context, in *ListHabitRequest, out *ListHabitResponse) error {
	return h.UserAppServiceHandler.GetAllJoinedHabits(ctx, in, out)
}

func (h *UserAppService) ListMarkers(ctx context.Context, in *ListMarkersRequest, out *ListMarkersResponse) error {
	return h.UserAppServiceHandler.ListMarkers(ctx, in, out)
}

func (h *UserAppService) GetPendingSharedActions(ctx context.Context, in *GetPendingSharedActionsRequest, out *GetPendingSharedActionsResponse) error {
	return h.UserAppServiceHandler.GetPendingSharedActions(ctx, in, out)
}

func (h *UserAppService) GetGoalProgress(ctx context.Context, in *GetGoalProgressRequest, out *GetGoalProgressResponse) error {
	return h.UserAppServiceHandler.GetGoalProgress(ctx, in, out)
}

func (h *UserAppService) GetDefaultMarkerHistory(ctx context.Context, in *go_micro_srv_track.GetDefaultMarkerHistoryRequest, out *go_micro_srv_track.GetDefaultMarkerHistoryResponse) error {
	return h.UserAppServiceHandler.GetDefaultMarkerHistory(ctx, in, out)
}

func (h *UserAppService) GetCurrentChallengesWithCount(ctx context.Context, in *GetCurrentChallengesWithCountRequest, out *GetCurrentChallengesWithCountResponse) error {
	return h.UserAppServiceHandler.GetCurrentChallengesWithCount(ctx, in, out)
}

func (h *UserAppService) GetCurrentHabitsWithCount(ctx context.Context, in *GetCurrentHabitsWithCountRequest, out *GetCurrentHabitsWithCountResponse) error {
	return h.UserAppServiceHandler.GetCurrentHabitsWithCount(ctx, in, out)
}

func (h *UserAppService) GetContentCategorys(ctx context.Context, in *go_micro_srv_content.GetContentCategorysRequest, out *go_micro_srv_content.GetContentCategorysResponse) error {
	return h.UserAppServiceHandler.GetContentCategorys(ctx, in, out)
}

func (h *UserAppService) GetContentByCategory(ctx context.Context, in *go_micro_srv_content.GetContentByCategoryRequest, out *go_micro_srv_content.GetContentByCategoryResponse) error {
	return h.UserAppServiceHandler.GetContentByCategory(ctx, in, out)
}

func (h *UserAppService) GetFiltersForCategory(ctx context.Context, in *go_micro_srv_content.GetFiltersForCategoryRequest, out *go_micro_srv_content.GetFiltersForCategoryResponse) error {
	return h.UserAppServiceHandler.GetFiltersForCategory(ctx, in, out)
}

func (h *UserAppService) FiltersAutocomplete(ctx context.Context, in *go_micro_srv_content.FiltersAutocompleteRequest, out *go_micro_srv_content.FiltersAutocompleteResponse) error {
	return h.UserAppServiceHandler.FiltersAutocomplete(ctx, in, out)
}

func (h *UserAppService) FilterContentInParticularCategory(ctx context.Context, in *go_micro_srv_content.FilterContentInParticularCategoryRequest, out *go_micro_srv_content.FilterContentInParticularCategoryResponse) error {
	return h.UserAppServiceHandler.FilterContentInParticularCategory(ctx, in, out)
}

func (h *UserAppService) SaveUserPreference(ctx context.Context, in *go_micro_srv_user.SaveUserPreferenceRequest, out *go_micro_srv_user.SaveUserPreferenceResponse) error {
	return h.UserAppServiceHandler.SaveUserPreference(ctx, in, out)
}

func (h *UserAppService) GetUserPreference(ctx context.Context, in *go_micro_srv_user.ReadUserPreferenceRequest, out *go_micro_srv_user.ReadUserPreferenceResponse) error {
	return h.UserAppServiceHandler.GetUserPreference(ctx, in, out)
}

func (h *UserAppService) SaveUserDetails(ctx context.Context, in *SaveUserDetailsRequest, out *SaveUserDetailsResponse) error {
	return h.UserAppServiceHandler.SaveUserDetails(ctx, in, out)
}

func (h *UserAppService) GetContentRecommendationByUser(ctx context.Context, in *go_micro_srv_content.GetContentRecommendationByUserRequest, out *go_micro_srv_content.GetContentRecommendationByUserResponse) error {
	return h.UserAppServiceHandler.GetContentRecommendationByUser(ctx, in, out)
}

func (h *UserAppService) GetContentRecommendationByCategory(ctx context.Context, in *go_micro_srv_content.GetContentRecommendationByCategoryRequest, out *go_micro_srv_content.GetContentRecommendationByCategoryResponse) error {
	return h.UserAppServiceHandler.GetContentRecommendationByCategory(ctx, in, out)
}

func (h *UserAppService) SaveRateForContent(ctx context.Context, in *SaveRateForContentRequest, out *SaveRateForContentResponse) error {
	return h.UserAppServiceHandler.SaveRateForContent(ctx, in, out)
}

func (h *UserAppService) DislikeForContent(ctx context.Context, in *DislikeForContentRequest, out *DislikeForContentResponse) error {
	return h.UserAppServiceHandler.DislikeForContent(ctx, in, out)
}

func (h *UserAppService) DislikeForSimilarContent(ctx context.Context, in *DislikeForSimilarContentRequest, out *DislikeForSimilarContentResponse) error {
	return h.UserAppServiceHandler.DislikeForSimilarContent(ctx, in, out)
}

func (h *UserAppService) SaveUserFeedback(ctx context.Context, in *SaveUserFeedbackRequest, out *SaveUserFeedbackResponse) error {
	return h.UserAppServiceHandler.SaveUserFeedback(ctx, in, out)
}

func (h *UserAppService) JoinUserPlan(ctx context.Context, in *JoinUserPlanRequest, out *JoinUserPlanResponse) error {
	return h.UserAppServiceHandler.JoinUserPlan(ctx, in, out)
}

func (h *UserAppService) CreateUserPlan(ctx context.Context, in *CreateUserPlanRequest, out *CreateUserPlanResponse) error {
	return h.UserAppServiceHandler.CreateUserPlan(ctx, in, out)
}

func (h *UserAppService) GetUserPlan(ctx context.Context, in *GetUserPlanRequest, out *GetUserPlanResponse) error {
	return h.UserAppServiceHandler.GetUserPlan(ctx, in, out)
}

func (h *UserAppService) UpdateUserPlan(ctx context.Context, in *UpdateUserPlanRequest, out *UpdateUserPlanResponse) error {
	return h.UserAppServiceHandler.UpdateUserPlan(ctx, in, out)
}

func (h *UserAppService) GetPlanItemsCountByCategory(ctx context.Context, in *GetPlanItemsCountByCategoryRequest, out *GetPlanItemsCountByCategoryResponse) error {
	return h.UserAppServiceHandler.GetPlanItemsCountByCategory(ctx, in, out)
}

func (h *UserAppService) GetPlanItemsCountByDay(ctx context.Context, in *GetPlanItemsCountByDayRequest, out *GetPlanItemsCountByDayResponse) error {
	return h.UserAppServiceHandler.GetPlanItemsCountByDay(ctx, in, out)
}

func (h *UserAppService) GetPlanItemsCountByCategoryAndDay(ctx context.Context, in *GetPlanItemsCountByCategoryAndDayRequest, out *GetPlanItemsCountByCategoryAndDayResponse) error {
	return h.UserAppServiceHandler.GetPlanItemsCountByCategoryAndDay(ctx, in, out)
}

func (h *UserAppService) Login(ctx context.Context, in *go_micro_srv_account.LoginRequest, out *go_micro_srv_account.LoginResponse) error {
	return h.UserAppServiceHandler.Login(ctx, in, out)
}

func (h *UserAppService) Logout(ctx context.Context, in *go_micro_srv_account.LogoutRequest, out *go_micro_srv_account.LogoutResponse) error {
	return h.UserAppServiceHandler.Logout(ctx, in, out)
}

func (h *UserAppService) AllGoalResponse(ctx context.Context, in *go_micro_srv_user.AllGoalResponseRequest, out *go_micro_srv_user.AllGoalResponseResponse) error {
	return h.UserAppServiceHandler.AllGoalResponse(ctx, in, out)
}

func (h *UserAppService) AllChallengeResponse(ctx context.Context, in *go_micro_srv_user.AllChallengeResponseRequest, out *go_micro_srv_user.AllChallengeResponseResponse) error {
	return h.UserAppServiceHandler.AllChallengeResponse(ctx, in, out)
}

func (h *UserAppService) AllHabitResponse(ctx context.Context, in *go_micro_srv_user.AllHabitResponseRequest, out *go_micro_srv_user.AllHabitResponseResponse) error {
	return h.UserAppServiceHandler.AllHabitResponse(ctx, in, out)
}

func (h *UserAppService) GetShareableContent(ctx context.Context, in *go_micro_srv_user.GetShareableContentRequest, out *go_micro_srv_user.GetShareableContentResponse) error {
	return h.UserAppServiceHandler.GetShareableContent(ctx, in, out)
}

func (h *UserAppService) ReceivedItems(ctx context.Context, in *ReceivedItemsRequest, out *ReceivedItemsResponse) error {
	return h.UserAppServiceHandler.ReceivedItems(ctx, in, out)
}

func (h *UserAppService) ReadUser(ctx context.Context, in *go_micro_srv_user.ReadRequest, out *go_micro_srv_user.ReadResponse) error {
	return h.UserAppServiceHandler.ReadUser(ctx, in, out)
}

func (h *UserAppService) AutocompleteContentCategoryItem(ctx context.Context, in *go_micro_srv_content.AutocompleteContentCategoryItemRequest, out *go_micro_srv_content.AutocompleteContentCategoryItemResponse) error {
	return h.UserAppServiceHandler.AutocompleteContentCategoryItem(ctx, in, out)
}

func (h *UserAppService) AllContentCategoryItemByNameslug(ctx context.Context, in *go_micro_srv_content.AllContentCategoryItemByNameslugRequest, out *go_micro_srv_content.AllContentCategoryItemByNameslugResponse) error {
	return h.UserAppServiceHandler.AllContentCategoryItemByNameslug(ctx, in, out)
}

func (h *UserAppService) ReadMarkerByNameslug(ctx context.Context, in *go_micro_srv_static.ReadByNameslugRequest, out *go_micro_srv_static.ReadMarkerResponse) error {
	return h.UserAppServiceHandler.ReadMarkerByNameslug(ctx, in, out)
}

func (h *UserAppService) GetGoalDetail(ctx context.Context, in *go_micro_srv_behaviour.ReadGoalRequest, out *ReadGoalResponse) error {
	return h.UserAppServiceHandler.GetGoalDetail(ctx, in, out)
}

func (h *UserAppService) GetChallengeDetail(ctx context.Context, in *go_micro_srv_behaviour.ReadChallengeRequest, out *ReadChallengeResponse) error {
	return h.UserAppServiceHandler.GetChallengeDetail(ctx, in, out)
}

func (h *UserAppService) GetHabitDetail(ctx context.Context, in *go_micro_srv_behaviour.ReadHabitRequest, out *ReadHabitResponse) error {
	return h.UserAppServiceHandler.GetHabitDetail(ctx, in, out)
}

func (h *UserAppService) GetContentDetail(ctx context.Context, in *go_micro_srv_content.ReadContentRequest, out *ReadContentResponse) error {
	return h.UserAppServiceHandler.GetContentDetail(ctx, in, out)
}

func init() { proto.RegisterFile("server/user-app-srv/proto/userapp/userapp.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 5214 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x5d, 0x4d, 0x8c, 0x1c, 0x49,
	0x56, 0xae, 0xac, 0xae, 0xae, 0xae, 0x7a, 0xfd, 0xeb, 0x70, 0x77, 0x4f, 0x4f, 0xcf, 0x8f, 0xed,
	0xf4, 0x78, 0xc6, 0xe3, 0xb6, 0xdb, 0x9e, 0xb6, 0x3d, 0x3b, 0xbf, 0xf6, 0xf4, 0x9f, 0x7b, 0x7a,
	0xd6, 0x3f, 0x4d, 0xb5, 0xbd, 0x3f, 0x08, 0x6d, 0x2b, 0xbb, 0x2a, 0xbb, 0x3a, 0xed, 0xaa, 0xca,
	0xda, 0xcc, 0xac, 0x86, 0x92, 0x58, 0x2d, 0x3b, 0x02, 0x09, 0x84, 0x98, 0x03, 0xbb, 0x80, 0x84,
	0x04, 0x42, 0x42, 0x1a, 0x69, 0x39, 0x70, 0x44, 0xdc, 0x38, 0xac, 0x04, 0x42, 0xec, 0xc2, 0x6a,
	0x0f, 0x88, 0xc3, 0xae, 0x40, 0xb0, 0x12, 0xb0, 0x5c, 0xd8, 0x0b, 0x48, 0xa0, 0x11, 0x28, 0xfe,
	0xb2, 0x22, 0x32, 0x23, 0xb2, 0x32, 0xd3, 0xed, 0x5d, 0x6b, 0xb4, 0x17, 0x77, 0x46, 0x54, 0xbc,
	0x88, 0x17, 0x5f, 0xbc, 0x88, 0x78, 0xf1, 0xe2, 0xc5, 0x33, 0x5c, 0xf6, 0x6d, 0xef, 0xc8, 0xf6,
	0x2e, 0xf7, 0x7c, 0xdb, 0xbb, 0x64, 0x75, 0xbb, 0x97, 0x7c, 0xef, 0xe8, 0x72, 0xd7, 0x73, 0x03,
	0x97, 0x64, 0x59, 0xdd, 0x2e, 0xff, 0xbb, 0x4c, 0x72, 0xd1, 0x6c, 0xd3, 0x5d, 0x6e, 0x3b, 0x75,
	0xcf, 0x5d, 0xf6, 0xbd, 0xa3, 0x65, 0xf6, 0xdb, 0xe2, 0xb3, 0x4d, 0xd7, 0x6d, 0xb6, 0x6c, 0x4a,
	0xb9, 0xdf, 0x3b, 0xb8, 0x6c, 0x75, 0xfa, 0x94, 0x60, 0x71, 0x89, 0xb5, 0xe0, 0x07, 0x56, 0xe0,
	0xd4, 0x85, 0xfa, 0x69, 0x06, 0xfb, 0x33, 0xac, 0x70, 0xdd, 0x6d, 0xb7, 0xdd, 0x0e, 0xfb, 0xc3,
	0x0a, 0x9f, 0x13, 0x79, 0x97, 0xf9, 0x26, 0xff, 0xb0, 0x62, 0xcb, 0xac, 0x58, 0xdd, 0xed, 0x04,
	0x76, 0x27, 0x90, 0x2a, 0x25, 0x39, 0xfc, 0x2f, 0x2b, 0x7f, 0x8d, 0x95, 0xdf, 0xb7, 0x0f, 0xad,
	0x23, 0xc7, 0xed, 0x89, 0x75, 0x87, 0x79, 0x83, 0xaf, 0x08, 0x33, 0xdd, 0x96, 0xd5, 0x11, 0x08,
	0x70, 0x92, 0xfc, 0xc3, 0x8a, 0x9d, 0x67, 0xc5, 0x02, 0xcf, 0xaa, 0x3f, 0x12, 0xca, 0x91, 0x34,
	0xfd, 0x37, 0xc2, 0xb6, 0x55, 0xaf, 0xbb, 0x3d, 0x89, 0x6d, 0x96, 0xc3, 0xff, 0x46, 0x18, 0x08,
	0xdc, 0x86, 0x2b, 0x56, 0xec, 0x36, 0xe8, 0x3f, 0xb4, 0x98, 0x79, 0x00, 0x73, 0xeb, 0x9e, 0x6d,
	0x05, 0xf6, 0x9a, 0xeb, 0x3e, 0x6a, 0x5b, 0xde, 0xa3, 0x9a, 0xfd, 0xe5, 0x9e, 0xed, 0x07, 0xe8,
	0x05, 0x00, 0x86, 0xc3, 0x9e, 0xd3, 0x58, 0x30, 0x4e, 0x1b, 0xe7, 0xab, 0xb5, 0x2a, 0xcb, 0xd9,
	0x6e, 0xa0, 0x67, 0x60, 0x0c, 0x63, 0x8a, 0x7f, 0x2b, 0x92, 0xdf, 0xca, 0x38, 0xb9, 0xdd, 0x40,
	0x73, 0x50, 0x76, 0xbd, 0x26, 0xce, 0x1f, 0x21, 0xf9, 0xa3, 0xae, 0xd7, 0xdc, 0x6e, 0x98, 0x7f,
	0x66, 0xc0, 0x7c, 0xb4, 0x21, 0xbf, 0xeb, 0x76, 0x7c, 0x1b, 0x6d, 0x42, 0xa9, 0x61, 0x05, 0x16,
	0x69, 0x63, 0x7c, 0xe5, 0xb5, 0x65, 0x95, 0x44, 0x2d, 0xab, 0x69, 0x97, 0x37, 0xac, 0xc0, 0xaa,
	0x11, 0x72, 0x84, 0xa0, 0x54, 0x77, 0x1b, 0x36, 0x61, 0x67, 0xa4, 0x46, 0xbe, 0xd1, 0x02, 0x8c,
	0xb5, 0x6d, 0xdf, 0xb7, 0x9a, 0x36, 0xe3, 0x86, 0x27, 0x17, 0x5f, 0x81, 0x12, 0xa6, 0x45, 0xa7,
	0x60, 0x7c, 0x9f, 0x55, 0x3a, 0xe8, 0x27, 0xf0, 0xac, 0xed, 0x86, 0x79, 0x1d, 0x16, 0x6b, 0xb6,
	0xd5, 0xe0, 0x2d, 0xaf, 0x53, 0x04, 0x38, 0x4a, 0x02, 0x0c, 0x86, 0x08, 0x83, 0xf9, 0x43, 0x03,
	0x9e, 0x53, 0xd2, 0xb1, 0x4e, 0x7f, 0x20, 0x75, 0xfa, 0x75, 0x75, 0xa7, 0x13, 0x2a, 0xc8, 0xdf,
	0xf3, 0xcf, 0xb2, 0x9e, 0xaf, 0x43, 0x95, 0x77, 0xd3, 0x5f, 0x30, 0x4e, 0x8f, 0x9c, 0x1f, 0x5f,
	0x39, 0xa7, 0x66, 0x23, 0xca, 0xc2, 0x80, 0xce, 0xbc, 0x01, 0x67, 0x15, 0x4c, 0xae, 0x5b, 0x81,
	0xdd, 0x74, 0xbd, 0xbe, 0x3f, 0x14, 0xa6, 0xff, 0x32, 0xe0, 0xa5, 0xe4, 0x0a, 0x18, 0x5e, 0xbb,
	0x12, 0x5e, 0x37, 0x53, 0xe3, 0x15, 0xab, 0xe9, 0x58, 0x80, 0xab, 0xf3, 0x5a, 0x33, 0x02, 0x17,
	0xd2, 0x99, 0x5f, 0x84, 0x17, 0x44, 0x6e, 0xd7, 0xfa, 0x9c, 0xd1, 0x61, 0x90, 0x61, 0x89, 0xe5,
	0xd5, 0x0c, 0x66, 0x1f, 0xf0, 0xac, 0xed, 0x86, 0xf9, 0x23, 0x03, 0x5e, 0xd4, 0xd5, 0xcd, 0xd0,
	0xbc, 0x23, 0xa1, 0xf9, 0xe6, 0x70, 0x34, 0xe3, 0x75, 0x3c, 0x25, 0x02, 0x78, 0x08, 0x73, 0x1b,
	0x76, 0xcb, 0x8e, 0xaf, 0x5f, 0xc3, 0x26, 0x76, 0xe6, 0x15, 0xec, 0x16, 0xcc, 0x47, 0x5b, 0x62,
	0x68, 0x66, 0xea, 0xbe, 0x79, 0x19, 0x66, 0xb7, 0xec, 0x60, 0xf7, 0xd0, 0xf2, 0xec, 0xc6, 0x4e,
	0xcb, 0xea, 0x0c, 0x9d, 0x23, 0xff, 0x60, 0xc0, 0x5c, 0x84, 0x82, 0x35, 0xbc, 0x21, 0x0d, 0xe3,
	0x15, 0x35, 0x78, 0x4a, 0xd2, 0xe3, 0x18, 0xbd, 0x09, 0x9f, 0x54, 0xbb, 0x87, 0xb7, 0x33, 0x3e,
	0x80, 0xa7, 0xd5, 0x3c, 0x08, 0x0c, 0x8c, 0xfb, 0xe1, 0xb7, 0x6f, 0xbe, 0x06, 0xf3, 0x21, 0x7b,
	0xbb, 0x3d, 0xef, 0xc8, 0x1e, 0x2a, 0xfe, 0xe6, 0x3f, 0x1b, 0xf0, 0x4c, 0x8c, 0x86, 0xe1, 0x71,
	0x4b, 0xc2, 0x63, 0x65, 0x08, 0x1e, 0x32, 0x71, 0x7e, 0x44, 0x7e, 0x8e, 0x21, 0xb2, 0x0d, 0x53,
	0x0c, 0x11, 0x9f, 0xd4, 0xcc, 0x31, 0x31, 0x93, 0x30, 0x61, 0x4c, 0x4c, 0xfa, 0x42, 0xca, 0x37,
	0x57, 0x84, 0x3e, 0xa6, 0xdd, 0x71, 0xfe, 0xd5, 0x80, 0x85, 0x38, 0x11, 0x43, 0x66, 0x4b, 0x42,
	0xe6, 0xea, 0x10, 0x64, 0x8e, 0x6d, 0xaf, 0xb9, 0xcf, 0xa0, 0xb9, 0x0d, 0xd3, 0x0c, 0x1a, 0xa6,
	0x41, 0x70, 0x6c, 0xce, 0xca, 0x9c, 0x70, 0xcd, 0x4b, 0x66, 0x83, 0xc1, 0xca, 0x92, 0xbe, 0x34,
	0x83, 0xb6, 0x5c, 0xab, 0x95, 0x6d, 0x06, 0x51, 0x8a, 0x5c, 0x33, 0x48, 0x24, 0x3d, 0xce, 0x19,
	0xd4, 0x74, 0xad, 0x56, 0xaa, 0x19, 0x44, 0x18, 0x60, 0x33, 0x08, 0x7f, 0xfb, 0xe6, 0x35, 0x78,
	0x76, 0x30, 0x6c, 0x87, 0x56, 0xab, 0x65, 0x77, 0x9a, 0xf6, 0x50, 0x40, 0x7e, 0x6c, 0xc0, 0xa2,
	0x8a, 0x8c, 0xa1, 0xb2, 0x2d, 0xa1, 0x72, 0x7d, 0x98, 0xb4, 0x44, 0xe9, 0xf3, 0x43, 0xf3, 0xf3,
	0x0c, 0x9a, 0x1a, 0x9c, 0xe0, 0xf2, 0xc2, 0x2b, 0x1f, 0xb2, 0x45, 0x44, 0x59, 0x99, 0xf1, 0xe5,
	0x0c, 0xdf, 0xbc, 0x22, 0xc8, 0xc0, 0xfb, 0xd6, 0xbe, 0x33, 0x7c, 0x46, 0xfd, 0xc0, 0x10, 0x96,
	0x27, 0x46, 0x92, 0x45, 0x67, 0x55, 0xd3, 0xe6, 0x47, 0xe7, 0x2e, 0x43, 0xe7, 0x16, 0xb0, 0xe5,
	0x62, 0xef, 0x10, 0x57, 0xcc, 0x91, 0x39, 0x93, 0x84, 0x0c, 0x65, 0x81, 0x09, 0x1c, 0x49, 0xf8,
	0xe6, 0x97, 0xe0, 0xe4, 0xae, 0xd3, 0xec, 0xf4, 0xba, 0xf7, 0xdd, 0xc8, 0x34, 0xc2, 0x02, 0x29,
	0xe0, 0x81, 0x93, 0x39, 0x76, 0xcc, 0x1f, 0x1a, 0x30, 0x2b, 0x37, 0xc0, 0xd0, 0x5b, 0x97, 0xd0,
	0xbb, 0xac, 0xe1, 0x5b, 0x41, 0x99, 0x1f, 0xbb, 0x2f, 0x32, 0xec, 0xde, 0x86, 0xea, 0x43, 0xd7,
	0xe9, 0x90, 0x29, 0xc7, 0xda, 0x7f, 0x51, 0xdd, 0xfe, 0x07, 0xae, 0xd3, 0x21, 0x6d, 0x57, 0x1e,
	0xb2, 0x2f, 0x34, 0x0b, 0xa3, 0xe4, 0x88, 0xc5, 0xda, 0xa4, 0x09, 0xf3, 0x02, 0x4c, 0xdf, 0x76,
	0xfc, 0x20, 0xd5, 0x4a, 0xf4, 0x1d, 0x03, 0x66, 0x06, 0x85, 0x19, 0x1c, 0x37, 0x25, 0x38, 0x96,
	0xd4, 0xec, 0x44, 0xa9, 0xf2, 0x43, 0xf1, 0x01, 0x83, 0x62, 0x0d, 0x2a, 0x1e, 0xab, 0x8c, 0x49,
	0xd0, 0xcb, 0x43, 0x90, 0x60, 0xa5, 0x6b, 0x21, 0x9d, 0xd9, 0x86, 0x05, 0x3e, 0x4e, 0xb1, 0xd5,
	0xe7, 0x0c, 0x4c, 0x84, 0xb3, 0x77, 0x80, 0xc4, 0x78, 0x98, 0x97, 0x43, 0xa2, 0x3e, 0x31, 0xe0,
	0x59, 0x45, 0x7b, 0x0c, 0xc7, 0xf7, 0x25, 0x1c, 0xaf, 0x25, 0x8b, 0xd5, 0x31, 0xae, 0x5a, 0x87,
	0x0c, 0xd0, 0x0f, 0x60, 0x8a, 0xc8, 0x56, 0xd8, 0x43, 0xc6, 0xc9, 0x59, 0x3d, 0xac, 0x03, 0x2e,
	0x26, 0x1f, 0x8a, 0x49, 0x8d, 0xa8, 0x5d, 0x86, 0x59, 0x2c, 0x07, 0xe9, 0x17, 0xfa, 0xef, 0x1b,
	0x30, 0x17, 0xa1, 0xc8, 0xb2, 0xf3, 0x29, 0x49, 0xf3, 0x03, 0x75, 0x8f, 0x01, 0xb5, 0x15, 0x93,
	0xbc, 0xa5, 0x34, 0x10, 0xc5, 0xc5, 0xcf, 0x1a, 0x2c, 0x30, 0xd2, 0x92, 0xfe, 0x2c, 0x54, 0xc8,
	0xd2, 0x38, 0x00, 0x64, 0x8c, 0xa4, 0x73, 0x88, 0xdc, 0xbf, 0x1b, 0x30, 0x17, 0x69, 0x23, 0x0b,
	0x82, 0x4a, 0xd2, 0xfc, 0x08, 0xfe, 0x02, 0x43, 0xf0, 0x06, 0x00, 0x11, 0x35, 0xd2, 0x2b, 0xc6,
	0xc1, 0x29, 0x3d, 0x86, 0xb4, 0x75, 0xb2, 0xf2, 0x91, 0x4f, 0x8d, 0x78, 0x2d, 0xd1, 0xc5, 0x29,
	0xdd, 0xee, 0xf8, 0x5d, 0x03, 0x4e, 0x08, 0xa5, 0x19, 0x28, 0xef, 0x49, 0xa0, 0x5c, 0xd4, 0x8b,
	0xd5, 0x31, 0x01, 0x32, 0x50, 0xa6, 0xa2, 0x22, 0xf5, 0xca, 0x30, 0x38, 0xe2, 0xe2, 0x74, 0x09,
	0x10, 0x66, 0xed, 0x8e, 0xe5, 0x3d, 0xb2, 0xbd, 0xe1, 0xc6, 0x8b, 0xbf, 0x33, 0xe0, 0xa4, 0x54,
	0x9e, 0x61, 0xb0, 0x26, 0x61, 0xb0, 0xac, 0xc7, 0x20, 0x42, 0x98, 0x1f, 0x85, 0x5b, 0xa1, 0x58,
	0x8c, 0xb5, 0x69, 0x9d, 0x0c, 0x84, 0x97, 0xd4, 0x8d, 0xd3, 0x86, 0x43, 0x04, 0x38, 0x91, 0xf9,
	0x9f, 0x06, 0xbc, 0xb8, 0x65, 0x07, 0x3b, 0x76, 0xa7, 0xe1, 0x74, 0x9a, 0x54, 0x73, 0x58, 0xad,
	0x07, 0x8e, 0xdb, 0x19, 0x8a, 0x86, 0x30, 0x7f, 0x8a, 0xc2, 0xfc, 0x41, 0xf3, 0x50, 0x76, 0x0f,
	0x0e, 0x7c, 0x3b, 0x20, 0x3c, 0x8f, 0xd4, 0x58, 0x0a, 0x4b, 0x60, 0xcb, 0x69, 0x3b, 0xc1, 0x42,
	0x89, 0x4a, 0x20, 0x49, 0xe0, 0x6e, 0x1f, 0x78, 0x6e, 0x7b, 0x61, 0x94, 0x76, 0x1b, 0x7f, 0xa3,
	0x29, 0x28, 0x06, 0xee, 0x42, 0x99, 0xe4, 0x14, 0x03, 0x17, 0x9d, 0x83, 0x29, 0xdf, 0xf5, 0x82,
	0xbd, 0xae, 0xe5, 0x59, 0x6d, 0x3b, 0xb0, 0xbd, 0x85, 0x31, 0xd2, 0xe0, 0x24, 0xce, 0xdd, 0xe1,
	0x99, 0x61, 0xb1, 0x86, 0xe3, 0xd9, 0xa4, 0x0b, 0x0b, 0x95, 0x41, 0xb1, 0x0d, 0x9e, 0x89, 0xe7,
	0xf7, 0x29, 0x6d, 0x97, 0xd9, 0x80, 0xde, 0x95, 0x06, 0xf4, 0x2d, 0xad, 0xb6, 0x97, 0x54, 0x49,
	0xfe, 0xc1, 0x7d, 0x9f, 0x0d, 0xee, 0x7b, 0x50, 0xe9, 0xd2, 0x06, 0x34, 0xa3, 0xcb, 0x4c, 0xe7,
	0x8c, 0x8b, 0x81, 0x7c, 0x73, 0x2a, 0x76, 0xdc, 0xc6, 0x5b, 0xf9, 0x8e, 0xe7, 0x36, 0x3d, 0xdb,
	0x1f, 0x2e, 0xe3, 0xff, 0x48, 0x8f, 0xdb, 0x32, 0x4d, 0xc6, 0xe3, 0xb6, 0x8a, 0xf8, 0x38, 0xb4,
	0xe0, 0xe8, 0x8c, 0xbf, 0xa0, 0xe1, 0x40, 0xd1, 0xbc, 0x30, 0xe9, 0x6f, 0xc2, 0x4b, 0x5b, 0x76,
	0xb0, 0xde, 0xf3, 0x3c, 0xbb, 0x33, 0xd8, 0xec, 0xfc, 0xcf, 0x3b, 0xc1, 0xe1, 0x3a, 0x5e, 0x15,
	0x87, 0x42, 0xf4, 0x89, 0x01, 0xe7, 0x86, 0xd4, 0xc0, 0x00, 0xbb, 0x2f, 0x01, 0xf6, 0x9e, 0x16,
	0xb0, 0xe1, 0x55, 0xe5, 0x87, 0x6f, 0x87, 0xc1, 0xf7, 0x7e, 0x0c, 0x3e, 0xcd, 0x62, 0x1d, 0x72,
	0x21, 0x31, 0x20, 0x00, 0xf8, 0x36, 0x9c, 0x1e, 0xf0, 0x4c, 0x8f, 0x16, 0xe9, 0xc1, 0xfb, 0xb1,
	0x01, 0x67, 0x12, 0xa8, 0x19, 0x70, 0x3b, 0x12, 0x70, 0xef, 0x0c, 0x03, 0x4e, 0x53, 0x4d, 0x7e,
	0xd0, 0x6e, 0x33, 0xd0, 0x36, 0x62, 0xa0, 0x9d, 0x57, 0xf3, 0x42, 0x38, 0xd0, 0x01, 0xf6, 0x21,
	0xd6, 0x62, 0xad, 0x23, 0xbb, 0x66, 0x05, 0xf6, 0x2d, 0xd7, 0x4b, 0x69, 0xe0, 0xd1, 0x2d, 0xb0,
	0xf2, 0x45, 0xcd, 0x48, 0xf4, 0xa2, 0x66, 0x1e, 0xca, 0x9e, 0x15, 0x38, 0x9d, 0x26, 0x5b, 0x68,
	0x59, 0x0a, 0xaf, 0x7b, 0x8b, 0x2a, 0x26, 0xb2, 0x98, 0x00, 0xf4, 0xf4, 0xf9, 0xa1, 0xae, 0x0d,
	0x94, 0x69, 0xde, 0x2d, 0xc6, 0x7f, 0xa2, 0x32, 0xcd, 0xdb, 0x27, 0x45, 0x6b, 0x93, 0x75, 0x31,
	0x69, 0x3a, 0xb0, 0xb0, 0xe1, 0xf8, 0x2d, 0xe7, 0xd1, 0x13, 0x87, 0xdb, 0xfc, 0x91, 0x01, 0xcf,
	0x2a, 0xda, 0xca, 0x72, 0x42, 0xd1, 0x92, 0xe7, 0x07, 0xf5, 0x01, 0x03, 0xf5, 0x0e, 0x4c, 0x73,
	0xe6, 0x1b, 0xb4, 0x15, 0xc6, 0xca, 0x4b, 0x89, 0xa8, 0x32, 0x8e, 0x6a, 0x7c, 0x44, 0x58, 0xda,
	0xfc, 0x53, 0x03, 0x4e, 0x0d, 0xb8, 0xdd, 0x75, 0xda, 0x4e, 0xcb, 0x7a, 0xc2, 0xe2, 0xfc, 0x0e,
	0x94, 0x02, 0xab, 0xe9, 0x2f, 0x94, 0x54, 0xb3, 0x8f, 0x6d, 0x80, 0x91, 0xab, 0x9f, 0xed, 0xc0,
	0x6e, 0xd7, 0x08, 0x95, 0xf9, 0x51, 0x11, 0x4e, 0xeb, 0x19, 0x66, 0x83, 0x74, 0x4f, 0x1a, 0xa4,
	0xb7, 0x87, 0x0d, 0x92, 0xba, 0x96, 0xfc, 0x63, 0xf5, 0x88, 0x8d, 0x55, 0x1d, 0x9e, 0x89, 0x8c,
	0xd5, 0x9e, 0x4f, 0x9b, 0x4a, 0x36, 0x14, 0xc8, 0x63, 0xc6, 0xb8, 0xab, 0xcd, 0xd5, 0x55, 0xd9,
	0xe6, 0xbf, 0x19, 0x30, 0x8f, 0x67, 0xf1, 0x03, 0xdf, 0xf6, 0x36, 0xec, 0xc0, 0x72, 0x5a, 0xa1,
	0x4a, 0xf0, 0x3c, 0x54, 0x0f, 0x1c, 0xcf, 0x0f, 0x3a, 0x56, 0xdb, 0xe6, 0xf7, 0xbf, 0x61, 0x06,
	0x5a, 0x84, 0x4a, 0xcb, 0x62, 0x3f, 0xd2, 0xf1, 0x0b, 0xd3, 0x78, 0x08, 0xad, 0x23, 0x2b, 0xb0,
	0xbc, 0xbd, 0x9e, 0xd7, 0xe2, 0x43, 0x48, 0x73, 0x1e, 0x78, 0x2d, 0x74, 0x15, 0xca, 0x4d, 0xbb,
	0xd3, 0xb0, 0x3d, 0xb2, 0x22, 0x4d, 0xad, 0x3c, 0xa7, 0x1c, 0xc4, 0x2d, 0x52, 0xa4, 0xc6, 0x8a,
	0xa2, 0x19, 0x18, 0x69, 0xb8, 0xfb, 0x4c, 0x2f, 0xc4, 0x9f, 0xa2, 0x60, 0x95, 0x35, 0x82, 0x35,
	0x26, 0x1e, 0xe4, 0xfe, 0xbc, 0x08, 0xcf, 0xc4, 0xba, 0x9a, 0x45, 0x93, 0xd1, 0x10, 0xe7, 0x1f,
	0xe9, 0x8f, 0x0d, 0x36, 0xd4, 0x4f, 0x39, 0xd4, 0xe6, 0x57, 0x06, 0xc8, 0xdd, 0xb2, 0xed, 0xc6,
	0xbe, 0x55, 0x0f, 0xaf, 0xd9, 0x16, 0xa1, 0x72, 0xc0, 0xb2, 0x18, 0xe7, 0x61, 0x5a, 0xd8, 0x7a,
	0x8a, 0xe2, 0xd6, 0x23, 0x8e, 0xdc, 0x88, 0x66, 0xe4, 0x4a, 0xe2, 0xc8, 0xfd, 0xbd, 0x01, 0x0b,
	0xf1, 0xf6, 0xb3, 0xdc, 0x6c, 0xe8, 0xa8, 0xf3, 0x8f, 0xdd, 0x7a, 0x68, 0x4f, 0x94, 0xfb, 0xaf,
	0x3c, 0x86, 0x2f, 0x4b, 0x6d, 0x87, 0x04, 0xe6, 0x97, 0xe0, 0x24, 0x3e, 0x8e, 0xe2, 0x5f, 0xd3,
	0xdc, 0x04, 0xe2, 0x1f, 0xba, 0x2d, 0xab, 0x23, 0xd8, 0x2e, 0x70, 0x52, 0x6f, 0xbb, 0xf8, 0x5b,
	0x03, 0x66, 0xe5, 0x06, 0xb2, 0x18, 0x60, 0x55, 0x94, 0xc7, 0x01, 0x58, 0x95, 0x74, 0x0e, 0x73,
	0x9e, 0x6c, 0x80, 0x0d, 0xdb, 0xae, 0xf4, 0xd8, 0x97, 0xf9, 0x55, 0xee, 0xad, 0x92, 0x05, 0x32,
	0x6e, 0xcc, 0x2e, 0x4a, 0xc6, 0x6c, 0x84, 0x21, 0xe8, 0xfb, 0xec, 0x54, 0x4a, 0xbe, 0xd1, 0x69,
	0x18, 0x77, 0x02, 0xbb, 0xed, 0xef, 0xd8, 0xde, 0x86, 0xd5, 0x67, 0x0a, 0x93, 0x98, 0x65, 0x7e,
	0x2f, 0x74, 0x63, 0x89, 0x61, 0x9a, 0xc1, 0x8d, 0xe5, 0x29, 0x43, 0xf5, 0x12, 0xa0, 0x2d, 0x3b,
	0x48, 0x0b, 0xa9, 0xf9, 0x6d, 0x03, 0x4e, 0x4a, 0xe5, 0xb3, 0x98, 0x3d, 0x14, 0x84, 0x3f, 0xe5,
	0xde, 0xff, 0x4e, 0x11, 0xe6, 0x1e, 0x74, 0x1b, 0x0a, 0xa1, 0x9a, 0x82, 0x62, 0xd8, 0xf9, 0xa2,
	0xa3, 0xd5, 0x58, 0x56, 0x60, 0x94, 0x5e, 0xe0, 0x8d, 0x10, 0x9d, 0xe4, 0x79, 0xb9, 0xe5, 0x81,
	0x63, 0x18, 0x31, 0xa1, 0xd3, 0xa2, 0x54, 0xbd, 0xee, 0x73, 0x35, 0x46, 0xa3, 0x5e, 0x2b, 0xb9,
	0x5a, 0xde, 0xb0, 0xfa, 0xfe, 0x66, 0x27, 0xf0, 0xfa, 0x54, 0x68, 0x17, 0x3f, 0x07, 0xd5, 0x30,
	0x0b, 0xaf, 0xdd, 0x8f, 0xec, 0x3e, 0xe3, 0x19, 0x7f, 0xa2, 0xab, 0x30, 0x7a, 0x64, 0xb5, 0x7a,
	0x14, 0xd2, 0xf1, 0x95, 0x17, 0x94, 0x3b, 0xc0, 0x86, 0x45, 0xb4, 0x24, 0xbf, 0x46, 0xcb, 0xbe,
	0x55, 0x7c, 0xc3, 0x20, 0xa2, 0x1e, 0xe5, 0x20, 0x8b, 0xa8, 0xab, 0x69, 0x7f, 0xca, 0x83, 0xfd,
	0x2e, 0x98, 0x5b, 0x76, 0x80, 0x3f, 0x49, 0x7f, 0xc9, 0x09, 0x4d, 0xe9, 0x7b, 0xc3, 0xd7, 0x59,
	0x43, 0x5c, 0x67, 0xcd, 0xaf, 0x15, 0xe1, 0x6c, 0x22, 0x3d, 0x03, 0xa8, 0x26, 0x01, 0x74, 0x43,
	0x6f, 0x30, 0x1a, 0x52, 0x51, 0x7e, 0xb4, 0xbe, 0xc0, 0xd0, 0xda, 0x01, 0x7e, 0x16, 0xda, 0xa3,
	0x06, 0xdf, 0x44, 0x7b, 0x3b, 0x6f, 0x5f, 0x3e, 0xb9, 0x4e, 0xb0, 0x1a, 0x48, 0xae, 0xf9, 0x79,
	0x78, 0x41, 0xc1, 0xf9, 0x86, 0x35, 0x14, 0x3d, 0xac, 0xac, 0x34, 0xac, 0xfe, 0x5e, 0xa7, 0xd7,
	0xde, 0xb7, 0x3d, 0x36, 0x87, 0xaa, 0x0d, 0xab, 0x7f, 0x97, 0x64, 0x98, 0xff, 0xcd, 0x8c, 0x8f,
	0xaa, 0x9a, 0xb3, 0xf8, 0x2d, 0x25, 0xd7, 0xf1, 0x34, 0x42, 0xba, 0x0e, 0xe7, 0x13, 0x84, 0x61,
	0xb5, 0xd3, 0x48, 0x81, 0xae, 0xf9, 0x5b, 0x45, 0x78, 0x35, 0x45, 0x2d, 0x0c, 0xc9, 0x2f, 0x48,
	0x48, 0x6e, 0x64, 0x96, 0x50, 0xb9, 0xba, 0xa7, 0x11, 0xd4, 0xff, 0x30, 0xa0, 0xc2, 0x5d, 0xb5,
	0x62, 0x4b, 0xf9, 0x67, 0x60, 0x8c, 0x15, 0x56, 0xaf, 0x8b, 0xdc, 0x11, 0x85, 0x9f, 0xea, 0x78,
	0x69, 0xb4, 0x04, 0x25, 0xcc, 0x04, 0xe9, 0xc6, 0xf8, 0xca, 0x33, 0x1a, 0x5d, 0xaf, 0x46, 0x0a,
	0xe1, 0x6e, 0xd7, 0xc9, 0x86, 0xdf, 0x60, 0xba, 0x04, 0x4f, 0xa2, 0x7b, 0x30, 0x13, 0x76, 0x97,
	0xf5, 0x85, 0x28, 0xdc, 0x3a, 0x9b, 0x6e, 0xe4, 0x48, 0x5b, 0xe3, 0xc7, 0x78, 0x9e, 0x61, 0x7e,
	0xd3, 0x80, 0xe9, 0x88, 0x9b, 0x5c, 0xac, 0xd3, 0xf2, 0xd1, 0xba, 0x18, 0x3d, 0x5a, 0xcf, 0xc2,
	0xa8, 0xd3, 0x1e, 0x0c, 0x11, 0x4d, 0xe0, 0xdc, 0xc0, 0x09, 0x5a, 0x36, 0x57, 0xc9, 0x49, 0x02,
	0xab, 0xfd, 0x12, 0xdf, 0xd5, 0x5a, 0x98, 0x8e, 0x3a, 0x28, 0x96, 0x63, 0x0e, 0x8a, 0xdf, 0x31,
	0x60, 0x42, 0xf4, 0x7e, 0x8a, 0x31, 0xfa, 0x1c, 0x54, 0xa9, 0x0b, 0xd5, 0x80, 0xcf, 0x0a, 0xcd,
	0xc8, 0xc8, 0x66, 0x78, 0xcd, 0x35, 0x2a, 0x5c, 0x73, 0xe1, 0x61, 0xf1, 0x7b, 0xed, 0xb6, 0xe5,
	0xf5, 0x19, 0x73, 0x3c, 0x89, 0xae, 0x41, 0x95, 0x79, 0x56, 0xec, 0xf7, 0xc9, 0xe9, 0x31, 0x61,
	0x88, 0x2b, 0xb4, 0xe4, 0x5a, 0xdf, 0xfc, 0x17, 0x03, 0x60, 0xe0, 0xe1, 0x16, 0xeb, 0x8d, 0x56,
	0x6b, 0xcf, 0x08, 0x78, 0xa3, 0x87, 0xcf, 0x4f, 0x6e, 0x87, 0x03, 0xce, 0xd3, 0x83, 0x5e, 0x96,
	0x35, 0xbd, 0x1c, 0x4b, 0xe8, 0x65, 0x25, 0x6d, 0x2f, 0xff, 0x2f, 0xec, 0x25, 0xf1, 0x85, 0x50,
	0xf4, 0x52, 0xad, 0x68, 0x67, 0xe9, 0x25, 0x9e, 0x30, 0xd4, 0x84, 0xcb, 0x46, 0x8c, 0x27, 0xf1,
	0x59, 0x32, 0xb0, 0xbc, 0xa6, 0xcd, 0x3b, 0xc9, 0x52, 0x12, 0x2e, 0x63, 0x11, 0x5c, 0x04, 0x04,
	0x2a, 0x09, 0x08, 0x54, 0xd3, 0x22, 0xf0, 0x61, 0x11, 0xc6, 0x05, 0x6f, 0x9a, 0x18, 0x04, 0xe2,
	0xad, 0x73, 0x51, 0xbe, 0x75, 0xfe, 0xf4, 0x80, 0xf0, 0x51, 0x11, 0xa6, 0x23, 0xce, 0x56, 0x31,
	0x20, 0xa2, 0x9e, 0x1f, 0xc5, 0xb8, 0xe7, 0xc7, 0xa7, 0x07, 0x90, 0xdf, 0x2e, 0x42, 0x85, 0x7b,
	0xc8, 0xc4, 0x90, 0xb8, 0x02, 0x25, 0xe2, 0x69, 0x44, 0x37, 0x99, 0xe4, 0xa3, 0x01, 0x29, 0x99,
	0x6d, 0x83, 0x79, 0x0b, 0xca, 0x78, 0x83, 0xe8, 0xf9, 0xcc, 0xbe, 0xa3, 0x71, 0x35, 0xa5, 0x57,
	0x91, 0xbb, 0xa4, 0x64, 0x8d, 0x51, 0x60, 0xac, 0xfd, 0xc0, 0xf2, 0xc2, 0xb5, 0x91, 0x24, 0xf0,
	0x01, 0xc2, 0xee, 0x34, 0x18, 0x9c, 0xf8, 0x13, 0x5d, 0x0d, 0x31, 0xa6, 0x0b, 0xa2, 0xda, 0x86,
	0x74, 0x9f, 0x14, 0xe1, 0x03, 0x60, 0x7e, 0x5c, 0x84, 0x49, 0xc9, 0x79, 0x23, 0x86, 0xcc, 0x4d,
	0xa8, 0x0e, 0xfc, 0x64, 0x28, 0x3c, 0x67, 0x74, 0xf0, 0x0c, 0x5c, 0x40, 0x06, 0x34, 0x9f, 0x12,
	0xa0, 0x7e, 0xb7, 0x08, 0xd5, 0xd0, 0x25, 0x21, 0x06, 0xd2, 0x55, 0x18, 0xa5, 0x1e, 0x1e, 0x4a,
	0x25, 0x65, 0x00, 0x10, 0x75, 0x68, 0xa0, 0x65, 0x3f, 0x25, 0xc0, 0xfc, 0x8f, 0x01, 0x33, 0x51,
	0xc7, 0xb3, 0x27, 0xb3, 0xe9, 0x3c, 0x27, 0x4e, 0x7b, 0xb6, 0xb7, 0xf2, 0xd9, 0x8d, 0x5e, 0x0e,
	0x3d, 0x97, 0xf7, 0xfb, 0x7b, 0xb4, 0xca, 0x32, 0x73, 0x23, 0x60, 0x45, 0xb6, 0x49, 0xd5, 0xc2,
	0x1a, 0x35, 0xa6, 0x5b, 0xa3, 0x2a, 0xda, 0x35, 0xaa, 0x2a, 0xaf, 0x51, 0xe6, 0x6f, 0x14, 0x61,
	0x4e, 0xe9, 0xfb, 0xf4, 0xa4, 0x97, 0xda, 0xa7, 0x10, 0x8b, 0x4f, 0x0c, 0x38, 0x11, 0x73, 0xda,
	0x79, 0x52, 0x7b, 0xef, 0x53, 0xd8, 0xff, 0xff, 0x35, 0x60, 0x4a, 0xf6, 0xd7, 0xc1, 0x8a, 0xbc,
	0xe3, 0xef, 0x35, 0xec, 0x03, 0xab, 0xd7, 0xa2, 0xde, 0x5f, 0x95, 0x5a, 0xd5, 0xf1, 0x37, 0x68,
	0x06, 0xee, 0x04, 0x75, 0xe8, 0x11, 0xd4, 0x67, 0x9a, 0x41, 0xed, 0x9e, 0xe4, 0x26, 0x81, 0x82,
	0x41, 0xbe, 0x31, 0x81, 0x53, 0x77, 0x3b, 0x7b, 0x7e, 0xab, 0xd7, 0x64, 0x78, 0x54, 0x70, 0xc6,
	0x6e, 0xab, 0xd7, 0xc4, 0x3f, 0xe2, 0x42, 0xf4, 0x47, 0x06, 0x09, 0xce, 0x20, 0x3f, 0x22, 0x28,
	0xf5, 0x3a, 0x0e, 0xde, 0x7e, 0x47, 0x70, 0x6d, 0xf8, 0x1b, 0x7d, 0x16, 0xa6, 0xc9, 0xc3, 0x45,
	0xdb, 0xdb, 0x6b, 0xdb, 0xc1, 0xa1, 0xdb, 0xf0, 0x17, 0xc6, 0x54, 0x0f, 0x21, 0xf8, 0xbc, 0xa7,
	0x65, 0xef, 0x90, 0xa2, 0xb5, 0xa9, 0x40, 0x4c, 0xfa, 0xe6, 0xb7, 0x0c, 0x98, 0x55, 0x3a, 0x9f,
	0xf0, 0x9d, 0xd5, 0xc8, 0xbc, 0xb3, 0x16, 0xd3, 0xac, 0x8b, 0xa7, 0x61, 0xbc, 0x65, 0x05, 0xb6,
	0x1f, 0x7c, 0x8e, 0x18, 0xcf, 0xa8, 0x95, 0x58, 0xcc, 0x12, 0xc6, 0xb2, 0x24, 0x8d, 0x25, 0x87,
	0x84, 0x42, 0x45, 0xbe, 0xcd, 0xbf, 0x31, 0x60, 0x5e, 0xed, 0x47, 0x91, 0xc6, 0x4b, 0x36, 0x14,
	0xd5, 0xa2, 0x46, 0x2b, 0x1a, 0xd1, 0x49, 0x59, 0x49, 0x2b, 0x65, 0xe9, 0xce, 0x10, 0xe1, 0xd4,
	0x19, 0x13, 0xa6, 0x8e, 0xf9, 0x17, 0x06, 0xa0, 0xb8, 0x83, 0x43, 0x92, 0xd3, 0xe5, 0xd3, 0xd6,
	0x83, 0x3f, 0x31, 0x60, 0x52, 0xf2, 0x18, 0x10, 0x6c, 0xbb, 0x86, 0x68, 0xdb, 0xd5, 0x7a, 0x8b,
	0xe6, 0xf3, 0xba, 0x10, 0x2d, 0x02, 0xa3, 0xb2, 0x45, 0x60, 0x01, 0xc6, 0x7a, 0xc4, 0x62, 0xca,
	0xb7, 0x4e, 0x9e, 0x34, 0x0f, 0x60, 0x56, 0xe2, 0xf5, 0x0e, 0x35, 0x9d, 0xe8, 0xef, 0x3c, 0x86,
	0x9c, 0xf3, 0x07, 0xbc, 0x8d, 0x48, 0x1e, 0x21, 0x5f, 0x37, 0x60, 0x4a, 0xbe, 0x3c, 0x3e, 0x6e,
	0x54, 0xf4, 0xf6, 0x10, 0xa1, 0xf7, 0xa3, 0x72, 0xef, 0xef, 0xc1, 0x9c, 0xcc, 0xd4, 0x63, 0x76,
	0x9f, 0x3c, 0x06, 0x52, 0xde, 0x91, 0x1f, 0x77, 0x6f, 0x1f, 0xcb, 0x55, 0x21, 0x97, 0xa4, 0x7c,
	0xc3, 0x80, 0xe7, 0x95, 0x5d, 0x7b, 0x5c, 0x91, 0xe1, 0x5d, 0x19, 0xc9, 0xe5, 0x75, 0x71, 0x14,
	0x72, 0xc5, 0x2d, 0x54, 0x54, 0x91, 0x7c, 0x5c, 0xae, 0x5e, 0x84, 0xf0, 0x3d, 0xa7, 0x4d, 0xf1,
	0xaf, 0xd4, 0x84, 0x1c, 0xf3, 0xfb, 0x25, 0xa8, 0xf0, 0x3b, 0x80, 0x98, 0xc2, 0xc0, 0xf7, 0xc1,
	0xa2, 0xb0, 0x0f, 0xaa, 0xaf, 0x51, 0xb1, 0x46, 0xdb, 0x75, 0xea, 0x6c, 0x63, 0xc4, 0x9f, 0x78,
	0x77, 0x68, 0xd8, 0x7e, 0xdd, 0x73, 0xba, 0xc2, 0x52, 0x24, 0x66, 0x89, 0xc3, 0x57, 0xd6, 0x0e,
	0xdf, 0x98, 0x34, 0x7c, 0xb8, 0x3f, 0x74, 0x9d, 0xc3, 0x4c, 0xb3, 0xc3, 0xa9, 0x90, 0x83, 0x37,
	0x30, 0x72, 0xe9, 0xa1, 0x3c, 0x9a, 0x92, 0xa0, 0x02, 0xe4, 0xb6, 0x83, 0x14, 0x1a, 0xdc, 0x4a,
	0x41, 0xfa, 0x5b, 0x29, 0x71, 0x79, 0x1d, 0x8f, 0x2f, 0xaf, 0x54, 0xd9, 0x9f, 0x50, 0x28, 0xfb,
	0x93, 0x03, 0x65, 0xff, 0x35, 0xd6, 0x71, 0xd7, 0x5b, 0x98, 0x4a, 0xde, 0x68, 0x79, 0x39, 0x2c,
	0x5d, 0xe4, 0x32, 0x6c, 0x3a, 0xc9, 0xa3, 0x8e, 0x0f, 0x64, 0xf4, 0xfe, 0x0b, 0x9d, 0x62, 0x97,
	0xb6, 0xcc, 0x6e, 0x3c, 0x43, 0x58, 0x01, 0x27, 0xb4, 0x59, 0x3f, 0xb1, 0x0b, 0xb2, 0xbf, 0xc6,
	0x0b, 0x89, 0xca, 0x10, 0x1d, 0xb9, 0xe8, 0x30, 0x22, 0x17, 0x1d, 0x43, 0x5f, 0x70, 0xa3, 0x8b,
	0x80, 0x06, 0x05, 0x42, 0xc5, 0x8c, 0xca, 0xe4, 0x4c, 0x58, 0x8e, 0x2b, 0x68, 0x67, 0x61, 0x32,
	0x2c, 0x4d, 0x44, 0x9a, 0x0a, 0xea, 0x04, 0xcf, 0xbc, 0xcb, 0x1c, 0x45, 0x30, 0x24, 0x7b, 0xa2,
	0x39, 0xb4, 0x8a, 0x73, 0xa8, 0xb1, 0xfc, 0x0a, 0xb7, 0xed, 0xe1, 0x5e, 0xe2, 0xb9, 0x11, 0xf4,
	0xbb, 0xdc, 0x15, 0x85, 0x7c, 0xb3, 0xf9, 0x53, 0xe4, 0xf3, 0xc7, 0x74, 0x60, 0xb6, 0x66, 0xd7,
	0x6d, 0xe7, 0x88, 0xd2, 0x84, 0x6e, 0x43, 0x6f, 0x40, 0x99, 0x6a, 0xc3, 0x69, 0xde, 0x33, 0x92,
	0x45, 0x82, 0x95, 0xd7, 0xae, 0xb3, 0xe6, 0x26, 0xcc, 0x45, 0x9a, 0xca, 0xf5, 0xf0, 0xfa, 0x5b,
	0x06, 0xcc, 0xd4, 0x6c, 0xab, 0x91, 0xfd, 0xed, 0x55, 0x94, 0x2a, 0xff, 0x75, 0xc7, 0x7b, 0xec,
	0xba, 0xe3, 0x0d, 0x28, 0x37, 0x88, 0x1b, 0x11, 0x6b, 0xf8, 0xb4, 0xde, 0x75, 0x99, 0xba, 0x1b,
	0xd5, 0x58, 0x79, 0xf3, 0x7b, 0x06, 0x46, 0xc3, 0x6a, 0xe4, 0x7c, 0xd1, 0xa3, 0x24, 0xcd, 0xdf,
	0x9f, 0x4d, 0xd6, 0x9f, 0x77, 0x23, 0xfd, 0x39, 0x37, 0xc4, 0x97, 0x38, 0xd2, 0xa9, 0xbf, 0x34,
	0xe0, 0x04, 0xe6, 0x2c, 0xc7, 0x5b, 0x92, 0x18, 0x59, 0xfe, 0xce, 0xac, 0xb2, 0xce, 0xbc, 0x19,
	0xe9, 0xcc, 0x99, 0x04, 0x1f, 0xdf, 0x48, 0x47, 0xbe, 0x6d, 0xc0, 0x49, 0x02, 0x71, 0xc4, 0xa7,
	0x30, 0x95, 0x6f, 0x84, 0x82, 0xf0, 0x38, 0xae, 0xcb, 0xe5, 0xce, 0x24, 0xfb, 0xcf, 0x46, 0xba,
	0xf3, 0x57, 0x25, 0x80, 0x81, 0x0c, 0xea, 0x5f, 0x86, 0x6a, 0xf5, 0x7b, 0x6e, 0x69, 0x1d, 0x91,
	0x2d, 0xad, 0x91, 0xfd, 0xb3, 0x14, 0xdf, 0x3f, 0x11, 0xd3, 0x38, 0x46, 0xe9, 0xc1, 0x92, 0xa8,
	0x44, 0xa1, 0x2e, 0x5f, 0x16, 0x0f, 0xf2, 0x79, 0xac, 0x4b, 0xf9, 0xae, 0x40, 0xc4, 0x03, 0x4b,
	0x55, 0x3e, 0xb0, 0x88, 0x3b, 0x27, 0x44, 0x76, 0xce, 0x79, 0x28, 0xfb, 0x6e, 0xcf, 0xab, 0xdb,
	0x6c, 0x4f, 0x65, 0x29, 0xb4, 0x0a, 0x20, 0xbc, 0x6e, 0x9e, 0x50, 0xbd, 0xe1, 0x55, 0x99, 0x40,
	0x05, 0x22, 0x74, 0x1d, 0xca, 0xec, 0x09, 0xf0, 0x24, 0x21, 0x1f, 0x62, 0x20, 0x64, 0x85, 0xd1,
	0x25, 0x18, 0x0d, 0xdc, 0x86, 0xeb, 0xab, 0x77, 0x68, 0x12, 0x1d, 0xe8, 0xbe, 0xdb, 0x70, 0x6b,
	0xb4, 0x14, 0x5a, 0x13, 0x2e, 0xfb, 0xa6, 0x09, 0xc5, 0xcb, 0x4a, 0x8c, 0xd7, 0x78, 0x73, 0xe1,
	0x35, 0x65, 0x48, 0x67, 0x7e, 0xbd, 0x04, 0xd3, 0x91, 0xd9, 0xff, 0x58, 0x47, 0xdf, 0x9f, 0x09,
	0x96, 0x5e, 0xb0, 0x06, 0x52, 0x31, 0x91, 0x4b, 0x2a, 0x26, 0x33, 0x4b, 0xc5, 0x54, 0x4e, 0xa9,
	0xf8, 0xee, 0x08, 0x8c, 0x0b, 0xcb, 0x68, 0x2e, 0x13, 0xc2, 0xcf, 0x24, 0x41, 0x2f, 0x09, 0xe1,
	0x90, 0x4e, 0x64, 0x1e, 0xd2, 0xc9, 0x9c, 0x43, 0xfa, 0x83, 0x91, 0xd0, 0xb4, 0xc2, 0x06, 0x35,
	0x7a, 0xf2, 0x0a, 0x31, 0x2e, 0x2a, 0xed, 0xb1, 0x23, 0x9a, 0xf1, 0x2d, 0xc9, 0xe3, 0xfb, 0x38,
	0x1e, 0x08, 0xe8, 0x3a, 0x8c, 0x59, 0xf4, 0x79, 0x1e, 0x33, 0x4d, 0xaa, 0x47, 0x94, 0xde, 0x7a,
	0xd4, 0x78, 0x59, 0x74, 0x8d, 0xe9, 0xc5, 0x15, 0x95, 0xce, 0x26, 0x1f, 0x83, 0xef, 0xf7, 0xbb,
	0x36, 0xd3, 0x9c, 0xaf, 0x85, 0x83, 0x53, 0x55, 0xd9, 0x2a, 0xc3, 0x98, 0x27, 0xa4, 0x4c, 0x38,
	0x74, 0x92, 0xf8, 0x40, 0x5a, 0xf1, 0x39, 0x0f, 0x25, 0xac, 0xd4, 0x13, 0x31, 0x18, 0x5f, 0x99,
	0x5d, 0xa6, 0x71, 0xf8, 0x96, 0x79, 0x1c, 0xbe, 0xe5, 0xd5, 0x4e, 0xbf, 0x46, 0x4a, 0x08, 0x56,
	0xa0, 0x09, 0xc9, 0x42, 0x25, 0x1f, 0xaa, 0x27, 0x63, 0x87, 0xea, 0x73, 0x30, 0xfd, 0xa0, 0xeb,
	0xdb, 0x5e, 0x70, 0xaf, 0x6b, 0x33, 0xe9, 0x53, 0x1c, 0x17, 0xcc, 0x7f, 0x32, 0x60, 0x6e, 0xd7,
	0xb6, 0xbc, 0xfa, 0x61, 0x34, 0x30, 0x93, 0xde, 0xca, 0x12, 0xd8, 0x56, 0x5b, 0xd0, 0xfe, 0x71,
	0x92, 0x4e, 0x7c, 0xfa, 0x50, 0x74, 0x44, 0x7c, 0x28, 0x3a, 0x78, 0x56, 0x5a, 0x8a, 0x3e, 0x2b,
	0xa5, 0x62, 0x34, 0xaa, 0x11, 0xa3, 0x72, 0xe2, 0x32, 0x31, 0x16, 0x5f, 0x26, 0x84, 0x63, 0x49,
	0x45, 0x3c, 0x96, 0x5c, 0xf8, 0x15, 0x03, 0x26, 0xc4, 0x7b, 0x31, 0x34, 0x07, 0x27, 0xc4, 0xf4,
	0xde, 0xdd, 0x7b, 0x77, 0x37, 0x67, 0x0a, 0x68, 0x1c, 0xc6, 0x76, 0xef, 0xaf, 0xd6, 0xee, 0x6f,
	0x6e, 0xcc, 0x18, 0x68, 0x1a, 0xc6, 0xb7, 0xef, 0xee, 0xed, 0xd4, 0xee, 0x6d, 0xd5, 0x36, 0x77,
	0x77, 0x67, 0x8a, 0x98, 0x68, 0xfd, 0xde, 0x9d, 0x9d, 0xdb, 0x9b, 0xf7, 0x37, 0x37, 0xf6, 0x76,
	0x1f, 0xac, 0xaf, 0xe3, 0xec, 0x11, 0x39, 0xfb, 0xd6, 0xea, 0xf6, 0xed, 0x07, 0xb5, 0xcd, 0x99,
	0x12, 0x9a, 0x84, 0xea, 0xea, 0xda, 0xea, 0xdd, 0x8d, 0x7b, 0x77, 0x37, 0x37, 0x66, 0x46, 0x57,
	0xfe, 0xf0, 0x1d, 0x98, 0xc2, 0x12, 0xb0, 0xda, 0xed, 0xee, 0xda, 0xde, 0x91, 0x53, 0xb7, 0x51,
	0x1b, 0xa6, 0xe4, 0x58, 0x79, 0x68, 0x29, 0x5d, 0x44, 0x3d, 0x32, 0x3a, 0x8b, 0x17, 0xb3, 0x84,
	0xdf, 0x33, 0x0b, 0xe8, 0x2b, 0xf8, 0x18, 0x18, 0x8b, 0xba, 0xe6, 0xa3, 0x2b, 0x19, 0x22, 0xda,
	0xd1, 0x96, 0x5f, 0xcb, 0x1c, 0x03, 0xcf, 0x2c, 0xa0, 0xdf, 0x33, 0xe0, 0xf9, 0xa4, 0xa8, 0x6f,
	0xe8, 0xcd, 0x3c, 0x91, 0xe2, 0x28, 0x43, 0x6f, 0xe5, 0x0f, 0x32, 0x67, 0x16, 0xd0, 0xaf, 0x19,
	0x30, 0xaf, 0x8e, 0xa0, 0x86, 0xae, 0x66, 0x8b, 0xb7, 0x46, 0xb9, 0xb9, 0x96, 0x27, 0x48, 0x9b,
	0x59, 0xc0, 0xf2, 0x20, 0x87, 0x2d, 0xd3, 0xc9, 0x83, 0x32, 0x8c, 0x9a, 0x4e, 0x1e, 0xd4, 0x91,
	0xd0, 0xcc, 0x02, 0xea, 0xc2, 0xb4, 0x3c, 0xed, 0x7d, 0x5d, 0x7b, 0xca, 0xd5, 0x61, 0x51, 0x71,
	0x34, 0x0a, 0xe3, 0xe8, 0x58, 0xfb, 0x2d, 0x3b, 0x2e, 0x02, 0x3e, 0xcc, 0x44, 0x03, 0x57, 0xa1,
	0x4b, 0x69, 0x03, 0x5c, 0x69, 0x1b, 0x4d, 0x8a, 0x87, 0x65, 0x16, 0x90, 0x17, 0x09, 0xc9, 0xe6,
	0xdf, 0x72, 0x3d, 0x62, 0xa3, 0xbb, 0x90, 0x2a, 0x08, 0x1b, 0x6d, 0x76, 0x29, 0x43, 0xc0, 0x36,
	0xb3, 0x80, 0x7e, 0x29, 0x16, 0xf8, 0x2c, 0x6c, 0xf5, 0x62, 0xca, 0x50, 0x67, 0xb4, 0xdd, 0x4b,
	0x99, 0x02, 0xa3, 0x45, 0x7a, 0x4b, 0xc2, 0x4e, 0xa5, 0xed, 0xad, 0x10, 0x13, 0x67, 0x68, 0x6f,
	0x45, 0x03, 0x8b, 0x59, 0x40, 0x5f, 0x53, 0x86, 0xa8, 0x0a, 0x5b, 0xbe, 0x9c, 0x3e, 0x28, 0x15,
	0x6d, 0xfe, 0x4a, 0xd6, 0x28, 0x56, 0x66, 0x01, 0xf5, 0xa2, 0xf1, 0x9f, 0xc2, 0xe6, 0x97, 0xd2,
	0x45, 0x7c, 0x4a, 0x9c, 0x43, 0xea, 0xf0, 0x50, 0x66, 0x01, 0x35, 0x61, 0x42, 0x0c, 0x7e, 0x84,
	0x5e, 0x4d, 0x13, 0x20, 0x89, 0x36, 0x75, 0x21, 0x7d, 0x2c, 0x25, 0xb3, 0x80, 0x0e, 0xc9, 0xb8,
	0xb2, 0x47, 0xd3, 0x1f, 0xb8, 0x4e, 0x87, 0x0d, 0x2f, 0x3a, 0x37, 0x2c, 0x06, 0x11, 0x6d, 0xed,
	0xe5, 0x74, 0xa1, 0x8a, 0xcc, 0x02, 0x6a, 0xc0, 0x89, 0x2d, 0x3b, 0x58, 0x6d, 0xb5, 0x9e, 0x68,
	0x2b, 0x47, 0x70, 0x22, 0x16, 0xde, 0x07, 0x2d, 0xa7, 0x8e, 0x03, 0x44, 0x9b, 0xbb, 0x9c, 0x31,
	0x6e, 0x90, 0x59, 0x40, 0xbf, 0x48, 0x44, 0x55, 0xc2, 0x71, 0x20, 0xb1, 0xba, 0x49, 0xa2, 0x0a,
	0xe4, 0xb3, 0xb8, 0x94, 0x21, 0x0e, 0x0f, 0x59, 0xfb, 0xe6, 0x45, 0x58, 0x7f, 0x32, 0x8d, 0x3e,
	0x84, 0x49, 0x29, 0xaa, 0x0d, 0xba, 0x90, 0x2a, 0xf4, 0x4d, 0x62, 0x5b, 0xca, 0x30, 0x39, 0x66,
	0x01, 0x3d, 0x22, 0x1d, 0x94, 0x90, 0xa5, 0x13, 0x11, 0xbd, 0x3c, 0x34, 0xb4, 0x0c, 0x6d, 0xf0,
	0x95, 0x94, 0x21, 0x68, 0xc8, 0xbc, 0x43, 0x22, 0x9a, 0x4f, 0xae, 0xa1, 0x06, 0x8c, 0x0b, 0xe1,
	0x5f, 0xd0, 0xf9, 0x14, 0x11, 0x62, 0x68, 0x1b, 0xaf, 0xa6, 0x8e, 0x25, 0x63, 0x16, 0xd0, 0xaf,
	0xd3, 0xd0, 0x1d, 0xaa, 0xa0, 0x24, 0xe8, 0x5a, 0xc6, 0x18, 0x26, 0xb4, 0xf9, 0xeb, 0xb9, 0x22,
	0x9f, 0x50, 0xad, 0x20, 0x12, 0x07, 0x24, 0x61, 0xcb, 0x52, 0xc4, 0x27, 0x49, 0xd8, 0xb2, 0x54,
	0xce, 0x21, 0x66, 0x01, 0xfd, 0x2a, 0xed, 0x3c, 0x73, 0x89, 0xa1, 0xe0, 0xbc, 0xef, 0xf8, 0x01,
	0xd6, 0xbf, 0x22, 0xef, 0x7b, 0x69, 0x94, 0x6d, 0x4d, 0x61, 0xce, 0xc0, 0xd5, 0x4c, 0x34, 0x21,
	0x1b, 0xbf, 0x6f, 0x90, 0xd7, 0x32, 0xfa, 0x80, 0x1e, 0xe8, 0xad, 0x5c, 0x51, 0x40, 0x28, 0x53,
	0x6f, 0x3f, 0x46, 0x04, 0x11, 0xb3, 0x80, 0x3e, 0x32, 0x48, 0xf0, 0x48, 0x75, 0xd0, 0x0c, 0xf4,
	0x7a, 0xe6, 0x28, 0x1b, 0x94, 0xa9, 0xcf, 0xe4, 0x8c, 0xce, 0x61, 0x16, 0xd0, 0x2f, 0x93, 0x87,
	0x85, 0x31, 0x1d, 0xfe, 0x8a, 0xfa, 0xc0, 0xac, 0x28, 0xaa, 0x39, 0x4b, 0x24, 0x52, 0x84, 0xad,
	0x7f, 0x95, 0x84, 0x15, 0xe5, 0x37, 0xd5, 0x03, 0x75, 0x7d, 0x68, 0x65, 0x71, 0x65, 0x7d, 0x25,
	0x0b, 0x49, 0xc8, 0xc0, 0x87, 0x34, 0x4c, 0xe9, 0x2d, 0xa7, 0x15, 0xd8, 0x1e, 0x56, 0x35, 0x42,
	0x16, 0xf4, 0xf5, 0xc5, 0x0b, 0x6b, 0x24, 0x76, 0x08, 0x8d, 0x38, 0x06, 0xec, 0xf7, 0xd5, 0x5e,
	0xe0, 0xd6, 0xdd, 0x76, 0x17, 0x6b, 0xfa, 0xba, 0x31, 0x50, 0x14, 0x1d, 0x32, 0x06, 0x4a, 0x8a,
	0xb0, 0xf5, 0x8f, 0x0d, 0x38, 0x43, 0x4b, 0x30, 0xa0, 0xb6, 0x3b, 0x3b, 0x96, 0x17, 0x38, 0xf5,
	0x5e, 0xcb, 0x1a, 0xc0, 0x71, 0x23, 0xa9, 0xea, 0x04, 0x42, 0xce, 0xda, 0xcd, 0xdc, 0xf4, 0xc2,
	0xce, 0x8b, 0xf8, 0xa3, 0xf2, 0x1d, 0xcf, 0x3e, 0xb0, 0x3d, 0xbb, 0x53, 0xb7, 0x55, 0x8b, 0xda,
	0x72, 0xbc, 0x58, 0xc2, 0xa2, 0xa6, 0x2c, 0x2d, 0xe8, 0xe1, 0x27, 0xf8, 0xfb, 0xd9, 0xe4, 0x36,
	0xf1, 0xa9, 0x30, 0x7d, 0x9b, 0xaa, 0xd2, 0xd2, 0x81, 0x4e, 0x0e, 0x7c, 0xa0, 0x5b, 0xba, 0xd5,
	0x71, 0x24, 0x74, 0x4b, 0xb7, 0x26, 0x9a, 0x82, 0x59, 0x40, 0x7f, 0x40, 0xdf, 0x01, 0x86, 0x87,
	0xae, 0xba, 0xdb, 0x6e, 0xdb, 0x9d, 0x06, 0xb1, 0x35, 0xad, 0xf5, 0x89, 0xfa, 0xfd, 0xf6, 0xb0,
	0xf9, 0xa5, 0xa2, 0xe2, 0x0c, 0xbd, 0x93, 0x8f, 0x38, 0xe4, 0xef, 0x9b, 0x06, 0x79, 0x44, 0xaa,
	0x29, 0x1c, 0x0a, 0xe9, 0xcd, 0xac, 0xcd, 0x44, 0xa5, 0xf4, 0xbd, 0xfc, 0x15, 0x84, 0xbc, 0xf6,
	0xa9, 0x98, 0xca, 0x41, 0x7a, 0x74, 0x87, 0x27, 0x6d, 0x4c, 0x22, 0xdd, 0xe1, 0x49, 0x1f, 0xff,
	0x87, 0x2a, 0xe3, 0xb1, 0x48, 0x36, 0x3a, 0x65, 0x5c, 0x17, 0x9d, 0x47, 0xa7, 0x8c, 0x6b, 0x43,
	0xe4, 0x98, 0x05, 0xf4, 0x9b, 0x86, 0x18, 0xed, 0x47, 0x8e, 0xce, 0x82, 0xae, 0x67, 0x8d, 0xe6,
	0x42, 0xd9, 0x78, 0x3d, 0x5f, 0x10, 0x18, 0x6a, 0x9d, 0x88, 0x06, 0x9f, 0x40, 0x97, 0xd2, 0x06,
	0xa9, 0x48, 0xb4, 0x4e, 0xe8, 0x62, 0x5a, 0xd0, 0x03, 0xa4, 0x18, 0xbc, 0x41, 0x77, 0x80, 0x54,
	0xc4, 0x9e, 0xd0, 0x1d, 0x20, 0x55, 0xb1, 0x20, 0xa8, 0x71, 0x49, 0x8e, 0x68, 0x90, 0x6c, 0x6c,
	0x8c, 0x36, 0x76, 0x31, 0x4b, 0x90, 0x04, 0xaa, 0x37, 0x0b, 0xf1, 0x03, 0x74, 0x7a, 0x73, 0x3c,
	0x96, 0x81, 0x4e, 0x6f, 0x56, 0x04, 0x23, 0xa0, 0x9d, 0x92, 0xdf, 0xae, 0xeb, 0x3a, 0xa5, 0x7c,
	0x9f, 0xaf, 0xeb, 0x94, 0xfa, 0x39, 0xbc, 0x59, 0x40, 0xdf, 0x30, 0xe0, 0xb9, 0x84, 0x87, 0xb6,
	0xe8, 0x8d, 0x1c, 0xaf, 0xc7, 0x29, 0x27, 0x6f, 0xe6, 0x7e, 0x77, 0xce, 0xec, 0x97, 0xea, 0x97,
	0xd4, 0xe8, 0x6a, 0xb6, 0x77, 0xd7, 0x89, 0xf6, 0xcb, 0xe4, 0xc7, 0xda, 0x4c, 0x23, 0x18, 0xfa,
	0x0e, 0x19, 0xdd, 0xc8, 0xfd, 0x80, 0x59, 0xa9, 0x11, 0x64, 0x7e, 0x00, 0x6d, 0x16, 0x50, 0x0d,
	0x46, 0x6f, 0xbb, 0x4d, 0xa7, 0x83, 0x22, 0x6e, 0xee, 0xfc, 0xbf, 0xe5, 0x21, 0x3f, 0xf2, 0xf6,
	0xce, 0x26, 0x96, 0x09, 0xeb, 0x7c, 0x00, 0xe5, 0xdb, 0x6e, 0xd3, 0xed, 0x05, 0x48, 0x4f, 0xe0,
	0xf6, 0xc2, 0x65, 0xea, 0xa5, 0xe4, 0x42, 0xc2, 0x09, 0x7e, 0x7a, 0xb5, 0xd5, 0x92, 0xfc, 0xa0,
	0x14, 0x33, 0x64, 0x39, 0x52, 0x26, 0x61, 0x89, 0x88, 0x17, 0x15, 0x76, 0xa0, 0xd9, 0xd5, 0x56,
	0x2b, 0xee, 0xad, 0xb4, 0xac, 0xae, 0x25, 0x1e, 0xed, 0x57, 0xbf, 0x13, 0x68, 0xca, 0x0b, 0x13,
	0x79, 0x66, 0xb5, 0xd5, 0x92, 0x7d, 0x8a, 0x34, 0xcc, 0xcb, 0x11, 0x61, 0xf5, 0xb6, 0x0a, 0x45,
	0x59, 0x61, 0xc3, 0x3b, 0xa9, 0xb0, 0x54, 0xab, 0x56, 0x7b, 0xb5, 0x45, 0x3b, 0xaf, 0x01, 0xfc,
	0x21, 0x4c, 0x4a, 0xee, 0x71, 0x3a, 0x7b, 0x8c, 0xca, 0x5d, 0x6f, 0x71, 0x29, 0x55, 0xd9, 0xb0,
	0xad, 0x3b, 0x50, 0xe1, 0xda, 0x22, 0x7a, 0x51, 0xa3, 0x4a, 0xf2, 0xaa, 0x4f, 0x69, 0x7f, 0x0f,
	0xab, 0xfb, 0x23, 0x03, 0x4e, 0x89, 0x27, 0x01, 0x85, 0x0f, 0x31, 0xd2, 0xa8, 0x6b, 0x43, 0xc8,
	0x38, 0x13, 0xef, 0xe6, 0xa4, 0x0e, 0x59, 0xfc, 0x63, 0x03, 0x4e, 0x63, 0x39, 0x8b, 0x17, 0x5a,
	0x23, 0x9e, 0x95, 0x7e, 0xab, 0xd7, 0x44, 0xba, 0x56, 0x86, 0xd0, 0x71, 0x26, 0x6f, 0xe4, 0x25,
	0x17, 0x44, 0x9d, 0x5c, 0xc3, 0x51, 0x33, 0x84, 0xc0, 0xd8, 0x05, 0xe5, 0x1d, 0x35, 0xb9, 0x34,
	0x8a, 0x71, 0xf1, 0x8a, 0xb6, 0xac, 0xfc, 0xfc, 0xc8, 0x2c, 0xa0, 0x7d, 0x98, 0x64, 0xa6, 0x17,
	0x76, 0xc7, 0xff, 0x8a, 0xce, 0xc5, 0x64, 0xe0, 0x3a, 0x99, 0x68, 0xcc, 0x8d, 0x7a, 0x58, 0x9a,
	0x05, 0xf4, 0x65, 0x62, 0x8d, 0x8b, 0xfa, 0x0c, 0x5d, 0x4c, 0x6a, 0x28, 0xad, 0x65, 0x53, 0xe9,
	0x04, 0x69, 0x16, 0x90, 0x0d, 0x53, 0x5b, 0x76, 0x20, 0x3a, 0xa4, 0x9c, 0x4f, 0x6a, 0x2e, 0x8d,
	0xf9, 0x2f, 0xe6, 0x9e, 0x68, 0x16, 0x90, 0x43, 0x6e, 0xac, 0x64, 0x27, 0x89, 0xf3, 0x6a, 0x11,
	0x90, 0x5c, 0x02, 0x13, 0x75, 0x19, 0x85, 0xf3, 0xa0, 0x59, 0xd8, 0x2f, 0x93, 0x9b, 0xff, 0xab,
	0xff, 0x1f, 0x00, 0x00, 0xff, 0xff, 0x15, 0xe3, 0x13, 0x8a, 0xd8, 0x6f, 0x00, 0x00,
}
