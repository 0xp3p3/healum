// Code generated by protoc-gen-go.
// source: server/cloudkey-srv/proto/record/record.proto
// DO NOT EDIT!

/*
Package healum_srv_cloudkey is a generated protocol buffer package.

It is generated from these files:
	server/cloudkey-srv/proto/record/record.proto

It has these top-level messages:
	Storage
	CreateKeyRequest
	CreateKeyResponse
	EncryptKeyRequest
	EncryptKeyResponse
	DecryptKeyRequest
	DecryptKeyResponse
*/
package healum_srv_cloudkey

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Storage struct {
	Name    string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Subname string `protobuf:"bytes,2,opt,name=subname" json:"subname,omitempty"`
	Driver  string `protobuf:"bytes,3,opt,name=driver" json:"driver,omitempty"`
}

func (m *Storage) Reset()                    { *m = Storage{} }
func (m *Storage) String() string            { return proto.CompactTextString(m) }
func (*Storage) ProtoMessage()               {}
func (*Storage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type CreateKeyRequest struct {
	Orgid     string `protobuf:"bytes,1,opt,name=orgid" json:"orgid,omitempty"`
	CryptoKey string `protobuf:"bytes,2,opt,name=crypto_key,json=cryptoKey" json:"crypto_key,omitempty"`
}

func (m *CreateKeyRequest) Reset()                    { *m = CreateKeyRequest{} }
func (m *CreateKeyRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateKeyRequest) ProtoMessage()               {}
func (*CreateKeyRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type CreateKeyResponse struct {
}

func (m *CreateKeyResponse) Reset()                    { *m = CreateKeyResponse{} }
func (m *CreateKeyResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateKeyResponse) ProtoMessage()               {}
func (*CreateKeyResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type EncryptKeyRequest struct {
	Orgid     string `protobuf:"bytes,1,opt,name=orgid" json:"orgid,omitempty"`
	Dek       string `protobuf:"bytes,2,opt,name=dek" json:"dek,omitempty"`
	CryptoKey string `protobuf:"bytes,3,opt,name=crypto_key,json=cryptoKey" json:"crypto_key,omitempty"`
}

func (m *EncryptKeyRequest) Reset()                    { *m = EncryptKeyRequest{} }
func (m *EncryptKeyRequest) String() string            { return proto.CompactTextString(m) }
func (*EncryptKeyRequest) ProtoMessage()               {}
func (*EncryptKeyRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type EncryptKeyResponse struct {
	EncryptedDek string `protobuf:"bytes,1,opt,name=encrypted_dek,json=encryptedDek" json:"encrypted_dek,omitempty"`
}

func (m *EncryptKeyResponse) Reset()                    { *m = EncryptKeyResponse{} }
func (m *EncryptKeyResponse) String() string            { return proto.CompactTextString(m) }
func (*EncryptKeyResponse) ProtoMessage()               {}
func (*EncryptKeyResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type DecryptKeyRequest struct {
	Orgid     string `protobuf:"bytes,1,opt,name=orgid" json:"orgid,omitempty"`
	Dek       string `protobuf:"bytes,2,opt,name=dek" json:"dek,omitempty"`
	CryptoKey string `protobuf:"bytes,3,opt,name=crypto_key,json=cryptoKey" json:"crypto_key,omitempty"`
}

func (m *DecryptKeyRequest) Reset()                    { *m = DecryptKeyRequest{} }
func (m *DecryptKeyRequest) String() string            { return proto.CompactTextString(m) }
func (*DecryptKeyRequest) ProtoMessage()               {}
func (*DecryptKeyRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type DecryptKeyResponse struct {
	EncryptedDek string `protobuf:"bytes,1,opt,name=encrypted_dek,json=encryptedDek" json:"encrypted_dek,omitempty"`
}

func (m *DecryptKeyResponse) Reset()                    { *m = DecryptKeyResponse{} }
func (m *DecryptKeyResponse) String() string            { return proto.CompactTextString(m) }
func (*DecryptKeyResponse) ProtoMessage()               {}
func (*DecryptKeyResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func init() {
	proto.RegisterType((*Storage)(nil), "healum.srv.cloudkey.Storage")
	proto.RegisterType((*CreateKeyRequest)(nil), "healum.srv.cloudkey.CreateKeyRequest")
	proto.RegisterType((*CreateKeyResponse)(nil), "healum.srv.cloudkey.CreateKeyResponse")
	proto.RegisterType((*EncryptKeyRequest)(nil), "healum.srv.cloudkey.EncryptKeyRequest")
	proto.RegisterType((*EncryptKeyResponse)(nil), "healum.srv.cloudkey.EncryptKeyResponse")
	proto.RegisterType((*DecryptKeyRequest)(nil), "healum.srv.cloudkey.DecryptKeyRequest")
	proto.RegisterType((*DecryptKeyResponse)(nil), "healum.srv.cloudkey.DecryptKeyResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for CloudKeyService service

type CloudKeyServiceClient interface {
	CreateKey(ctx context.Context, in *CreateKeyRequest, opts ...client.CallOption) (*CreateKeyResponse, error)
	EncryptKey(ctx context.Context, in *EncryptKeyRequest, opts ...client.CallOption) (*EncryptKeyResponse, error)
	DecryptKey(ctx context.Context, in *DecryptKeyRequest, opts ...client.CallOption) (*DecryptKeyResponse, error)
}

type cloudKeyServiceClient struct {
	c           client.Client
	serviceName string
}

func NewCloudKeyServiceClient(serviceName string, c client.Client) CloudKeyServiceClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "healum.srv.cloudkey"
	}
	return &cloudKeyServiceClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *cloudKeyServiceClient) CreateKey(ctx context.Context, in *CreateKeyRequest, opts ...client.CallOption) (*CreateKeyResponse, error) {
	req := c.c.NewRequest(c.serviceName, "CloudKeyService.CreateKey", in)
	out := new(CreateKeyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudKeyServiceClient) EncryptKey(ctx context.Context, in *EncryptKeyRequest, opts ...client.CallOption) (*EncryptKeyResponse, error) {
	req := c.c.NewRequest(c.serviceName, "CloudKeyService.EncryptKey", in)
	out := new(EncryptKeyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudKeyServiceClient) DecryptKey(ctx context.Context, in *DecryptKeyRequest, opts ...client.CallOption) (*DecryptKeyResponse, error) {
	req := c.c.NewRequest(c.serviceName, "CloudKeyService.DecryptKey", in)
	out := new(DecryptKeyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CloudKeyService service

type CloudKeyServiceHandler interface {
	CreateKey(context.Context, *CreateKeyRequest, *CreateKeyResponse) error
	EncryptKey(context.Context, *EncryptKeyRequest, *EncryptKeyResponse) error
	DecryptKey(context.Context, *DecryptKeyRequest, *DecryptKeyResponse) error
}

func RegisterCloudKeyServiceHandler(s server.Server, hdlr CloudKeyServiceHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&CloudKeyService{hdlr}, opts...))
}

type CloudKeyService struct {
	CloudKeyServiceHandler
}

func (h *CloudKeyService) CreateKey(ctx context.Context, in *CreateKeyRequest, out *CreateKeyResponse) error {
	return h.CloudKeyServiceHandler.CreateKey(ctx, in, out)
}

func (h *CloudKeyService) EncryptKey(ctx context.Context, in *EncryptKeyRequest, out *EncryptKeyResponse) error {
	return h.CloudKeyServiceHandler.EncryptKey(ctx, in, out)
}

func (h *CloudKeyService) DecryptKey(ctx context.Context, in *DecryptKeyRequest, out *DecryptKeyResponse) error {
	return h.CloudKeyServiceHandler.DecryptKey(ctx, in, out)
}

//## The API
//CloudKeyService server implements the following RPC Methods
//
//CloudKeyService
//- CreateKey
//- EncryptKey
//- DecryptKey
//
//### CloudKeyService.CreateKey
//
//```
//micro query healum.srv.cloudkey CloudKeyService.CreateKey
//```
//
//### CloudKeyService.EncryptKey
//
//```
//micro query healum.srv.cloudkey CloudKeyService.EncryptKey
//```
//
//### CloudKeyService.DecryptKey
//
//```
//micro query healum.srv.cloudkey CloudKeyService.DecryptKey
//```
//

func init() { proto.RegisterFile("server/cloudkey-srv/proto/record/record.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 333 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xb4, 0x93, 0xcb, 0x6b, 0xc2, 0x40,
	0x10, 0xc6, 0x7d, 0xb4, 0x8a, 0x43, 0x4b, 0x75, 0x2c, 0x45, 0x84, 0x42, 0x49, 0xe9, 0xe3, 0x62,
	0x84, 0xf6, 0xd4, 0xb3, 0x96, 0x1e, 0x3c, 0x14, 0xf4, 0x56, 0x0a, 0x12, 0xb3, 0x83, 0x95, 0xa8,
	0x6b, 0x67, 0x93, 0xc0, 0xfe, 0x59, 0xfd, 0x0f, 0x4b, 0x36, 0xab, 0x06, 0x1f, 0x84, 0x1e, 0x7a,
	0xca, 0xce, 0x97, 0xd9, 0xdf, 0x37, 0xcc, 0x97, 0x40, 0x47, 0x11, 0xc7, 0xc4, 0x5d, 0x7f, 0x2e,
	0x23, 0x11, 0x90, 0xee, 0x28, 0x8e, 0xbb, 0x2b, 0x96, 0xa1, 0xec, 0x32, 0xf9, 0x92, 0x85, 0x7d,
	0xb8, 0x46, 0xc3, 0xe6, 0x17, 0x79, 0xf3, 0x68, 0xe1, 0x2a, 0x8e, 0xdd, 0xf5, 0x15, 0xe7, 0x1d,
	0xaa, 0xa3, 0x50, 0xb2, 0x37, 0x25, 0x44, 0x38, 0x59, 0x7a, 0x0b, 0x6a, 0x15, 0x6f, 0x8a, 0x8f,
	0xb5, 0xa1, 0x39, 0x63, 0x0b, 0xaa, 0x2a, 0x9a, 0x18, 0xb9, 0x64, 0xe4, 0x75, 0x89, 0x57, 0x50,
	0x11, 0x3c, 0x8b, 0x89, 0x5b, 0x65, 0xf3, 0xc2, 0x56, 0xce, 0x1b, 0xd4, 0x7b, 0x4c, 0x5e, 0x48,
	0x03, 0xd2, 0x43, 0xfa, 0x8e, 0x48, 0x85, 0x78, 0x09, 0xa7, 0x92, 0xa7, 0x33, 0x61, 0xd1, 0x69,
	0x81, 0xd7, 0x00, 0x3e, 0xeb, 0x55, 0x28, 0xc7, 0x01, 0x69, 0x8b, 0xaf, 0xa5, 0xca, 0x80, 0xb4,
	0xd3, 0x84, 0x46, 0x06, 0xa4, 0x56, 0x72, 0xa9, 0xc8, 0xf9, 0x80, 0xc6, 0xeb, 0xd2, 0xf4, 0xe4,
	0xe2, 0xeb, 0x50, 0x16, 0x14, 0x58, 0x6e, 0x72, 0xdc, 0x31, 0x2c, 0xef, 0x1a, 0xbe, 0x00, 0x66,
	0xd9, 0xa9, 0x23, 0xde, 0xc2, 0x39, 0xa5, 0x2a, 0x89, 0x71, 0x02, 0x4c, 0x4d, 0xce, 0x36, 0x62,
	0x9f, 0x82, 0x64, 0xac, 0x3e, 0xfd, 0xdf, 0x58, 0x59, 0xf6, 0x1f, 0xc6, 0x7a, 0xfa, 0x29, 0xc1,
	0x45, 0x2f, 0x49, 0x7a, 0x40, 0x7a, 0x44, 0x1c, 0xcf, 0x7c, 0xc2, 0x4f, 0xa8, 0x6d, 0xd6, 0x8a,
	0x77, 0xee, 0x81, 0x6f, 0xc2, 0xdd, 0xcd, 0xaf, 0x7d, 0x9f, 0xd7, 0x66, 0xd3, 0x29, 0xe0, 0x18,
	0x60, 0xbb, 0x43, 0x3c, 0x7c, 0x6f, 0x2f, 0xc0, 0xf6, 0x43, 0x6e, 0x5f, 0xd6, 0x60, 0xbb, 0x8d,
	0x23, 0x06, 0x7b, 0x51, 0x1c, 0x31, 0xd8, 0x5f, 0xab, 0x53, 0x98, 0x54, 0xcc, 0xcf, 0xf2, 0xfc,
	0x1b, 0x00, 0x00, 0xff, 0xff, 0x01, 0xf0, 0xef, 0x9d, 0x5d, 0x03, 0x00, 0x00,
}
