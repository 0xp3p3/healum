// Code generated by protoc-gen-go. DO NOT EDIT.
// source: server/task-srv/proto/task/task.proto

/*
Package go_micro_srv_task is a generated protocol buffer package.

It is generated from these files:
	server/task-srv/proto/task/task.proto

It has these top-level messages:
	Data
	ArrData
	AllRequest
	AllResponse
	CreateRequest
	CreateResponse
	UpdateRequest
	UpdateResponse
	ReadRequest
	ReadResponse
	DeleteRequest
	DeleteResponse
	SearchRequest
	SearchResponse
	ByCreatorRequest
	ByCreatorResponse
	ByAssignRequest
	ByAssignResponse
	FilterRequest
	FilterResponse
	CountByUserRequest
	CountByUserResponse
	Task
*/
package go_micro_srv_task

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import go_micro_srv_user "server/user-srv/proto/user"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type TaskStatus int32

const (
	TaskStatus_TaskStatus_NONE TaskStatus = 0
	TaskStatus_COMPLETE        TaskStatus = 1
	TaskStatus_INCOMPLETE      TaskStatus = 2
	TaskStatus_INPROGRESS      TaskStatus = 3
	TaskStatus_ON_HOLD         TaskStatus = 4
)

var TaskStatus_name = map[int32]string{
	0: "TaskStatus_NONE",
	1: "COMPLETE",
	2: "INCOMPLETE",
	3: "INPROGRESS",
	4: "ON_HOLD",
}
var TaskStatus_value = map[string]int32{
	"TaskStatus_NONE": 0,
	"COMPLETE":        1,
	"INCOMPLETE":      2,
	"INPROGRESS":      3,
	"ON_HOLD":         4,
}

func (x TaskStatus) String() string {
	return proto.EnumName(TaskStatus_name, int32(x))
}
func (TaskStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type VisiblityEnum int32

const (
	VisiblityEnum_VisiblityEnum_NONE VisiblityEnum = 0
	VisiblityEnum_DEFAULT            VisiblityEnum = 1
	VisiblityEnum_PUBLIC             VisiblityEnum = 2
	VisiblityEnum_PRIVATE            VisiblityEnum = 3
)

var VisiblityEnum_name = map[int32]string{
	0: "VisiblityEnum_NONE",
	1: "DEFAULT",
	2: "PUBLIC",
	3: "PRIVATE",
}
var VisiblityEnum_value = map[string]int32{
	"VisiblityEnum_NONE": 0,
	"DEFAULT":            1,
	"PUBLIC":             2,
	"PRIVATE":            3,
}

func (x VisiblityEnum) String() string {
	return proto.EnumName(VisiblityEnum_name, int32(x))
}
func (VisiblityEnum) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type Data struct {
	Task *Task `protobuf:"bytes,1,opt,name=task" json:"task,omitempty"`
}

func (m *Data) Reset()                    { *m = Data{} }
func (m *Data) String() string            { return proto.CompactTextString(m) }
func (*Data) ProtoMessage()               {}
func (*Data) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Data) GetTask() *Task {
	if m != nil {
		return m.Task
	}
	return nil
}

type ArrData struct {
	Tasks []*Task `protobuf:"bytes,1,rep,name=tasks" json:"tasks,omitempty"`
}

func (m *ArrData) Reset()                    { *m = ArrData{} }
func (m *ArrData) String() string            { return proto.CompactTextString(m) }
func (*ArrData) ProtoMessage()               {}
func (*ArrData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ArrData) GetTasks() []*Task {
	if m != nil {
		return m.Tasks
	}
	return nil
}

type AllRequest struct {
	OrgId         string `protobuf:"bytes,1,opt,name=org_id,json=orgId" json:"org_id,omitempty"`
	TeamId        string `protobuf:"bytes,2,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
	Limit         int64  `protobuf:"varint,3,opt,name=limit" json:"limit,omitempty"`
	Offset        int64  `protobuf:"varint,4,opt,name=offset" json:"offset,omitempty"`
	SortParameter string `protobuf:"bytes,5,opt,name=sort_parameter,json=sortParameter" json:"sort_parameter,omitempty"`
	SortDirection string `protobuf:"bytes,6,opt,name=sort_direction,json=sortDirection" json:"sort_direction,omitempty"`
}

func (m *AllRequest) Reset()                    { *m = AllRequest{} }
func (m *AllRequest) String() string            { return proto.CompactTextString(m) }
func (*AllRequest) ProtoMessage()               {}
func (*AllRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *AllRequest) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *AllRequest) GetTeamId() string {
	if m != nil {
		return m.TeamId
	}
	return ""
}

func (m *AllRequest) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *AllRequest) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *AllRequest) GetSortParameter() string {
	if m != nil {
		return m.SortParameter
	}
	return ""
}

func (m *AllRequest) GetSortDirection() string {
	if m != nil {
		return m.SortDirection
	}
	return ""
}

type AllResponse struct {
	Data    *ArrData `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	Code    int64    `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Message string   `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *AllResponse) Reset()                    { *m = AllResponse{} }
func (m *AllResponse) String() string            { return proto.CompactTextString(m) }
func (*AllResponse) ProtoMessage()               {}
func (*AllResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *AllResponse) GetData() *ArrData {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *AllResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *AllResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type CreateRequest struct {
	Task   *Task  `protobuf:"bytes,1,opt,name=task" json:"task,omitempty"`
	OrgId  string `protobuf:"bytes,2,opt,name=org_id,json=orgId" json:"org_id,omitempty"`
	TeamId string `protobuf:"bytes,3,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
}

func (m *CreateRequest) Reset()                    { *m = CreateRequest{} }
func (m *CreateRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateRequest) ProtoMessage()               {}
func (*CreateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *CreateRequest) GetTask() *Task {
	if m != nil {
		return m.Task
	}
	return nil
}

func (m *CreateRequest) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *CreateRequest) GetTeamId() string {
	if m != nil {
		return m.TeamId
	}
	return ""
}

type CreateResponse struct {
	Data    *Data  `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	Code    int64  `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Message string `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *CreateResponse) Reset()                    { *m = CreateResponse{} }
func (m *CreateResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateResponse) ProtoMessage()               {}
func (*CreateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *CreateResponse) GetData() *Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *CreateResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *CreateResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type UpdateRequest struct {
	Task   *Task  `protobuf:"bytes,1,opt,name=task" json:"task,omitempty"`
	OrgId  string `protobuf:"bytes,2,opt,name=org_id,json=orgId" json:"org_id,omitempty"`
	TeamId string `protobuf:"bytes,3,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
}

func (m *UpdateRequest) Reset()                    { *m = UpdateRequest{} }
func (m *UpdateRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateRequest) ProtoMessage()               {}
func (*UpdateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *UpdateRequest) GetTask() *Task {
	if m != nil {
		return m.Task
	}
	return nil
}

func (m *UpdateRequest) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *UpdateRequest) GetTeamId() string {
	if m != nil {
		return m.TeamId
	}
	return ""
}

type UpdateResponse struct {
	Data    *Data  `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	Code    int64  `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Message string `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *UpdateResponse) Reset()                    { *m = UpdateResponse{} }
func (m *UpdateResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateResponse) ProtoMessage()               {}
func (*UpdateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *UpdateResponse) GetData() *Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *UpdateResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *UpdateResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type ReadRequest struct {
	Id     string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	OrgId  string `protobuf:"bytes,2,opt,name=org_id,json=orgId" json:"org_id,omitempty"`
	TeamId string `protobuf:"bytes,3,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
}

func (m *ReadRequest) Reset()                    { *m = ReadRequest{} }
func (m *ReadRequest) String() string            { return proto.CompactTextString(m) }
func (*ReadRequest) ProtoMessage()               {}
func (*ReadRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *ReadRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ReadRequest) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *ReadRequest) GetTeamId() string {
	if m != nil {
		return m.TeamId
	}
	return ""
}

type ReadResponse struct {
	Data    *Data  `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	Code    int64  `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Message string `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *ReadResponse) Reset()                    { *m = ReadResponse{} }
func (m *ReadResponse) String() string            { return proto.CompactTextString(m) }
func (*ReadResponse) ProtoMessage()               {}
func (*ReadResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *ReadResponse) GetData() *Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *ReadResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *ReadResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type DeleteRequest struct {
	Id     string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	OrgId  string `protobuf:"bytes,2,opt,name=org_id,json=orgId" json:"org_id,omitempty"`
	TeamId string `protobuf:"bytes,3,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
}

func (m *DeleteRequest) Reset()                    { *m = DeleteRequest{} }
func (m *DeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteRequest) ProtoMessage()               {}
func (*DeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *DeleteRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *DeleteRequest) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *DeleteRequest) GetTeamId() string {
	if m != nil {
		return m.TeamId
	}
	return ""
}

type DeleteResponse struct {
	Code    int64  `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Message string `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *DeleteResponse) Reset()                    { *m = DeleteResponse{} }
func (m *DeleteResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteResponse) ProtoMessage()               {}
func (*DeleteResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *DeleteResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *DeleteResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type SearchRequest struct {
	Name          string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	OrgId         string `protobuf:"bytes,2,opt,name=org_id,json=orgId" json:"org_id,omitempty"`
	TeamId        string `protobuf:"bytes,3,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
	Limit         int64  `protobuf:"varint,4,opt,name=limit" json:"limit,omitempty"`
	Offset        int64  `protobuf:"varint,5,opt,name=offset" json:"offset,omitempty"`
	From          int64  `protobuf:"varint,6,opt,name=from" json:"from,omitempty"`
	To            int64  `protobuf:"varint,7,opt,name=to" json:"to,omitempty"`
	SortParameter string `protobuf:"bytes,8,opt,name=sort_parameter,json=sortParameter" json:"sort_parameter,omitempty"`
	SortDirection string `protobuf:"bytes,9,opt,name=sort_direction,json=sortDirection" json:"sort_direction,omitempty"`
}

func (m *SearchRequest) Reset()                    { *m = SearchRequest{} }
func (m *SearchRequest) String() string            { return proto.CompactTextString(m) }
func (*SearchRequest) ProtoMessage()               {}
func (*SearchRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *SearchRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SearchRequest) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *SearchRequest) GetTeamId() string {
	if m != nil {
		return m.TeamId
	}
	return ""
}

func (m *SearchRequest) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *SearchRequest) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *SearchRequest) GetFrom() int64 {
	if m != nil {
		return m.From
	}
	return 0
}

func (m *SearchRequest) GetTo() int64 {
	if m != nil {
		return m.To
	}
	return 0
}

func (m *SearchRequest) GetSortParameter() string {
	if m != nil {
		return m.SortParameter
	}
	return ""
}

func (m *SearchRequest) GetSortDirection() string {
	if m != nil {
		return m.SortDirection
	}
	return ""
}

type SearchResponse struct {
	Data    *ArrData `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	Code    int64    `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Message string   `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *SearchResponse) Reset()                    { *m = SearchResponse{} }
func (m *SearchResponse) String() string            { return proto.CompactTextString(m) }
func (*SearchResponse) ProtoMessage()               {}
func (*SearchResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *SearchResponse) GetData() *ArrData {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *SearchResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *SearchResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type ByCreatorRequest struct {
	UserId        string `protobuf:"bytes,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	OrgId         string `protobuf:"bytes,11,opt,name=org_id,json=orgId" json:"org_id,omitempty"`
	TeamId        string `protobuf:"bytes,12,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
	Limit         int64  `protobuf:"varint,13,opt,name=limit" json:"limit,omitempty"`
	Offset        int64  `protobuf:"varint,14,opt,name=offset" json:"offset,omitempty"`
	SortParameter string `protobuf:"bytes,5,opt,name=sort_parameter,json=sortParameter" json:"sort_parameter,omitempty"`
	SortDirection string `protobuf:"bytes,6,opt,name=sort_direction,json=sortDirection" json:"sort_direction,omitempty"`
}

func (m *ByCreatorRequest) Reset()                    { *m = ByCreatorRequest{} }
func (m *ByCreatorRequest) String() string            { return proto.CompactTextString(m) }
func (*ByCreatorRequest) ProtoMessage()               {}
func (*ByCreatorRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *ByCreatorRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *ByCreatorRequest) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *ByCreatorRequest) GetTeamId() string {
	if m != nil {
		return m.TeamId
	}
	return ""
}

func (m *ByCreatorRequest) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ByCreatorRequest) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *ByCreatorRequest) GetSortParameter() string {
	if m != nil {
		return m.SortParameter
	}
	return ""
}

func (m *ByCreatorRequest) GetSortDirection() string {
	if m != nil {
		return m.SortDirection
	}
	return ""
}

type ByCreatorResponse struct {
	Data    *ArrData `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	Code    int64    `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Message string   `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *ByCreatorResponse) Reset()                    { *m = ByCreatorResponse{} }
func (m *ByCreatorResponse) String() string            { return proto.CompactTextString(m) }
func (*ByCreatorResponse) ProtoMessage()               {}
func (*ByCreatorResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *ByCreatorResponse) GetData() *ArrData {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *ByCreatorResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *ByCreatorResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type ByAssignRequest struct {
	UserId        string `protobuf:"bytes,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	OrgId         string `protobuf:"bytes,11,opt,name=org_id,json=orgId" json:"org_id,omitempty"`
	TeamId        string `protobuf:"bytes,12,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
	Limit         int64  `protobuf:"varint,13,opt,name=limit" json:"limit,omitempty"`
	Offset        int64  `protobuf:"varint,14,opt,name=offset" json:"offset,omitempty"`
	SortParameter string `protobuf:"bytes,5,opt,name=sort_parameter,json=sortParameter" json:"sort_parameter,omitempty"`
	SortDirection string `protobuf:"bytes,6,opt,name=sort_direction,json=sortDirection" json:"sort_direction,omitempty"`
}

func (m *ByAssignRequest) Reset()                    { *m = ByAssignRequest{} }
func (m *ByAssignRequest) String() string            { return proto.CompactTextString(m) }
func (*ByAssignRequest) ProtoMessage()               {}
func (*ByAssignRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *ByAssignRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *ByAssignRequest) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *ByAssignRequest) GetTeamId() string {
	if m != nil {
		return m.TeamId
	}
	return ""
}

func (m *ByAssignRequest) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ByAssignRequest) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *ByAssignRequest) GetSortParameter() string {
	if m != nil {
		return m.SortParameter
	}
	return ""
}

func (m *ByAssignRequest) GetSortDirection() string {
	if m != nil {
		return m.SortDirection
	}
	return ""
}

type ByAssignResponse struct {
	Data    *ArrData `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	Code    int64    `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Message string   `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *ByAssignResponse) Reset()                    { *m = ByAssignResponse{} }
func (m *ByAssignResponse) String() string            { return proto.CompactTextString(m) }
func (*ByAssignResponse) ProtoMessage()               {}
func (*ByAssignResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *ByAssignResponse) GetData() *ArrData {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *ByAssignResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *ByAssignResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type FilterRequest struct {
	Status        []TaskStatus `protobuf:"varint,1,rep,packed,name=status,enum=go.micro.srv.task.TaskStatus" json:"status,omitempty"`
	Category      []string     `protobuf:"bytes,2,rep,name=category" json:"category,omitempty"`
	Priority      []int64      `protobuf:"varint,3,rep,packed,name=priority" json:"priority,omitempty"`
	OrgId         string       `protobuf:"bytes,11,opt,name=org_id,json=orgId" json:"org_id,omitempty"`
	TeamId        string       `protobuf:"bytes,12,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
	Limit         int64        `protobuf:"varint,13,opt,name=limit" json:"limit,omitempty"`
	Offset        int64        `protobuf:"varint,14,opt,name=offset" json:"offset,omitempty"`
	SortParameter string       `protobuf:"bytes,5,opt,name=sort_parameter,json=sortParameter" json:"sort_parameter,omitempty"`
	SortDirection string       `protobuf:"bytes,6,opt,name=sort_direction,json=sortDirection" json:"sort_direction,omitempty"`
}

func (m *FilterRequest) Reset()                    { *m = FilterRequest{} }
func (m *FilterRequest) String() string            { return proto.CompactTextString(m) }
func (*FilterRequest) ProtoMessage()               {}
func (*FilterRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *FilterRequest) GetStatus() []TaskStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *FilterRequest) GetCategory() []string {
	if m != nil {
		return m.Category
	}
	return nil
}

func (m *FilterRequest) GetPriority() []int64 {
	if m != nil {
		return m.Priority
	}
	return nil
}

func (m *FilterRequest) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *FilterRequest) GetTeamId() string {
	if m != nil {
		return m.TeamId
	}
	return ""
}

func (m *FilterRequest) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *FilterRequest) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *FilterRequest) GetSortParameter() string {
	if m != nil {
		return m.SortParameter
	}
	return ""
}

func (m *FilterRequest) GetSortDirection() string {
	if m != nil {
		return m.SortDirection
	}
	return ""
}

type FilterResponse struct {
	Data    *ArrData `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	Code    int64    `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Message string   `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *FilterResponse) Reset()                    { *m = FilterResponse{} }
func (m *FilterResponse) String() string            { return proto.CompactTextString(m) }
func (*FilterResponse) ProtoMessage()               {}
func (*FilterResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *FilterResponse) GetData() *ArrData {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *FilterResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *FilterResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type CountByUserRequest struct {
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	OrgId  string `protobuf:"bytes,11,opt,name=org_id,json=orgId" json:"org_id,omitempty"`
	TeamId string `protobuf:"bytes,12,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
}

func (m *CountByUserRequest) Reset()                    { *m = CountByUserRequest{} }
func (m *CountByUserRequest) String() string            { return proto.CompactTextString(m) }
func (*CountByUserRequest) ProtoMessage()               {}
func (*CountByUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *CountByUserRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *CountByUserRequest) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *CountByUserRequest) GetTeamId() string {
	if m != nil {
		return m.TeamId
	}
	return ""
}

type CountByUserResponse struct {
	TaskCount *CountByUserResponse_TaskCount `protobuf:"bytes,1,opt,name=task_count,json=taskCount" json:"task_count,omitempty"`
	Code      int64                          `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Message   string                         `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *CountByUserResponse) Reset()                    { *m = CountByUserResponse{} }
func (m *CountByUserResponse) String() string            { return proto.CompactTextString(m) }
func (*CountByUserResponse) ProtoMessage()               {}
func (*CountByUserResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *CountByUserResponse) GetTaskCount() *CountByUserResponse_TaskCount {
	if m != nil {
		return m.TaskCount
	}
	return nil
}

func (m *CountByUserResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *CountByUserResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type CountByUserResponse_TaskCount struct {
	Expired  int64 `protobuf:"varint,1,opt,name=expired" json:"expired,omitempty"`
	Assigned int64 `protobuf:"varint,2,opt,name=assigned" json:"assigned,omitempty"`
}

func (m *CountByUserResponse_TaskCount) Reset()         { *m = CountByUserResponse_TaskCount{} }
func (m *CountByUserResponse_TaskCount) String() string { return proto.CompactTextString(m) }
func (*CountByUserResponse_TaskCount) ProtoMessage()    {}
func (*CountByUserResponse_TaskCount) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{21, 0}
}

func (m *CountByUserResponse_TaskCount) GetExpired() int64 {
	if m != nil {
		return m.Expired
	}
	return 0
}

func (m *CountByUserResponse_TaskCount) GetAssigned() int64 {
	if m != nil {
		return m.Assigned
	}
	return 0
}

type Task struct {
	Id          string                  `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	OrgId       string                  `protobuf:"bytes,20,opt,name=org_id,json=orgId" json:"org_id,omitempty"`
	Title       string                  `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
	Description string                  `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	Created     int64                   `protobuf:"varint,4,opt,name=created" json:"created,omitempty"`
	Updated     int64                   `protobuf:"varint,5,opt,name=updated" json:"updated,omitempty"`
	User        *go_micro_srv_user.User `protobuf:"bytes,6,opt,name=user" json:"user,omitempty"`
	Creator     *go_micro_srv_user.User `protobuf:"bytes,7,opt,name=creator" json:"creator,omitempty"`
	Assignee    *go_micro_srv_user.User `protobuf:"bytes,8,opt,name=assignee" json:"assignee,omitempty"`
	Status      TaskStatus              `protobuf:"varint,9,opt,name=status,enum=go.micro.srv.task.TaskStatus" json:"status,omitempty"`
	Category    string                  `protobuf:"bytes,10,opt,name=category" json:"category,omitempty"`
	Tags        []string                `protobuf:"bytes,11,rep,name=tags" json:"tags,omitempty"`
	Priority    int64                   `protobuf:"varint,12,opt,name=priority" json:"priority,omitempty"`
	Start       int64                   `protobuf:"varint,13,opt,name=start" json:"start,omitempty"`
	Due         int64                   `protobuf:"varint,14,opt,name=due" json:"due,omitempty"`
	Links       []string                `protobuf:"bytes,15,rep,name=links" json:"links,omitempty"`
	Visibility  VisiblityEnum           `protobuf:"varint,16,opt,name=visibility,enum=go.micro.srv.task.VisiblityEnum" json:"visibility,omitempty"`
}

func (m *Task) Reset()                    { *m = Task{} }
func (m *Task) String() string            { return proto.CompactTextString(m) }
func (*Task) ProtoMessage()               {}
func (*Task) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *Task) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Task) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *Task) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Task) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Task) GetCreated() int64 {
	if m != nil {
		return m.Created
	}
	return 0
}

func (m *Task) GetUpdated() int64 {
	if m != nil {
		return m.Updated
	}
	return 0
}

func (m *Task) GetUser() *go_micro_srv_user.User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *Task) GetCreator() *go_micro_srv_user.User {
	if m != nil {
		return m.Creator
	}
	return nil
}

func (m *Task) GetAssignee() *go_micro_srv_user.User {
	if m != nil {
		return m.Assignee
	}
	return nil
}

func (m *Task) GetStatus() TaskStatus {
	if m != nil {
		return m.Status
	}
	return TaskStatus_TaskStatus_NONE
}

func (m *Task) GetCategory() string {
	if m != nil {
		return m.Category
	}
	return ""
}

func (m *Task) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *Task) GetPriority() int64 {
	if m != nil {
		return m.Priority
	}
	return 0
}

func (m *Task) GetStart() int64 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *Task) GetDue() int64 {
	if m != nil {
		return m.Due
	}
	return 0
}

func (m *Task) GetLinks() []string {
	if m != nil {
		return m.Links
	}
	return nil
}

func (m *Task) GetVisibility() VisiblityEnum {
	if m != nil {
		return m.Visibility
	}
	return VisiblityEnum_VisiblityEnum_NONE
}

func init() {
	proto.RegisterType((*Data)(nil), "go.micro.srv.task.Data")
	proto.RegisterType((*ArrData)(nil), "go.micro.srv.task.ArrData")
	proto.RegisterType((*AllRequest)(nil), "go.micro.srv.task.AllRequest")
	proto.RegisterType((*AllResponse)(nil), "go.micro.srv.task.AllResponse")
	proto.RegisterType((*CreateRequest)(nil), "go.micro.srv.task.CreateRequest")
	proto.RegisterType((*CreateResponse)(nil), "go.micro.srv.task.CreateResponse")
	proto.RegisterType((*UpdateRequest)(nil), "go.micro.srv.task.UpdateRequest")
	proto.RegisterType((*UpdateResponse)(nil), "go.micro.srv.task.UpdateResponse")
	proto.RegisterType((*ReadRequest)(nil), "go.micro.srv.task.ReadRequest")
	proto.RegisterType((*ReadResponse)(nil), "go.micro.srv.task.ReadResponse")
	proto.RegisterType((*DeleteRequest)(nil), "go.micro.srv.task.DeleteRequest")
	proto.RegisterType((*DeleteResponse)(nil), "go.micro.srv.task.DeleteResponse")
	proto.RegisterType((*SearchRequest)(nil), "go.micro.srv.task.SearchRequest")
	proto.RegisterType((*SearchResponse)(nil), "go.micro.srv.task.SearchResponse")
	proto.RegisterType((*ByCreatorRequest)(nil), "go.micro.srv.task.ByCreatorRequest")
	proto.RegisterType((*ByCreatorResponse)(nil), "go.micro.srv.task.ByCreatorResponse")
	proto.RegisterType((*ByAssignRequest)(nil), "go.micro.srv.task.ByAssignRequest")
	proto.RegisterType((*ByAssignResponse)(nil), "go.micro.srv.task.ByAssignResponse")
	proto.RegisterType((*FilterRequest)(nil), "go.micro.srv.task.FilterRequest")
	proto.RegisterType((*FilterResponse)(nil), "go.micro.srv.task.FilterResponse")
	proto.RegisterType((*CountByUserRequest)(nil), "go.micro.srv.task.CountByUserRequest")
	proto.RegisterType((*CountByUserResponse)(nil), "go.micro.srv.task.CountByUserResponse")
	proto.RegisterType((*CountByUserResponse_TaskCount)(nil), "go.micro.srv.task.CountByUserResponse.TaskCount")
	proto.RegisterType((*Task)(nil), "go.micro.srv.task.Task")
	proto.RegisterEnum("go.micro.srv.task.TaskStatus", TaskStatus_name, TaskStatus_value)
	proto.RegisterEnum("go.micro.srv.task.VisiblityEnum", VisiblityEnum_name, VisiblityEnum_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for TaskService service

type TaskServiceClient interface {
	All(ctx context.Context, in *AllRequest, opts ...client.CallOption) (*AllResponse, error)
	Create(ctx context.Context, in *CreateRequest, opts ...client.CallOption) (*CreateResponse, error)
	Update(ctx context.Context, in *UpdateRequest, opts ...client.CallOption) (*UpdateResponse, error)
	Read(ctx context.Context, in *ReadRequest, opts ...client.CallOption) (*ReadResponse, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...client.CallOption) (*DeleteResponse, error)
	Search(ctx context.Context, in *SearchRequest, opts ...client.CallOption) (*SearchResponse, error)
	ByCreator(ctx context.Context, in *ByCreatorRequest, opts ...client.CallOption) (*ByCreatorResponse, error)
	ByAssign(ctx context.Context, in *ByAssignRequest, opts ...client.CallOption) (*ByAssignResponse, error)
	Filter(ctx context.Context, in *FilterRequest, opts ...client.CallOption) (*FilterResponse, error)
	CountByUser(ctx context.Context, in *CountByUserRequest, opts ...client.CallOption) (*CountByUserResponse, error)
}

type taskServiceClient struct {
	c           client.Client
	serviceName string
}

func NewTaskServiceClient(serviceName string, c client.Client) TaskServiceClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "go.micro.srv.task"
	}
	return &taskServiceClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *taskServiceClient) All(ctx context.Context, in *AllRequest, opts ...client.CallOption) (*AllResponse, error) {
	req := c.c.NewRequest(c.serviceName, "TaskService.All", in)
	out := new(AllResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) Create(ctx context.Context, in *CreateRequest, opts ...client.CallOption) (*CreateResponse, error) {
	req := c.c.NewRequest(c.serviceName, "TaskService.Create", in)
	out := new(CreateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) Update(ctx context.Context, in *UpdateRequest, opts ...client.CallOption) (*UpdateResponse, error) {
	req := c.c.NewRequest(c.serviceName, "TaskService.Update", in)
	out := new(UpdateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) Read(ctx context.Context, in *ReadRequest, opts ...client.CallOption) (*ReadResponse, error) {
	req := c.c.NewRequest(c.serviceName, "TaskService.Read", in)
	out := new(ReadResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) Delete(ctx context.Context, in *DeleteRequest, opts ...client.CallOption) (*DeleteResponse, error) {
	req := c.c.NewRequest(c.serviceName, "TaskService.Delete", in)
	out := new(DeleteResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) Search(ctx context.Context, in *SearchRequest, opts ...client.CallOption) (*SearchResponse, error) {
	req := c.c.NewRequest(c.serviceName, "TaskService.Search", in)
	out := new(SearchResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) ByCreator(ctx context.Context, in *ByCreatorRequest, opts ...client.CallOption) (*ByCreatorResponse, error) {
	req := c.c.NewRequest(c.serviceName, "TaskService.ByCreator", in)
	out := new(ByCreatorResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) ByAssign(ctx context.Context, in *ByAssignRequest, opts ...client.CallOption) (*ByAssignResponse, error) {
	req := c.c.NewRequest(c.serviceName, "TaskService.ByAssign", in)
	out := new(ByAssignResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) Filter(ctx context.Context, in *FilterRequest, opts ...client.CallOption) (*FilterResponse, error) {
	req := c.c.NewRequest(c.serviceName, "TaskService.Filter", in)
	out := new(FilterResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) CountByUser(ctx context.Context, in *CountByUserRequest, opts ...client.CallOption) (*CountByUserResponse, error) {
	req := c.c.NewRequest(c.serviceName, "TaskService.CountByUser", in)
	out := new(CountByUserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TaskService service

type TaskServiceHandler interface {
	All(context.Context, *AllRequest, *AllResponse) error
	Create(context.Context, *CreateRequest, *CreateResponse) error
	Update(context.Context, *UpdateRequest, *UpdateResponse) error
	Read(context.Context, *ReadRequest, *ReadResponse) error
	Delete(context.Context, *DeleteRequest, *DeleteResponse) error
	Search(context.Context, *SearchRequest, *SearchResponse) error
	ByCreator(context.Context, *ByCreatorRequest, *ByCreatorResponse) error
	ByAssign(context.Context, *ByAssignRequest, *ByAssignResponse) error
	Filter(context.Context, *FilterRequest, *FilterResponse) error
	CountByUser(context.Context, *CountByUserRequest, *CountByUserResponse) error
}

func RegisterTaskServiceHandler(s server.Server, hdlr TaskServiceHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&TaskService{hdlr}, opts...))
}

type TaskService struct {
	TaskServiceHandler
}

func (h *TaskService) All(ctx context.Context, in *AllRequest, out *AllResponse) error {
	return h.TaskServiceHandler.All(ctx, in, out)
}

func (h *TaskService) Create(ctx context.Context, in *CreateRequest, out *CreateResponse) error {
	return h.TaskServiceHandler.Create(ctx, in, out)
}

func (h *TaskService) Update(ctx context.Context, in *UpdateRequest, out *UpdateResponse) error {
	return h.TaskServiceHandler.Update(ctx, in, out)
}

func (h *TaskService) Read(ctx context.Context, in *ReadRequest, out *ReadResponse) error {
	return h.TaskServiceHandler.Read(ctx, in, out)
}

func (h *TaskService) Delete(ctx context.Context, in *DeleteRequest, out *DeleteResponse) error {
	return h.TaskServiceHandler.Delete(ctx, in, out)
}

func (h *TaskService) Search(ctx context.Context, in *SearchRequest, out *SearchResponse) error {
	return h.TaskServiceHandler.Search(ctx, in, out)
}

func (h *TaskService) ByCreator(ctx context.Context, in *ByCreatorRequest, out *ByCreatorResponse) error {
	return h.TaskServiceHandler.ByCreator(ctx, in, out)
}

func (h *TaskService) ByAssign(ctx context.Context, in *ByAssignRequest, out *ByAssignResponse) error {
	return h.TaskServiceHandler.ByAssign(ctx, in, out)
}

func (h *TaskService) Filter(ctx context.Context, in *FilterRequest, out *FilterResponse) error {
	return h.TaskServiceHandler.Filter(ctx, in, out)
}

func (h *TaskService) CountByUser(ctx context.Context, in *CountByUserRequest, out *CountByUserResponse) error {
	return h.TaskServiceHandler.CountByUser(ctx, in, out)
}

func init() { proto.RegisterFile("server/task-srv/proto/task/task.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1169 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x58, 0xe1, 0x6e, 0xe3, 0x44,
	0x10, 0x4e, 0x62, 0x27, 0x69, 0x26, 0x4d, 0xea, 0xdb, 0x2b, 0x57, 0x2b, 0x12, 0x10, 0x7c, 0x14,
	0x55, 0x77, 0xba, 0x1c, 0xb4, 0x42, 0xe2, 0x17, 0x22, 0x6d, 0x53, 0x88, 0xd4, 0x36, 0x95, 0xdb,
	0x9e, 0xf8, 0x01, 0x54, 0xbe, 0x78, 0x1b, 0xac, 0x3a, 0x71, 0x6e, 0x77, 0x53, 0xd1, 0x57, 0xe2,
	0x1f, 0xff, 0x78, 0x02, 0x1e, 0x01, 0x1e, 0x84, 0x17, 0x40, 0x3b, 0xf6, 0x3a, 0x36, 0xb7, 0x0d,
	0x57, 0x8e, 0x46, 0xe2, 0xfe, 0x44, 0x9e, 0xdd, 0x99, 0xd9, 0xf9, 0xbe, 0xdd, 0x9d, 0x99, 0x0d,
	0x6c, 0x72, 0xca, 0xae, 0x29, 0x7b, 0x2e, 0x3c, 0x7e, 0xf5, 0x8c, 0xb3, 0xeb, 0xe7, 0x53, 0x16,
	0x89, 0x08, 0x45, 0xfc, 0xe9, 0xa0, 0x4c, 0x1e, 0x8c, 0xa2, 0xce, 0x38, 0x18, 0xb2, 0xa8, 0xc3,
	0xd9, 0x75, 0x47, 0x4e, 0xb4, 0x94, 0xe5, 0x8c, 0x53, 0x96, 0xb1, 0x94, 0x22, 0xfe, 0xc4, 0x96,
	0xce, 0x0e, 0x98, 0xfb, 0x9e, 0xf0, 0xc8, 0x53, 0x30, 0xa5, 0x99, 0x5d, 0x6c, 0x17, 0xb7, 0xea,
	0xdb, 0x1b, 0x9d, 0xd7, 0x1c, 0x76, 0xce, 0x3c, 0x7e, 0xe5, 0xa2, 0x92, 0xf3, 0x05, 0x54, 0xbb,
	0x8c, 0xa1, 0xdd, 0x33, 0x28, 0xcb, 0x21, 0x6e, 0x17, 0xdb, 0xc6, 0x22, 0xc3, 0x58, 0xcb, 0xf9,
	0xb5, 0x08, 0xd0, 0x0d, 0x43, 0x97, 0xbe, 0x9a, 0x51, 0x2e, 0xc8, 0x7b, 0x50, 0x89, 0xd8, 0xe8,
	0x22, 0xf0, 0x71, 0xdd, 0x9a, 0x5b, 0x8e, 0xd8, 0xa8, 0xef, 0x93, 0x0d, 0xa8, 0x0a, 0xea, 0x8d,
	0xe5, 0x78, 0x09, 0xc7, 0x2b, 0x52, 0xec, 0xfb, 0x64, 0x1d, 0xca, 0x61, 0x30, 0x0e, 0x84, 0x6d,
	0xb4, 0x8b, 0x5b, 0x86, 0x1b, 0x0b, 0xe4, 0x11, 0x54, 0xa2, 0xcb, 0x4b, 0x4e, 0x85, 0x6d, 0xe2,
	0x70, 0x22, 0x91, 0x4d, 0x68, 0xf2, 0x88, 0x89, 0x8b, 0xa9, 0xc7, 0xbc, 0x31, 0x15, 0x94, 0xd9,
	0x65, 0xf4, 0xd6, 0x90, 0xa3, 0x27, 0x6a, 0x30, 0x55, 0xf3, 0x03, 0x46, 0x87, 0x22, 0x88, 0x26,
	0x76, 0x65, 0xae, 0xb6, 0xaf, 0x06, 0x9d, 0x2b, 0xa8, 0x63, 0xe4, 0x7c, 0x1a, 0x4d, 0x38, 0x25,
	0x1d, 0x30, 0x7d, 0x4f, 0x78, 0x09, 0x61, 0x2d, 0x0d, 0xee, 0x84, 0x22, 0x17, 0xf5, 0x08, 0x01,
	0x73, 0x18, 0xf9, 0x14, 0x01, 0x19, 0x2e, 0x7e, 0x13, 0x1b, 0xaa, 0x63, 0xca, 0xb9, 0x37, 0xa2,
	0x08, 0xa8, 0xe6, 0x2a, 0xd1, 0x09, 0xa1, 0xb1, 0xc7, 0xa8, 0x27, 0xa8, 0x62, 0xea, 0x2e, 0xfb,
	0x93, 0xa1, 0xb5, 0x74, 0x0b, 0xad, 0x46, 0x96, 0x56, 0xe7, 0x0a, 0x9a, 0x6a, 0xb5, 0x04, 0xdd,
	0xd3, 0x1c, 0x3a, 0xdd, 0x72, 0x6f, 0x03, 0xed, 0x7c, 0xea, 0x2f, 0x11, 0x9a, 0x5a, 0xed, 0xfe,
	0xa1, 0x1d, 0x41, 0xdd, 0xa5, 0x9e, 0xaf, 0x80, 0x35, 0xa1, 0x94, 0x9e, 0xec, 0x52, 0xe0, 0xdf,
	0x39, 0xf6, 0x00, 0x56, 0x63, 0x77, 0xf7, 0x1f, 0xf9, 0x00, 0x1a, 0xfb, 0x34, 0xa4, 0xf3, 0x4d,
	0x79, 0xdb, 0xd8, 0xbf, 0x84, 0xa6, 0x72, 0x98, 0x44, 0x7f, 0xb7, 0x80, 0xfe, 0x2c, 0x42, 0xe3,
	0x94, 0x7a, 0x6c, 0xf8, 0xa3, 0x8a, 0x88, 0x80, 0x39, 0xf1, 0xc6, 0x34, 0x89, 0x09, 0xbf, 0xef,
	0x1a, 0xd5, 0x3c, 0x7f, 0x98, 0xfa, 0xfc, 0x51, 0xce, 0xe5, 0x0f, 0x02, 0xe6, 0x25, 0x8b, 0xc6,
	0x98, 0x0e, 0x0c, 0x17, 0xbf, 0x25, 0x2f, 0x22, 0xb2, 0xab, 0x38, 0x52, 0x12, 0x91, 0x26, 0xc7,
	0xac, 0xbc, 0x59, 0x8e, 0xa9, 0xe9, 0x72, 0xcc, 0x04, 0x9a, 0x0a, 0xf4, 0x52, 0xd2, 0xcc, 0x1f,
	0x45, 0xb0, 0x76, 0x6f, 0xf0, 0xee, 0x47, 0x4c, 0x11, 0xbd, 0x01, 0x55, 0x59, 0x20, 0xe6, 0x59,
	0xb9, 0x22, 0xc5, 0x7e, 0xf6, 0x0c, 0xd4, 0x6f, 0x61, 0x7b, 0x55, 0xcf, 0x76, 0x43, 0xcf, 0x76,
	0xf3, 0x1e, 0xb3, 0xf5, 0x2b, 0x78, 0x90, 0x01, 0xb6, 0x14, 0x32, 0x7f, 0x2f, 0xc2, 0xda, 0xee,
	0x4d, 0x97, 0xf3, 0x60, 0x34, 0x79, 0xa7, 0xb8, 0x9c, 0xca, 0x43, 0xa2, 0x70, 0x2d, 0x85, 0xca,
	0x9f, 0x4b, 0xd0, 0x38, 0x08, 0x42, 0x41, 0xd3, 0x43, 0xf9, 0x39, 0x54, 0xb8, 0xf0, 0xc4, 0x2c,
	0x6e, 0x34, 0x9a, 0xdb, 0xef, 0xdf, 0x52, 0x26, 0x4e, 0x51, 0xc9, 0x4d, 0x94, 0x49, 0x0b, 0x56,
	0x86, 0x9e, 0xa0, 0xa3, 0x88, 0xdd, 0xd8, 0xa5, 0xb6, 0xb1, 0x55, 0x73, 0x53, 0x59, 0xce, 0x4d,
	0x59, 0x10, 0xb1, 0x40, 0xdc, 0xd8, 0x46, 0xdb, 0xd8, 0x32, 0xdc, 0x54, 0xfe, 0x5f, 0x6d, 0xcf,
	0x04, 0x9a, 0x8a, 0xab, 0xa5, 0x6c, 0xce, 0xf7, 0x40, 0xf6, 0xa2, 0xd9, 0x44, 0xec, 0xde, 0x9c,
	0x73, 0xfa, 0x9f, 0x67, 0x0d, 0x99, 0x93, 0x1e, 0xe6, 0xfc, 0x27, 0xa0, 0x06, 0x00, 0x32, 0xf4,
	0x8b, 0xa1, 0x9c, 0x4b, 0xa0, 0x7d, 0xaa, 0x81, 0xa6, 0xb1, 0xc5, 0x93, 0x81, 0xe3, 0x6e, 0x4d,
	0xa8, 0xcf, 0xbb, 0xa1, 0x6e, 0x75, 0xa1, 0x96, 0x7a, 0x91, 0x6a, 0xf4, 0xa7, 0x69, 0xc0, 0x68,
	0x0c, 0xd6, 0x70, 0x95, 0x28, 0x0f, 0x95, 0x87, 0x37, 0x85, 0xfa, 0x89, 0xe3, 0x54, 0x76, 0x7e,
	0x31, 0xc1, 0x94, 0x3e, 0x16, 0x14, 0xd7, 0xf5, 0x2c, 0x45, 0xeb, 0x50, 0x16, 0x81, 0x08, 0xa9,
	0x2a, 0x6e, 0x28, 0x90, 0x36, 0xd4, 0x7d, 0xca, 0x87, 0x2c, 0x98, 0xe2, 0x91, 0x88, 0xc3, 0xcc,
	0x0e, 0xc9, 0xe8, 0x86, 0xd8, 0xce, 0xf9, 0x49, 0x9d, 0x53, 0xa2, 0x9c, 0x99, 0x61, 0x37, 0xe4,
	0x27, 0xa5, 0x4e, 0x89, 0xb2, 0xb7, 0x90, 0xfb, 0x85, 0x27, 0xec, 0xb5, 0xde, 0x02, 0xdf, 0x0b,
	0x48, 0x28, 0x2a, 0x91, 0xcf, 0x92, 0x05, 0x22, 0x86, 0x95, 0x70, 0x81, 0xbe, 0xd2, 0x23, 0x3b,
	0x29, 0x2f, 0x14, 0x2b, 0xe4, 0x02, 0x9b, 0x54, 0x31, 0x73, 0xe9, 0x65, 0xb5, 0xfc, 0x57, 0x97,
	0x1e, 0x90, 0x9e, 0xf9, 0xa5, 0x27, 0xb2, 0xd9, 0x1c, 0x71, 0xbb, 0x8e, 0xc9, 0x00, 0xbf, 0x73,
	0x89, 0x60, 0x35, 0xde, 0xb3, 0x34, 0x11, 0xac, 0x43, 0x99, 0x0b, 0x8f, 0xa5, 0x17, 0x1b, 0x05,
	0x62, 0x81, 0xe1, 0xcf, 0x68, 0x72, 0xab, 0xe5, 0x67, 0x9c, 0x00, 0x26, 0x57, 0xdc, 0x5e, 0x43,
	0xc7, 0xb1, 0x40, 0xbe, 0x02, 0xb8, 0x0e, 0x78, 0xf0, 0x32, 0x08, 0xa5, 0x6f, 0x0b, 0x41, 0xb4,
	0x35, 0x20, 0x5e, 0x48, 0x25, 0xa9, 0xd3, 0x9b, 0xcc, 0xc6, 0x6e, 0xc6, 0xe6, 0xc9, 0x77, 0x00,
	0x73, 0x84, 0xe4, 0x21, 0xac, 0xcd, 0xa5, 0x8b, 0xe3, 0xc1, 0x71, 0xcf, 0x2a, 0x90, 0x55, 0x58,
	0xd9, 0x1b, 0x1c, 0x9d, 0x1c, 0xf6, 0xce, 0x7a, 0x56, 0x91, 0x34, 0x01, 0xfa, 0xc7, 0xa9, 0x5c,
	0x8a, 0xe5, 0x13, 0x77, 0xf0, 0xb5, 0xdb, 0x3b, 0x3d, 0xb5, 0x0c, 0x52, 0x87, 0xea, 0xe0, 0xf8,
	0xe2, 0x9b, 0xc1, 0xe1, 0xbe, 0x65, 0x3e, 0x39, 0x82, 0x46, 0x6e, 0x69, 0xf2, 0x08, 0x48, 0x6e,
	0x40, 0xad, 0x51, 0x87, 0xea, 0x7e, 0xef, 0xa0, 0x7b, 0x7e, 0x78, 0x66, 0x15, 0x09, 0x40, 0xe5,
	0xe4, 0x7c, 0xf7, 0xb0, 0xbf, 0x67, 0x95, 0xe4, 0xc4, 0x89, 0xdb, 0x7f, 0xd1, 0x3d, 0xeb, 0x59,
	0xc6, 0xf6, 0x6f, 0x15, 0xa8, 0x63, 0x7c, 0x94, 0x5d, 0x07, 0x43, 0x4a, 0x0e, 0xc0, 0xe8, 0x86,
	0x21, 0xd1, 0x6d, 0xdb, 0xfc, 0x11, 0xd8, 0xfa, 0xe0, 0xb6, 0xe9, 0xf8, 0xf2, 0x3a, 0x05, 0x32,
	0x80, 0x4a, 0xfc, 0x3e, 0x21, 0x3a, 0xf2, 0x72, 0x0f, 0xa5, 0xd6, 0x47, 0x0b, 0x34, 0xb2, 0x0e,
	0xe3, 0x57, 0x81, 0xd6, 0x61, 0xee, 0x79, 0xa2, 0x75, 0x98, 0x7f, 0x52, 0x38, 0x05, 0xd2, 0x07,
	0x53, 0xb6, 0xea, 0x44, 0x87, 0x25, 0xf3, 0x24, 0x68, 0x7d, 0x78, 0xeb, 0x7c, 0x36, 0xb6, 0xb8,
	0x73, 0xd6, 0xc6, 0x96, 0xeb, 0xd2, 0xb5, 0xb1, 0xe5, 0xdb, 0xee, 0xd8, 0x61, 0xdc, 0x54, 0x6a,
	0x1d, 0xe6, 0x9a, 0x6c, 0xad, 0xc3, 0x7c, 0x47, 0xea, 0x14, 0xc8, 0xb7, 0x50, 0x4b, 0x7b, 0x2b,
	0xf2, 0x58, 0x63, 0xf1, 0xf7, 0x96, 0xb2, 0xf5, 0xf1, 0x62, 0xa5, 0xd4, 0xf3, 0x39, 0xac, 0xa8,
	0x4e, 0x83, 0x38, 0x5a, 0x9b, 0x5c, 0x7b, 0xd5, 0x7a, 0xbc, 0x50, 0x27, 0xcb, 0x40, 0x5c, 0x21,
	0xb5, 0x0c, 0xe4, 0x1a, 0x0d, 0x2d, 0x03, 0xf9, 0xf2, 0xea, 0x14, 0xc8, 0x0f, 0x50, 0xcf, 0x94,
	0x19, 0xb2, 0xf9, 0x4f, 0x65, 0x28, 0x76, 0xfd, 0xc9, 0x9b, 0x55, 0x2b, 0xa7, 0xf0, 0xb2, 0x82,
	0x7f, 0xce, 0xec, 0xfc, 0x15, 0x00, 0x00, 0xff, 0xff, 0xc5, 0x81, 0xd6, 0x36, 0xff, 0x11, 0x00,
	0x00,
}
