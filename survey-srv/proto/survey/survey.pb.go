// Code generated by protoc-gen-go. DO NOT EDIT.
// source: server/survey-srv/proto/survey/survey.proto

/*
Package go_micro_srv_survey is a generated protocol buffer package.

It is generated from these files:
	server/survey-srv/proto/survey/survey.proto

It has these top-level messages:
	Data
	ArrData
	AllRequest
	AllResponse
	NewRequest
	NewResponse
	CreateRequest
	CreateResponse
	UpdateRequest
	UpdateResponse
	ReadRequest
	ReadResponse
	DeleteRequest
	DeleteResponse
	CopyRequest
	CopyResponse
	QuestionsRequest
	QuestionsResponse
	QuestionRefRequest
	QuestionRefResponse
	CreateQuestionRequest
	CreateQuestionResponse
	ByCreatorRequest
	ByCreatorResponse
	LinkRequest
	LinkResponse
	TemplatesRequest
	TemplatesResponse
	FilterRequest
	FilterResponse
	SearchRequest
	SearchResponse
	ShareSurveyRequest
	ShareSurveyResponse
	AutocompleteSearchRequest
	AutocompleteSearchResponse
	Survey
	Settings
	Design
	DefaultQuestion
	Attachment
	Question
	Validation
	TextQuestionField
	TextQuestionSettings
	MultipleChoiceQuestionField
	MultipleChoiceQuestionSettings
	Choice
	ContactQuestionField
	ContactQuestionSettings
	LegalQuestionField
	LegalQuestionSettings
	DropdownQuestionField
	DropdownQuestionSettings
	FileQuestionField
	FileQuestionSettings
	BinaryQuestionField
	BinaryQuestionSettings
	RangeSelectQuestionField
	RangeSelectQuestionSettings
	ShareSurveyUser
	GetTopTagsRequest
	GetTopTagsResponse
	AutocompleteTagsRequest
	AutocompleteTagsResponse
	WarmupCacheSurveyRequest
	WarmupCacheSurveyResponse
*/
package go_micro_srv_survey

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/any"
import go_micro_srv_user "server/user-srv/proto/user"
import go_micro_srv_static "server/static-srv/proto/static"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ProgressBarStyle int32

const (
	ProgressBarStyle_ProgressBarStyle_NONE ProgressBarStyle = 0
	ProgressBarStyle_FILL                  ProgressBarStyle = 1
	ProgressBarStyle_NUMBERED              ProgressBarStyle = 2
	ProgressBarStyle_DOTTED                ProgressBarStyle = 3
)

var ProgressBarStyle_name = map[int32]string{
	0: "ProgressBarStyle_NONE",
	1: "FILL",
	2: "NUMBERED",
	3: "DOTTED",
}
var ProgressBarStyle_value = map[string]int32{
	"ProgressBarStyle_NONE": 0,
	"FILL":                  1,
	"NUMBERED":              2,
	"DOTTED":                3,
}

func (x ProgressBarStyle) String() string {
	return proto.EnumName(ProgressBarStyle_name, int32(x))
}
func (ProgressBarStyle) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type QuestionType int32

const (
	QuestionType_QuestionType_NONE QuestionType = 0
	QuestionType_WELCOME           QuestionType = 1
	QuestionType_SHORTEXT          QuestionType = 2
	QuestionType_MULTIPLE_CHOICE   QuestionType = 3
	QuestionType_CONTACT           QuestionType = 4
	QuestionType_LEGAL             QuestionType = 5
	QuestionType_DROPDOWN          QuestionType = 6
	QuestionType_FILE              QuestionType = 7
	QuestionType_BINARY            QuestionType = 8
	QuestionType_RATING            QuestionType = 9
	QuestionType_THANK_YOU         QuestionType = 10
)

var QuestionType_name = map[int32]string{
	0:  "QuestionType_NONE",
	1:  "WELCOME",
	2:  "SHORTEXT",
	3:  "MULTIPLE_CHOICE",
	4:  "CONTACT",
	5:  "LEGAL",
	6:  "DROPDOWN",
	7:  "FILE",
	8:  "BINARY",
	9:  "RATING",
	10: "THANK_YOU",
}
var QuestionType_value = map[string]int32{
	"QuestionType_NONE": 0,
	"WELCOME":           1,
	"SHORTEXT":          2,
	"MULTIPLE_CHOICE":   3,
	"CONTACT":           4,
	"LEGAL":             5,
	"DROPDOWN":          6,
	"FILE":              7,
	"BINARY":            8,
	"RATING":            9,
	"THANK_YOU":         10,
}

func (x QuestionType) String() string {
	return proto.EnumName(QuestionType_name, int32(x))
}
func (QuestionType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type AttachmentType int32

const (
	AttachmentType_AttachmentType_NONE AttachmentType = 0
	AttachmentType_IMAGE               AttachmentType = 1
	AttachmentType_VIDEO               AttachmentType = 2
)

var AttachmentType_name = map[int32]string{
	0: "AttachmentType_NONE",
	1: "IMAGE",
	2: "VIDEO",
}
var AttachmentType_value = map[string]int32{
	"AttachmentType_NONE": 0,
	"IMAGE":               1,
	"VIDEO":               2,
}

func (x AttachmentType) String() string {
	return proto.EnumName(AttachmentType_name, int32(x))
}
func (AttachmentType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type RenderTarget int32

const (
	RenderTarget_RenderTarget_NONE RenderTarget = 0
	RenderTarget_WEB               RenderTarget = 1
	RenderTarget_MOBILE            RenderTarget = 2
)

var RenderTarget_name = map[int32]string{
	0: "RenderTarget_NONE",
	1: "WEB",
	2: "MOBILE",
}
var RenderTarget_value = map[string]int32{
	"RenderTarget_NONE": 0,
	"WEB":               1,
	"MOBILE":            2,
}

func (x RenderTarget) String() string {
	return proto.EnumName(RenderTarget_name, int32(x))
}
func (RenderTarget) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type SubmitMode int32

const (
	SubmitMode_SubmitMode_NONE SubmitMode = 0
	SubmitMode_REELOAD         SubmitMode = 1
	SubmitMode_REDIRECT        SubmitMode = 2
	SubmitMode_SHOW_MESSAGE    SubmitMode = 3
)

var SubmitMode_name = map[int32]string{
	0: "SubmitMode_NONE",
	1: "REELOAD",
	2: "REDIRECT",
	3: "SHOW_MESSAGE",
}
var SubmitMode_value = map[string]int32{
	"SubmitMode_NONE": 0,
	"REELOAD":         1,
	"REDIRECT":        2,
	"SHOW_MESSAGE":    3,
}

func (x SubmitMode) String() string {
	return proto.EnumName(SubmitMode_name, int32(x))
}
func (SubmitMode) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type SurveyStatus int32

const (
	SurveyStatus_SurveyStatus_NONE SurveyStatus = 0
	SurveyStatus_DRAFT             SurveyStatus = 1
	SurveyStatus_CREATED           SurveyStatus = 2
	SurveyStatus_ACTIVE            SurveyStatus = 3
	SurveyStatus_INACTIVE          SurveyStatus = 4
	SurveyStatus_DELETED           SurveyStatus = 5
)

var SurveyStatus_name = map[int32]string{
	0: "SurveyStatus_NONE",
	1: "DRAFT",
	2: "CREATED",
	3: "ACTIVE",
	4: "INACTIVE",
	5: "DELETED",
}
var SurveyStatus_value = map[string]int32{
	"SurveyStatus_NONE": 0,
	"DRAFT":             1,
	"CREATED":           2,
	"ACTIVE":            3,
	"INACTIVE":          4,
	"DELETED":           5,
}

func (x SurveyStatus) String() string {
	return proto.EnumName(SurveyStatus_name, int32(x))
}
func (SurveyStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type ButtonType int32

const (
	ButtonType_ButtonType_NONE ButtonType = 0
	ButtonType_YES_NO          ButtonType = 1
	ButtonType_ACCEPT_DECLINE  ButtonType = 2
	ButtonType_AGREE_DISAGREE  ButtonType = 3
	ButtonType_THUMBS          ButtonType = 4
	ButtonType_TICKS_CROSS     ButtonType = 5
)

var ButtonType_name = map[int32]string{
	0: "ButtonType_NONE",
	1: "YES_NO",
	2: "ACCEPT_DECLINE",
	3: "AGREE_DISAGREE",
	4: "THUMBS",
	5: "TICKS_CROSS",
}
var ButtonType_value = map[string]int32{
	"ButtonType_NONE": 0,
	"YES_NO":          1,
	"ACCEPT_DECLINE":  2,
	"AGREE_DISAGREE":  3,
	"THUMBS":          4,
	"TICKS_CROSS":     5,
}

func (x ButtonType) String() string {
	return proto.EnumName(ButtonType_name, int32(x))
}
func (ButtonType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type FileType int32

const (
	FileType_FileType_NONE FileType = 0
	FileType_IMAGES        FileType = 1
	FileType_VIDEOS        FileType = 2
	FileType_DOC           FileType = 3
	FileType_TEXT          FileType = 4
	FileType_PDF           FileType = 5
	FileType_ANY           FileType = 6
)

var FileType_name = map[int32]string{
	0: "FileType_NONE",
	1: "IMAGES",
	2: "VIDEOS",
	3: "DOC",
	4: "TEXT",
	5: "PDF",
	6: "ANY",
}
var FileType_value = map[string]int32{
	"FileType_NONE": 0,
	"IMAGES":        1,
	"VIDEOS":        2,
	"DOC":           3,
	"TEXT":          4,
	"PDF":           5,
	"ANY":           6,
}

func (x FileType) String() string {
	return proto.EnumName(FileType_name, int32(x))
}
func (FileType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type RangeStyle int32

const (
	RangeStyle_RangeStyle_NONE RangeStyle = 0
	RangeStyle_NUMBER          RangeStyle = 1
	RangeStyle_STAR            RangeStyle = 2
	RangeStyle_SMILEY          RangeStyle = 3
)

var RangeStyle_name = map[int32]string{
	0: "RangeStyle_NONE",
	1: "NUMBER",
	2: "STAR",
	3: "SMILEY",
}
var RangeStyle_value = map[string]int32{
	"RangeStyle_NONE": 0,
	"NUMBER":          1,
	"STAR":            2,
	"SMILEY":          3,
}

func (x RangeStyle) String() string {
	return proto.EnumName(RangeStyle_name, int32(x))
}
func (RangeStyle) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

type Data struct {
	Survey *Survey `protobuf:"bytes,1,opt,name=survey" json:"survey,omitempty"`
}

func (m *Data) Reset()                    { *m = Data{} }
func (m *Data) String() string            { return proto.CompactTextString(m) }
func (*Data) ProtoMessage()               {}
func (*Data) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Data) GetSurvey() *Survey {
	if m != nil {
		return m.Survey
	}
	return nil
}

type ArrData struct {
	Surveys []*Survey `protobuf:"bytes,1,rep,name=surveys" json:"surveys,omitempty"`
}

func (m *ArrData) Reset()                    { *m = ArrData{} }
func (m *ArrData) String() string            { return proto.CompactTextString(m) }
func (*ArrData) ProtoMessage()               {}
func (*ArrData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ArrData) GetSurveys() []*Survey {
	if m != nil {
		return m.Surveys
	}
	return nil
}

type AllRequest struct {
	OrgId         string `protobuf:"bytes,1,opt,name=org_id,json=orgId" json:"org_id,omitempty"`
	TeamId        string `protobuf:"bytes,2,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
	Limit         int64  `protobuf:"varint,3,opt,name=limit" json:"limit,omitempty"`
	Offset        int64  `protobuf:"varint,4,opt,name=offset" json:"offset,omitempty"`
	SortParameter string `protobuf:"bytes,5,opt,name=sort_parameter,json=sortParameter" json:"sort_parameter,omitempty"`
	SortDirection string `protobuf:"bytes,6,opt,name=sort_direction,json=sortDirection" json:"sort_direction,omitempty"`
}

func (m *AllRequest) Reset()                    { *m = AllRequest{} }
func (m *AllRequest) String() string            { return proto.CompactTextString(m) }
func (*AllRequest) ProtoMessage()               {}
func (*AllRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *AllRequest) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *AllRequest) GetTeamId() string {
	if m != nil {
		return m.TeamId
	}
	return ""
}

func (m *AllRequest) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *AllRequest) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *AllRequest) GetSortParameter() string {
	if m != nil {
		return m.SortParameter
	}
	return ""
}

func (m *AllRequest) GetSortDirection() string {
	if m != nil {
		return m.SortDirection
	}
	return ""
}

type AllResponse struct {
	Data    *ArrData `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	Code    int64    `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Message string   `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *AllResponse) Reset()                    { *m = AllResponse{} }
func (m *AllResponse) String() string            { return proto.CompactTextString(m) }
func (*AllResponse) ProtoMessage()               {}
func (*AllResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *AllResponse) GetData() *ArrData {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *AllResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *AllResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type NewRequest struct {
	OrgId  string `protobuf:"bytes,2,opt,name=org_id,json=orgId" json:"org_id,omitempty"`
	TeamId string `protobuf:"bytes,3,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
}

func (m *NewRequest) Reset()                    { *m = NewRequest{} }
func (m *NewRequest) String() string            { return proto.CompactTextString(m) }
func (*NewRequest) ProtoMessage()               {}
func (*NewRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *NewRequest) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *NewRequest) GetTeamId() string {
	if m != nil {
		return m.TeamId
	}
	return ""
}

type NewResponse struct {
	Data    *NewResponse_Data `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	Code    int64             `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Message string            `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *NewResponse) Reset()                    { *m = NewResponse{} }
func (m *NewResponse) String() string            { return proto.CompactTextString(m) }
func (*NewResponse) ProtoMessage()               {}
func (*NewResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *NewResponse) GetData() *NewResponse_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *NewResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *NewResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type NewResponse_Data struct {
	Hash     string `protobuf:"bytes,1,opt,name=hash" json:"hash,omitempty"`
	SurveyId string `protobuf:"bytes,2,opt,name=survey_id,json=surveyId" json:"survey_id,omitempty"`
}

func (m *NewResponse_Data) Reset()                    { *m = NewResponse_Data{} }
func (m *NewResponse_Data) String() string            { return proto.CompactTextString(m) }
func (*NewResponse_Data) ProtoMessage()               {}
func (*NewResponse_Data) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5, 0} }

func (m *NewResponse_Data) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *NewResponse_Data) GetSurveyId() string {
	if m != nil {
		return m.SurveyId
	}
	return ""
}

type CreateRequest struct {
	Survey *Survey `protobuf:"bytes,1,opt,name=survey" json:"survey,omitempty"`
	OrgId  string  `protobuf:"bytes,2,opt,name=org_id,json=orgId" json:"org_id,omitempty"`
	UserId string  `protobuf:"bytes,3,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	TeamId string  `protobuf:"bytes,4,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
}

func (m *CreateRequest) Reset()                    { *m = CreateRequest{} }
func (m *CreateRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateRequest) ProtoMessage()               {}
func (*CreateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *CreateRequest) GetSurvey() *Survey {
	if m != nil {
		return m.Survey
	}
	return nil
}

func (m *CreateRequest) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *CreateRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *CreateRequest) GetTeamId() string {
	if m != nil {
		return m.TeamId
	}
	return ""
}

type CreateResponse struct {
	Data    *Data  `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	Code    int64  `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Message string `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *CreateResponse) Reset()                    { *m = CreateResponse{} }
func (m *CreateResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateResponse) ProtoMessage()               {}
func (*CreateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *CreateResponse) GetData() *Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *CreateResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *CreateResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type UpdateRequest struct {
	Survey *Survey `protobuf:"bytes,1,opt,name=survey" json:"survey,omitempty"`
	OrgId  string  `protobuf:"bytes,2,opt,name=org_id,json=orgId" json:"org_id,omitempty"`
	UserId string  `protobuf:"bytes,3,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	TeamId string  `protobuf:"bytes,4,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
}

func (m *UpdateRequest) Reset()                    { *m = UpdateRequest{} }
func (m *UpdateRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateRequest) ProtoMessage()               {}
func (*UpdateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *UpdateRequest) GetSurvey() *Survey {
	if m != nil {
		return m.Survey
	}
	return nil
}

func (m *UpdateRequest) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *UpdateRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *UpdateRequest) GetTeamId() string {
	if m != nil {
		return m.TeamId
	}
	return ""
}

type UpdateResponse struct {
	Data    *Data  `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	Code    int64  `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Message string `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *UpdateResponse) Reset()                    { *m = UpdateResponse{} }
func (m *UpdateResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateResponse) ProtoMessage()               {}
func (*UpdateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *UpdateResponse) GetData() *Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *UpdateResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *UpdateResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type ReadRequest struct {
	Id     string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	OrgId  string `protobuf:"bytes,2,opt,name=org_id,json=orgId" json:"org_id,omitempty"`
	TeamId string `protobuf:"bytes,3,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
}

func (m *ReadRequest) Reset()                    { *m = ReadRequest{} }
func (m *ReadRequest) String() string            { return proto.CompactTextString(m) }
func (*ReadRequest) ProtoMessage()               {}
func (*ReadRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *ReadRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ReadRequest) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *ReadRequest) GetTeamId() string {
	if m != nil {
		return m.TeamId
	}
	return ""
}

type ReadResponse struct {
	Data    *Data  `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	Code    int64  `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Message string `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *ReadResponse) Reset()                    { *m = ReadResponse{} }
func (m *ReadResponse) String() string            { return proto.CompactTextString(m) }
func (*ReadResponse) ProtoMessage()               {}
func (*ReadResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *ReadResponse) GetData() *Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *ReadResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *ReadResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type DeleteRequest struct {
	Id     string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	OrgId  string `protobuf:"bytes,2,opt,name=org_id,json=orgId" json:"org_id,omitempty"`
	TeamId string `protobuf:"bytes,3,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
}

func (m *DeleteRequest) Reset()                    { *m = DeleteRequest{} }
func (m *DeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteRequest) ProtoMessage()               {}
func (*DeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *DeleteRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *DeleteRequest) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *DeleteRequest) GetTeamId() string {
	if m != nil {
		return m.TeamId
	}
	return ""
}

type DeleteResponse struct {
	Code    int64  `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Message string `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *DeleteResponse) Reset()                    { *m = DeleteResponse{} }
func (m *DeleteResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteResponse) ProtoMessage()               {}
func (*DeleteResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *DeleteResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *DeleteResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type CopyRequest struct {
	SurveyId string `protobuf:"bytes,1,opt,name=survey_id,json=surveyId" json:"survey_id,omitempty"`
	OrgId    string `protobuf:"bytes,2,opt,name=org_id,json=orgId" json:"org_id,omitempty"`
	TeamId   string `protobuf:"bytes,3,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
}

func (m *CopyRequest) Reset()                    { *m = CopyRequest{} }
func (m *CopyRequest) String() string            { return proto.CompactTextString(m) }
func (*CopyRequest) ProtoMessage()               {}
func (*CopyRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *CopyRequest) GetSurveyId() string {
	if m != nil {
		return m.SurveyId
	}
	return ""
}

func (m *CopyRequest) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *CopyRequest) GetTeamId() string {
	if m != nil {
		return m.TeamId
	}
	return ""
}

type CopyResponse struct {
	Data    *Data  `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	Code    int64  `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Message string `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *CopyResponse) Reset()                    { *m = CopyResponse{} }
func (m *CopyResponse) String() string            { return proto.CompactTextString(m) }
func (*CopyResponse) ProtoMessage()               {}
func (*CopyResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *CopyResponse) GetData() *Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *CopyResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *CopyResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type QuestionsRequest struct {
	SurveyId      string `protobuf:"bytes,1,opt,name=survey_id,json=surveyId" json:"survey_id,omitempty"`
	OrgId         string `protobuf:"bytes,2,opt,name=org_id,json=orgId" json:"org_id,omitempty"`
	TeamId        string `protobuf:"bytes,3,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
	Limit         int64  `protobuf:"varint,4,opt,name=limit" json:"limit,omitempty"`
	Offset        int64  `protobuf:"varint,5,opt,name=offset" json:"offset,omitempty"`
	SortParameter string `protobuf:"bytes,6,opt,name=sort_parameter,json=sortParameter" json:"sort_parameter,omitempty"`
	SortDirection string `protobuf:"bytes,7,opt,name=sort_direction,json=sortDirection" json:"sort_direction,omitempty"`
}

func (m *QuestionsRequest) Reset()                    { *m = QuestionsRequest{} }
func (m *QuestionsRequest) String() string            { return proto.CompactTextString(m) }
func (*QuestionsRequest) ProtoMessage()               {}
func (*QuestionsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *QuestionsRequest) GetSurveyId() string {
	if m != nil {
		return m.SurveyId
	}
	return ""
}

func (m *QuestionsRequest) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *QuestionsRequest) GetTeamId() string {
	if m != nil {
		return m.TeamId
	}
	return ""
}

func (m *QuestionsRequest) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *QuestionsRequest) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *QuestionsRequest) GetSortParameter() string {
	if m != nil {
		return m.SortParameter
	}
	return ""
}

func (m *QuestionsRequest) GetSortDirection() string {
	if m != nil {
		return m.SortDirection
	}
	return ""
}

type QuestionsResponse struct {
	Data    *QuestionsResponse_ArrData `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	Code    int64                      `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Message string                     `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *QuestionsResponse) Reset()                    { *m = QuestionsResponse{} }
func (m *QuestionsResponse) String() string            { return proto.CompactTextString(m) }
func (*QuestionsResponse) ProtoMessage()               {}
func (*QuestionsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *QuestionsResponse) GetData() *QuestionsResponse_ArrData {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *QuestionsResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *QuestionsResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type QuestionsResponse_ArrData struct {
	Questions []*Question      `protobuf:"bytes,1,rep,name=questions" json:"questions,omitempty"`
	Welcome   *DefaultQuestion `protobuf:"bytes,2,opt,name=welcome" json:"welcome,omitempty"`
	Thankyou  *DefaultQuestion `protobuf:"bytes,3,opt,name=thankyou" json:"thankyou,omitempty"`
}

func (m *QuestionsResponse_ArrData) Reset()                    { *m = QuestionsResponse_ArrData{} }
func (m *QuestionsResponse_ArrData) String() string            { return proto.CompactTextString(m) }
func (*QuestionsResponse_ArrData) ProtoMessage()               {}
func (*QuestionsResponse_ArrData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17, 0} }

func (m *QuestionsResponse_ArrData) GetQuestions() []*Question {
	if m != nil {
		return m.Questions
	}
	return nil
}

func (m *QuestionsResponse_ArrData) GetWelcome() *DefaultQuestion {
	if m != nil {
		return m.Welcome
	}
	return nil
}

func (m *QuestionsResponse_ArrData) GetThankyou() *DefaultQuestion {
	if m != nil {
		return m.Thankyou
	}
	return nil
}

type QuestionRefRequest struct {
	SurveyId    string `protobuf:"bytes,1,opt,name=survey_id,json=surveyId" json:"survey_id,omitempty"`
	QuestionRef string `protobuf:"bytes,2,opt,name=question_ref,json=questionRef" json:"question_ref,omitempty"`
	OrgId       string `protobuf:"bytes,3,opt,name=org_id,json=orgId" json:"org_id,omitempty"`
	TeamId      string `protobuf:"bytes,4,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
}

func (m *QuestionRefRequest) Reset()                    { *m = QuestionRefRequest{} }
func (m *QuestionRefRequest) String() string            { return proto.CompactTextString(m) }
func (*QuestionRefRequest) ProtoMessage()               {}
func (*QuestionRefRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *QuestionRefRequest) GetSurveyId() string {
	if m != nil {
		return m.SurveyId
	}
	return ""
}

func (m *QuestionRefRequest) GetQuestionRef() string {
	if m != nil {
		return m.QuestionRef
	}
	return ""
}

func (m *QuestionRefRequest) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *QuestionRefRequest) GetTeamId() string {
	if m != nil {
		return m.TeamId
	}
	return ""
}

type QuestionRefResponse struct {
	Data    *QuestionRefResponse_Data `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	Code    int64                     `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Message string                    `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *QuestionRefResponse) Reset()                    { *m = QuestionRefResponse{} }
func (m *QuestionRefResponse) String() string            { return proto.CompactTextString(m) }
func (*QuestionRefResponse) ProtoMessage()               {}
func (*QuestionRefResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *QuestionRefResponse) GetData() *QuestionRefResponse_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *QuestionRefResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *QuestionRefResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type QuestionRefResponse_Data struct {
	Question *Question `protobuf:"bytes,1,opt,name=question" json:"question,omitempty"`
}

func (m *QuestionRefResponse_Data) Reset()                    { *m = QuestionRefResponse_Data{} }
func (m *QuestionRefResponse_Data) String() string            { return proto.CompactTextString(m) }
func (*QuestionRefResponse_Data) ProtoMessage()               {}
func (*QuestionRefResponse_Data) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19, 0} }

func (m *QuestionRefResponse_Data) GetQuestion() *Question {
	if m != nil {
		return m.Question
	}
	return nil
}

type CreateQuestionRequest struct {
	SurveyId string    `protobuf:"bytes,1,opt,name=survey_id,json=surveyId" json:"survey_id,omitempty"`
	Question *Question `protobuf:"bytes,2,opt,name=question" json:"question,omitempty"`
	OrgId    string    `protobuf:"bytes,3,opt,name=org_id,json=orgId" json:"org_id,omitempty"`
	TeamId   string    `protobuf:"bytes,4,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
}

func (m *CreateQuestionRequest) Reset()                    { *m = CreateQuestionRequest{} }
func (m *CreateQuestionRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateQuestionRequest) ProtoMessage()               {}
func (*CreateQuestionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *CreateQuestionRequest) GetSurveyId() string {
	if m != nil {
		return m.SurveyId
	}
	return ""
}

func (m *CreateQuestionRequest) GetQuestion() *Question {
	if m != nil {
		return m.Question
	}
	return nil
}

func (m *CreateQuestionRequest) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *CreateQuestionRequest) GetTeamId() string {
	if m != nil {
		return m.TeamId
	}
	return ""
}

type CreateQuestionResponse struct {
	Data    *CreateQuestionResponse_Data `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	Code    int64                        `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Message string                       `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *CreateQuestionResponse) Reset()                    { *m = CreateQuestionResponse{} }
func (m *CreateQuestionResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateQuestionResponse) ProtoMessage()               {}
func (*CreateQuestionResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *CreateQuestionResponse) GetData() *CreateQuestionResponse_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *CreateQuestionResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *CreateQuestionResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type CreateQuestionResponse_Data struct {
	Question *Question `protobuf:"bytes,1,opt,name=question" json:"question,omitempty"`
}

func (m *CreateQuestionResponse_Data) Reset()                    { *m = CreateQuestionResponse_Data{} }
func (m *CreateQuestionResponse_Data) String() string            { return proto.CompactTextString(m) }
func (*CreateQuestionResponse_Data) ProtoMessage()               {}
func (*CreateQuestionResponse_Data) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21, 0} }

func (m *CreateQuestionResponse_Data) GetQuestion() *Question {
	if m != nil {
		return m.Question
	}
	return nil
}

type ByCreatorRequest struct {
	UserId        string `protobuf:"bytes,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	OrgId         string `protobuf:"bytes,2,opt,name=org_id,json=orgId" json:"org_id,omitempty"`
	TeamId        string `protobuf:"bytes,3,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
	Limit         int64  `protobuf:"varint,4,opt,name=limit" json:"limit,omitempty"`
	Offset        int64  `protobuf:"varint,5,opt,name=offset" json:"offset,omitempty"`
	SortParameter string `protobuf:"bytes,6,opt,name=sort_parameter,json=sortParameter" json:"sort_parameter,omitempty"`
	SortDirection string `protobuf:"bytes,7,opt,name=sort_direction,json=sortDirection" json:"sort_direction,omitempty"`
}

func (m *ByCreatorRequest) Reset()                    { *m = ByCreatorRequest{} }
func (m *ByCreatorRequest) String() string            { return proto.CompactTextString(m) }
func (*ByCreatorRequest) ProtoMessage()               {}
func (*ByCreatorRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *ByCreatorRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *ByCreatorRequest) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *ByCreatorRequest) GetTeamId() string {
	if m != nil {
		return m.TeamId
	}
	return ""
}

func (m *ByCreatorRequest) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ByCreatorRequest) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *ByCreatorRequest) GetSortParameter() string {
	if m != nil {
		return m.SortParameter
	}
	return ""
}

func (m *ByCreatorRequest) GetSortDirection() string {
	if m != nil {
		return m.SortDirection
	}
	return ""
}

type ByCreatorResponse struct {
	Data    *ArrData `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	Code    int64    `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Message string   `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *ByCreatorResponse) Reset()                    { *m = ByCreatorResponse{} }
func (m *ByCreatorResponse) String() string            { return proto.CompactTextString(m) }
func (*ByCreatorResponse) ProtoMessage()               {}
func (*ByCreatorResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *ByCreatorResponse) GetData() *ArrData {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *ByCreatorResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *ByCreatorResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type LinkRequest struct {
	SurveyId string `protobuf:"bytes,1,opt,name=survey_id,json=surveyId" json:"survey_id,omitempty"`
	OrgId    string `protobuf:"bytes,2,opt,name=org_id,json=orgId" json:"org_id,omitempty"`
	TeamId   string `protobuf:"bytes,3,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
}

func (m *LinkRequest) Reset()                    { *m = LinkRequest{} }
func (m *LinkRequest) String() string            { return proto.CompactTextString(m) }
func (*LinkRequest) ProtoMessage()               {}
func (*LinkRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *LinkRequest) GetSurveyId() string {
	if m != nil {
		return m.SurveyId
	}
	return ""
}

func (m *LinkRequest) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *LinkRequest) GetTeamId() string {
	if m != nil {
		return m.TeamId
	}
	return ""
}

type LinkResponse struct {
	UrlLink string `protobuf:"bytes,1,opt,name=url_link,json=urlLink" json:"url_link,omitempty"`
	Code    int64  `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Message string `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *LinkResponse) Reset()                    { *m = LinkResponse{} }
func (m *LinkResponse) String() string            { return proto.CompactTextString(m) }
func (*LinkResponse) ProtoMessage()               {}
func (*LinkResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *LinkResponse) GetUrlLink() string {
	if m != nil {
		return m.UrlLink
	}
	return ""
}

func (m *LinkResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *LinkResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type TemplatesRequest struct {
	OrgId         string `protobuf:"bytes,1,opt,name=org_id,json=orgId" json:"org_id,omitempty"`
	TeamId        string `protobuf:"bytes,2,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
	Limit         int64  `protobuf:"varint,3,opt,name=limit" json:"limit,omitempty"`
	Offset        int64  `protobuf:"varint,4,opt,name=offset" json:"offset,omitempty"`
	SortParameter string `protobuf:"bytes,5,opt,name=sort_parameter,json=sortParameter" json:"sort_parameter,omitempty"`
	SortDirection string `protobuf:"bytes,6,opt,name=sort_direction,json=sortDirection" json:"sort_direction,omitempty"`
}

func (m *TemplatesRequest) Reset()                    { *m = TemplatesRequest{} }
func (m *TemplatesRequest) String() string            { return proto.CompactTextString(m) }
func (*TemplatesRequest) ProtoMessage()               {}
func (*TemplatesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *TemplatesRequest) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *TemplatesRequest) GetTeamId() string {
	if m != nil {
		return m.TeamId
	}
	return ""
}

func (m *TemplatesRequest) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *TemplatesRequest) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *TemplatesRequest) GetSortParameter() string {
	if m != nil {
		return m.SortParameter
	}
	return ""
}

func (m *TemplatesRequest) GetSortDirection() string {
	if m != nil {
		return m.SortDirection
	}
	return ""
}

type TemplatesResponse struct {
	Data    *ArrData `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	Code    int64    `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Message string   `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *TemplatesResponse) Reset()                    { *m = TemplatesResponse{} }
func (m *TemplatesResponse) String() string            { return proto.CompactTextString(m) }
func (*TemplatesResponse) ProtoMessage()               {}
func (*TemplatesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *TemplatesResponse) GetData() *ArrData {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *TemplatesResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *TemplatesResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type FilterRequest struct {
	Status        []SurveyStatus                   `protobuf:"varint,1,rep,packed,name=status,enum=go.micro.srv.survey.SurveyStatus" json:"status,omitempty"`
	Tags          []string                         `protobuf:"bytes,2,rep,name=tags" json:"tags,omitempty"`
	RenderTarget  []RenderTarget                   `protobuf:"varint,3,rep,packed,name=renderTarget,enum=go.micro.srv.survey.RenderTarget" json:"renderTarget,omitempty"`
	Visibility    []go_micro_srv_static.Visibility `protobuf:"varint,4,rep,packed,name=visibility,enum=go.micro.srv.static.Visibility" json:"visibility,omitempty"`
	CreatedBy     []string                         `protobuf:"bytes,5,rep,name=created_by,json=createdBy" json:"created_by,omitempty"`
	OrgId         string                           `protobuf:"bytes,6,opt,name=org_id,json=orgId" json:"org_id,omitempty"`
	TeamId        string                           `protobuf:"bytes,7,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
	Limit         int64                            `protobuf:"varint,8,opt,name=limit" json:"limit,omitempty"`
	Offset        int64                            `protobuf:"varint,9,opt,name=offset" json:"offset,omitempty"`
	SortParameter string                           `protobuf:"bytes,10,opt,name=sort_parameter,json=sortParameter" json:"sort_parameter,omitempty"`
	SortDirection string                           `protobuf:"bytes,11,opt,name=sort_direction,json=sortDirection" json:"sort_direction,omitempty"`
}

func (m *FilterRequest) Reset()                    { *m = FilterRequest{} }
func (m *FilterRequest) String() string            { return proto.CompactTextString(m) }
func (*FilterRequest) ProtoMessage()               {}
func (*FilterRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func (m *FilterRequest) GetStatus() []SurveyStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *FilterRequest) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *FilterRequest) GetRenderTarget() []RenderTarget {
	if m != nil {
		return m.RenderTarget
	}
	return nil
}

func (m *FilterRequest) GetVisibility() []go_micro_srv_static.Visibility {
	if m != nil {
		return m.Visibility
	}
	return nil
}

func (m *FilterRequest) GetCreatedBy() []string {
	if m != nil {
		return m.CreatedBy
	}
	return nil
}

func (m *FilterRequest) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *FilterRequest) GetTeamId() string {
	if m != nil {
		return m.TeamId
	}
	return ""
}

func (m *FilterRequest) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *FilterRequest) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *FilterRequest) GetSortParameter() string {
	if m != nil {
		return m.SortParameter
	}
	return ""
}

func (m *FilterRequest) GetSortDirection() string {
	if m != nil {
		return m.SortDirection
	}
	return ""
}

type FilterResponse struct {
	Data    *ArrData `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	Code    int64    `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Message string   `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *FilterResponse) Reset()                    { *m = FilterResponse{} }
func (m *FilterResponse) String() string            { return proto.CompactTextString(m) }
func (*FilterResponse) ProtoMessage()               {}
func (*FilterResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

func (m *FilterResponse) GetData() *ArrData {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *FilterResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *FilterResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type SearchRequest struct {
	Name          string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	OrgId         string `protobuf:"bytes,2,opt,name=org_id,json=orgId" json:"org_id,omitempty"`
	TeamId        string `protobuf:"bytes,3,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
	Limit         int64  `protobuf:"varint,4,opt,name=limit" json:"limit,omitempty"`
	Offset        int64  `protobuf:"varint,5,opt,name=offset" json:"offset,omitempty"`
	Description   string `protobuf:"bytes,6,opt,name=description" json:"description,omitempty"`
	UserName      string `protobuf:"bytes,7,opt,name=user_name,json=userName" json:"user_name,omitempty"`
	SortParameter string `protobuf:"bytes,8,opt,name=sort_parameter,json=sortParameter" json:"sort_parameter,omitempty"`
	SortDirection string `protobuf:"bytes,9,opt,name=sort_direction,json=sortDirection" json:"sort_direction,omitempty"`
}

func (m *SearchRequest) Reset()                    { *m = SearchRequest{} }
func (m *SearchRequest) String() string            { return proto.CompactTextString(m) }
func (*SearchRequest) ProtoMessage()               {}
func (*SearchRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30} }

func (m *SearchRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SearchRequest) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *SearchRequest) GetTeamId() string {
	if m != nil {
		return m.TeamId
	}
	return ""
}

func (m *SearchRequest) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *SearchRequest) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *SearchRequest) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *SearchRequest) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *SearchRequest) GetSortParameter() string {
	if m != nil {
		return m.SortParameter
	}
	return ""
}

func (m *SearchRequest) GetSortDirection() string {
	if m != nil {
		return m.SortDirection
	}
	return ""
}

type SearchResponse struct {
	Data    *ArrData `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	Code    int64    `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Message string   `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *SearchResponse) Reset()                    { *m = SearchResponse{} }
func (m *SearchResponse) String() string            { return proto.CompactTextString(m) }
func (*SearchResponse) ProtoMessage()               {}
func (*SearchResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{31} }

func (m *SearchResponse) GetData() *ArrData {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *SearchResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *SearchResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type ShareSurveyRequest struct {
	Surveys []*Survey                 `protobuf:"bytes,1,rep,name=surveys" json:"surveys,omitempty"`
	Users   []*go_micro_srv_user.User `protobuf:"bytes,2,rep,name=users" json:"users,omitempty"`
	UserId  string                    `protobuf:"bytes,3,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	OrgId   string                    `protobuf:"bytes,4,opt,name=org_id,json=orgId" json:"org_id,omitempty"`
	TeamId  string                    `protobuf:"bytes,5,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
}

func (m *ShareSurveyRequest) Reset()                    { *m = ShareSurveyRequest{} }
func (m *ShareSurveyRequest) String() string            { return proto.CompactTextString(m) }
func (*ShareSurveyRequest) ProtoMessage()               {}
func (*ShareSurveyRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{32} }

func (m *ShareSurveyRequest) GetSurveys() []*Survey {
	if m != nil {
		return m.Surveys
	}
	return nil
}

func (m *ShareSurveyRequest) GetUsers() []*go_micro_srv_user.User {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *ShareSurveyRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *ShareSurveyRequest) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *ShareSurveyRequest) GetTeamId() string {
	if m != nil {
		return m.TeamId
	}
	return ""
}

type ShareSurveyResponse struct {
	Code    int64  `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
}

func (m *ShareSurveyResponse) Reset()                    { *m = ShareSurveyResponse{} }
func (m *ShareSurveyResponse) String() string            { return proto.CompactTextString(m) }
func (*ShareSurveyResponse) ProtoMessage()               {}
func (*ShareSurveyResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{33} }

func (m *ShareSurveyResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *ShareSurveyResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type AutocompleteSearchRequest struct {
	Title string `protobuf:"bytes,1,opt,name=title" json:"title,omitempty"`
}

func (m *AutocompleteSearchRequest) Reset()                    { *m = AutocompleteSearchRequest{} }
func (m *AutocompleteSearchRequest) String() string            { return proto.CompactTextString(m) }
func (*AutocompleteSearchRequest) ProtoMessage()               {}
func (*AutocompleteSearchRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{34} }

func (m *AutocompleteSearchRequest) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

type AutocompleteSearchResponse struct {
	Data    *AutocompleteSearchResponse_Data `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	Code    int64                            `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Message string                           `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *AutocompleteSearchResponse) Reset()                    { *m = AutocompleteSearchResponse{} }
func (m *AutocompleteSearchResponse) String() string            { return proto.CompactTextString(m) }
func (*AutocompleteSearchResponse) ProtoMessage()               {}
func (*AutocompleteSearchResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{35} }

func (m *AutocompleteSearchResponse) GetData() *AutocompleteSearchResponse_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *AutocompleteSearchResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *AutocompleteSearchResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type AutocompleteSearchResponse_Data struct {
	Response []*go_micro_srv_static.AutocompleteResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *AutocompleteSearchResponse_Data) Reset()         { *m = AutocompleteSearchResponse_Data{} }
func (m *AutocompleteSearchResponse_Data) String() string { return proto.CompactTextString(m) }
func (*AutocompleteSearchResponse_Data) ProtoMessage()    {}
func (*AutocompleteSearchResponse_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{35, 0}
}

func (m *AutocompleteSearchResponse_Data) GetResponse() []*go_micro_srv_static.AutocompleteResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

type Survey struct {
	Id          string   `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	OrgId       string   `protobuf:"bytes,2,opt,name=org_id,json=orgId" json:"org_id,omitempty"`
	Title       string   `protobuf:"bytes,3,opt,name=title" json:"title,omitempty"`
	Description string   `protobuf:"bytes,4,opt,name=description" json:"description,omitempty"`
	Tags        []string `protobuf:"bytes,5,rep,name=tags" json:"tags,omitempty"`
	Created     int64    `protobuf:"varint,6,opt,name=created" json:"created,omitempty"`
	Updated     int64    `protobuf:"varint,7,opt,name=updated" json:"updated,omitempty"`
	// string creator_id = 7;
	Creator    *go_micro_srv_user.User      `protobuf:"bytes,8,opt,name=creator" json:"creator,omitempty"`
	Shares     []*go_micro_srv_user.User    `protobuf:"bytes,9,rep,name=shares" json:"shares,omitempty"`
	Renders    []RenderTarget               `protobuf:"varint,10,rep,packed,name=renders,enum=go.micro.srv.survey.RenderTarget" json:"renders,omitempty"`
	Setting    *go_micro_srv_static.Setting `protobuf:"bytes,11,opt,name=setting" json:"setting,omitempty"`
	Welcome    *DefaultQuestion             `protobuf:"bytes,12,opt,name=welcome" json:"welcome,omitempty"`
	Thankyou   *DefaultQuestion             `protobuf:"bytes,13,opt,name=thankyou" json:"thankyou,omitempty"`
	Questions  []*Question                  `protobuf:"bytes,14,rep,name=questions" json:"questions,omitempty"`
	Design     *Survey_Design               `protobuf:"bytes,15,opt,name=design" json:"design,omitempty"`
	Status     SurveyStatus                 `protobuf:"varint,16,opt,name=status,enum=go.micro.srv.survey.SurveyStatus" json:"status,omitempty"`
	IsTemplate bool                         `protobuf:"varint,17,opt,name=isTemplate" json:"isTemplate,omitempty"`
	TemplateId string                       `protobuf:"bytes,18,opt,name=templateId" json:"templateId,omitempty"`
	Summary    string                       `protobuf:"bytes,19,opt,name=summary" json:"summary,omitempty"`
}

func (m *Survey) Reset()                    { *m = Survey{} }
func (m *Survey) String() string            { return proto.CompactTextString(m) }
func (*Survey) ProtoMessage()               {}
func (*Survey) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{36} }

func (m *Survey) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Survey) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *Survey) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Survey) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Survey) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *Survey) GetCreated() int64 {
	if m != nil {
		return m.Created
	}
	return 0
}

func (m *Survey) GetUpdated() int64 {
	if m != nil {
		return m.Updated
	}
	return 0
}

func (m *Survey) GetCreator() *go_micro_srv_user.User {
	if m != nil {
		return m.Creator
	}
	return nil
}

func (m *Survey) GetShares() []*go_micro_srv_user.User {
	if m != nil {
		return m.Shares
	}
	return nil
}

func (m *Survey) GetRenders() []RenderTarget {
	if m != nil {
		return m.Renders
	}
	return nil
}

func (m *Survey) GetSetting() *go_micro_srv_static.Setting {
	if m != nil {
		return m.Setting
	}
	return nil
}

func (m *Survey) GetWelcome() *DefaultQuestion {
	if m != nil {
		return m.Welcome
	}
	return nil
}

func (m *Survey) GetThankyou() *DefaultQuestion {
	if m != nil {
		return m.Thankyou
	}
	return nil
}

func (m *Survey) GetQuestions() []*Question {
	if m != nil {
		return m.Questions
	}
	return nil
}

func (m *Survey) GetDesign() *Survey_Design {
	if m != nil {
		return m.Design
	}
	return nil
}

func (m *Survey) GetStatus() SurveyStatus {
	if m != nil {
		return m.Status
	}
	return SurveyStatus_SurveyStatus_NONE
}

func (m *Survey) GetIsTemplate() bool {
	if m != nil {
		return m.IsTemplate
	}
	return false
}

func (m *Survey) GetTemplateId() string {
	if m != nil {
		return m.TemplateId
	}
	return ""
}

func (m *Survey) GetSummary() string {
	if m != nil {
		return m.Summary
	}
	return ""
}

type Survey_Design struct {
	ProgressBarStyle ProgressBarStyle `protobuf:"varint,1,opt,name=progress_bar_style,json=progressBarStyle,enum=go.micro.srv.survey.ProgressBarStyle" json:"progress_bar_style,omitempty"`
	DefaultBgColor   string           `protobuf:"bytes,2,opt,name=default_bg_color,json=defaultBgColor" json:"default_bg_color,omitempty"`
	DefaultLogoUrl   string           `protobuf:"bytes,3,opt,name=default_logo_url,json=defaultLogoUrl" json:"default_logo_url,omitempty"`
}

func (m *Survey_Design) Reset()                    { *m = Survey_Design{} }
func (m *Survey_Design) String() string            { return proto.CompactTextString(m) }
func (*Survey_Design) ProtoMessage()               {}
func (*Survey_Design) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{36, 0} }

func (m *Survey_Design) GetProgressBarStyle() ProgressBarStyle {
	if m != nil {
		return m.ProgressBarStyle
	}
	return ProgressBarStyle_ProgressBarStyle_NONE
}

func (m *Survey_Design) GetDefaultBgColor() string {
	if m != nil {
		return m.DefaultBgColor
	}
	return ""
}

func (m *Survey_Design) GetDefaultLogoUrl() string {
	if m != nil {
		return m.DefaultLogoUrl
	}
	return ""
}

type Settings struct {
	ShowButton           bool       `protobuf:"varint,1,opt,name=showButton" json:"showButton,omitempty"`
	ButtonText           string     `protobuf:"bytes,2,opt,name=buttonText" json:"buttonText,omitempty"`
	SocialSharingEnabled bool       `protobuf:"varint,3,opt,name=social_sharing_enabled,json=socialSharingEnabled" json:"social_sharing_enabled,omitempty"`
	RedirectEnabled      bool       `protobuf:"varint,4,opt,name=redirect_enabled,json=redirectEnabled" json:"redirect_enabled,omitempty"`
	RedirectUrl          string     `protobuf:"bytes,5,opt,name=redirect_url,json=redirectUrl" json:"redirect_url,omitempty"`
	SubmitMode           SubmitMode `protobuf:"varint,6,opt,name=submit_mode,json=submitMode,enum=go.micro.srv.survey.SubmitMode" json:"submit_mode,omitempty"`
	ShowTimeToAnswer     bool       `protobuf:"varint,7,opt,name=showTimeToAnswer" json:"showTimeToAnswer,omitempty"`
}

func (m *Settings) Reset()                    { *m = Settings{} }
func (m *Settings) String() string            { return proto.CompactTextString(m) }
func (*Settings) ProtoMessage()               {}
func (*Settings) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{37} }

func (m *Settings) GetShowButton() bool {
	if m != nil {
		return m.ShowButton
	}
	return false
}

func (m *Settings) GetButtonText() string {
	if m != nil {
		return m.ButtonText
	}
	return ""
}

func (m *Settings) GetSocialSharingEnabled() bool {
	if m != nil {
		return m.SocialSharingEnabled
	}
	return false
}

func (m *Settings) GetRedirectEnabled() bool {
	if m != nil {
		return m.RedirectEnabled
	}
	return false
}

func (m *Settings) GetRedirectUrl() string {
	if m != nil {
		return m.RedirectUrl
	}
	return ""
}

func (m *Settings) GetSubmitMode() SubmitMode {
	if m != nil {
		return m.SubmitMode
	}
	return SubmitMode_SubmitMode_NONE
}

func (m *Settings) GetShowTimeToAnswer() bool {
	if m != nil {
		return m.ShowTimeToAnswer
	}
	return false
}

type Design struct {
	BgColor string `protobuf:"bytes,1,opt,name=bg_color,json=bgColor" json:"bg_color,omitempty"`
	LogoUrl string `protobuf:"bytes,2,opt,name=logo_url,json=logoUrl" json:"logo_url,omitempty"`
}

func (m *Design) Reset()                    { *m = Design{} }
func (m *Design) String() string            { return proto.CompactTextString(m) }
func (*Design) ProtoMessage()               {}
func (*Design) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{38} }

func (m *Design) GetBgColor() string {
	if m != nil {
		return m.BgColor
	}
	return ""
}

func (m *Design) GetLogoUrl() string {
	if m != nil {
		return m.LogoUrl
	}
	return ""
}

type DefaultQuestion struct {
	Type        QuestionType  `protobuf:"varint,1,opt,name=type,enum=go.micro.srv.survey.QuestionType" json:"type,omitempty"`
	Title       string        `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
	Description string        `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	Order       int64         `protobuf:"varint,4,opt,name=order" json:"order,omitempty"`
	Design      *Design       `protobuf:"bytes,5,opt,name=design" json:"design,omitempty"`
	Settings    *Settings     `protobuf:"bytes,6,opt,name=settings" json:"settings,omitempty"`
	Attachment  []*Attachment `protobuf:"bytes,7,rep,name=attachment" json:"attachment,omitempty"`
}

func (m *DefaultQuestion) Reset()                    { *m = DefaultQuestion{} }
func (m *DefaultQuestion) String() string            { return proto.CompactTextString(m) }
func (*DefaultQuestion) ProtoMessage()               {}
func (*DefaultQuestion) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{39} }

func (m *DefaultQuestion) GetType() QuestionType {
	if m != nil {
		return m.Type
	}
	return QuestionType_QuestionType_NONE
}

func (m *DefaultQuestion) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *DefaultQuestion) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *DefaultQuestion) GetOrder() int64 {
	if m != nil {
		return m.Order
	}
	return 0
}

func (m *DefaultQuestion) GetDesign() *Design {
	if m != nil {
		return m.Design
	}
	return nil
}

func (m *DefaultQuestion) GetSettings() *Settings {
	if m != nil {
		return m.Settings
	}
	return nil
}

func (m *DefaultQuestion) GetAttachment() []*Attachment {
	if m != nil {
		return m.Attachment
	}
	return nil
}

type Attachment struct {
	Type   AttachmentType `protobuf:"varint,1,opt,name=type,enum=go.micro.srv.survey.AttachmentType" json:"type,omitempty"`
	Url    string         `protobuf:"bytes,2,opt,name=url" json:"url,omitempty"`
	Width  int64          `protobuf:"varint,3,opt,name=width" json:"width,omitempty"`
	Height int64          `protobuf:"varint,4,opt,name=height" json:"height,omitempty"`
}

func (m *Attachment) Reset()                    { *m = Attachment{} }
func (m *Attachment) String() string            { return proto.CompactTextString(m) }
func (*Attachment) ProtoMessage()               {}
func (*Attachment) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{40} }

func (m *Attachment) GetType() AttachmentType {
	if m != nil {
		return m.Type
	}
	return AttachmentType_AttachmentType_NONE
}

func (m *Attachment) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *Attachment) GetWidth() int64 {
	if m != nil {
		return m.Width
	}
	return 0
}

func (m *Attachment) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

type Question struct {
	Id          string               `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Type        QuestionType         `protobuf:"varint,2,opt,name=type,enum=go.micro.srv.survey.QuestionType" json:"type,omitempty"`
	Order       int64                `protobuf:"varint,3,opt,name=order" json:"order,omitempty"`
	Title       string               `protobuf:"bytes,4,opt,name=title" json:"title,omitempty"`
	Description string               `protobuf:"bytes,5,opt,name=description" json:"description,omitempty"`
	Design      *Question_Design     `protobuf:"bytes,6,opt,name=design" json:"design,omitempty"`
	Fields      *google_protobuf.Any `protobuf:"bytes,7,opt,name=fields" json:"fields,omitempty"`
	Settings    *google_protobuf.Any `protobuf:"bytes,8,opt,name=settings" json:"settings,omitempty"`
}

func (m *Question) Reset()                    { *m = Question{} }
func (m *Question) String() string            { return proto.CompactTextString(m) }
func (*Question) ProtoMessage()               {}
func (*Question) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{41} }

func (m *Question) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Question) GetType() QuestionType {
	if m != nil {
		return m.Type
	}
	return QuestionType_QuestionType_NONE
}

func (m *Question) GetOrder() int64 {
	if m != nil {
		return m.Order
	}
	return 0
}

func (m *Question) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Question) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Question) GetDesign() *Question_Design {
	if m != nil {
		return m.Design
	}
	return nil
}

func (m *Question) GetFields() *google_protobuf.Any {
	if m != nil {
		return m.Fields
	}
	return nil
}

func (m *Question) GetSettings() *google_protobuf.Any {
	if m != nil {
		return m.Settings
	}
	return nil
}

type Question_Design struct {
	BgColor string `protobuf:"bytes,1,opt,name=bg_color,json=bgColor" json:"bg_color,omitempty"`
	LogoUrl string `protobuf:"bytes,2,opt,name=logo_url,json=logoUrl" json:"logo_url,omitempty"`
}

func (m *Question_Design) Reset()                    { *m = Question_Design{} }
func (m *Question_Design) String() string            { return proto.CompactTextString(m) }
func (*Question_Design) ProtoMessage()               {}
func (*Question_Design) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{41, 0} }

func (m *Question_Design) GetBgColor() string {
	if m != nil {
		return m.BgColor
	}
	return ""
}

func (m *Question_Design) GetLogoUrl() string {
	if m != nil {
		return m.LogoUrl
	}
	return ""
}

type Validation struct {
}

func (m *Validation) Reset()                    { *m = Validation{} }
func (m *Validation) String() string            { return proto.CompactTextString(m) }
func (*Validation) ProtoMessage()               {}
func (*Validation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{42} }

type TextQuestionField struct {
	Attributes  *TextQuestionField_Attributes `protobuf:"bytes,1,opt,name=attributes" json:"attributes,omitempty"`
	Validations []*Validation                 `protobuf:"bytes,2,rep,name=validations" json:"validations,omitempty"`
	Attachment  *Attachment                   `protobuf:"bytes,3,opt,name=attachment" json:"attachment,omitempty"`
}

func (m *TextQuestionField) Reset()                    { *m = TextQuestionField{} }
func (m *TextQuestionField) String() string            { return proto.CompactTextString(m) }
func (*TextQuestionField) ProtoMessage()               {}
func (*TextQuestionField) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{43} }

func (m *TextQuestionField) GetAttributes() *TextQuestionField_Attributes {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *TextQuestionField) GetValidations() []*Validation {
	if m != nil {
		return m.Validations
	}
	return nil
}

func (m *TextQuestionField) GetAttachment() *Attachment {
	if m != nil {
		return m.Attachment
	}
	return nil
}

type TextQuestionField_Attributes struct {
	Description string `protobuf:"bytes,1,opt,name=description" json:"description,omitempty"`
}

func (m *TextQuestionField_Attributes) Reset()         { *m = TextQuestionField_Attributes{} }
func (m *TextQuestionField_Attributes) String() string { return proto.CompactTextString(m) }
func (*TextQuestionField_Attributes) ProtoMessage()    {}
func (*TextQuestionField_Attributes) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{43, 0}
}

func (m *TextQuestionField_Attributes) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type TextQuestionSettings struct {
	MaximumCharacters int64 `protobuf:"varint,1,opt,name=maximum_characters,json=maximumCharacters" json:"maximum_characters,omitempty"`
	MultipleRows      bool  `protobuf:"varint,2,opt,name=multiple_rows,json=multipleRows" json:"multiple_rows,omitempty"`
	Mandatory         bool  `protobuf:"varint,3,opt,name=mandatory" json:"mandatory,omitempty"`
	Image             bool  `protobuf:"varint,4,opt,name=image" json:"image,omitempty"`
	Video             bool  `protobuf:"varint,5,opt,name=video" json:"video,omitempty"`
	Variable          bool  `protobuf:"varint,6,opt,name=variable" json:"variable,omitempty"`
}

func (m *TextQuestionSettings) Reset()                    { *m = TextQuestionSettings{} }
func (m *TextQuestionSettings) String() string            { return proto.CompactTextString(m) }
func (*TextQuestionSettings) ProtoMessage()               {}
func (*TextQuestionSettings) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{44} }

func (m *TextQuestionSettings) GetMaximumCharacters() int64 {
	if m != nil {
		return m.MaximumCharacters
	}
	return 0
}

func (m *TextQuestionSettings) GetMultipleRows() bool {
	if m != nil {
		return m.MultipleRows
	}
	return false
}

func (m *TextQuestionSettings) GetMandatory() bool {
	if m != nil {
		return m.Mandatory
	}
	return false
}

func (m *TextQuestionSettings) GetImage() bool {
	if m != nil {
		return m.Image
	}
	return false
}

func (m *TextQuestionSettings) GetVideo() bool {
	if m != nil {
		return m.Video
	}
	return false
}

func (m *TextQuestionSettings) GetVariable() bool {
	if m != nil {
		return m.Variable
	}
	return false
}

// Multiple choice
type MultipleChoiceQuestionField struct {
	Choices     []*Choice                               `protobuf:"bytes,1,rep,name=choices" json:"choices,omitempty"`
	Attributes  *MultipleChoiceQuestionField_Attributes `protobuf:"bytes,2,opt,name=attributes" json:"attributes,omitempty"`
	Validations []*Validation                           `protobuf:"bytes,3,rep,name=validations" json:"validations,omitempty"`
}

func (m *MultipleChoiceQuestionField) Reset()                    { *m = MultipleChoiceQuestionField{} }
func (m *MultipleChoiceQuestionField) String() string            { return proto.CompactTextString(m) }
func (*MultipleChoiceQuestionField) ProtoMessage()               {}
func (*MultipleChoiceQuestionField) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{45} }

func (m *MultipleChoiceQuestionField) GetChoices() []*Choice {
	if m != nil {
		return m.Choices
	}
	return nil
}

func (m *MultipleChoiceQuestionField) GetAttributes() *MultipleChoiceQuestionField_Attributes {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *MultipleChoiceQuestionField) GetValidations() []*Validation {
	if m != nil {
		return m.Validations
	}
	return nil
}

type MultipleChoiceQuestionField_Attributes struct {
	Description string `protobuf:"bytes,1,opt,name=description" json:"description,omitempty"`
}

func (m *MultipleChoiceQuestionField_Attributes) Reset() {
	*m = MultipleChoiceQuestionField_Attributes{}
}
func (m *MultipleChoiceQuestionField_Attributes) String() string { return proto.CompactTextString(m) }
func (*MultipleChoiceQuestionField_Attributes) ProtoMessage()    {}
func (*MultipleChoiceQuestionField_Attributes) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{45, 0}
}

func (m *MultipleChoiceQuestionField_Attributes) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type MultipleChoiceQuestionSettings struct {
	Mandatory         bool `protobuf:"varint,1,opt,name=mandatory" json:"mandatory,omitempty"`
	MultipleSelection bool `protobuf:"varint,2,opt,name=multiple_selection,json=multipleSelection" json:"multiple_selection,omitempty"`
	ShowOther         bool `protobuf:"varint,3,opt,name=show_other,json=showOther" json:"show_other,omitempty"`
	Picture           bool `protobuf:"varint,4,opt,name=picture" json:"picture,omitempty"`
	Randomise         bool `protobuf:"varint,5,opt,name=randomise" json:"randomise,omitempty"`
}

func (m *MultipleChoiceQuestionSettings) Reset()                    { *m = MultipleChoiceQuestionSettings{} }
func (m *MultipleChoiceQuestionSettings) String() string            { return proto.CompactTextString(m) }
func (*MultipleChoiceQuestionSettings) ProtoMessage()               {}
func (*MultipleChoiceQuestionSettings) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{46} }

func (m *MultipleChoiceQuestionSettings) GetMandatory() bool {
	if m != nil {
		return m.Mandatory
	}
	return false
}

func (m *MultipleChoiceQuestionSettings) GetMultipleSelection() bool {
	if m != nil {
		return m.MultipleSelection
	}
	return false
}

func (m *MultipleChoiceQuestionSettings) GetShowOther() bool {
	if m != nil {
		return m.ShowOther
	}
	return false
}

func (m *MultipleChoiceQuestionSettings) GetPicture() bool {
	if m != nil {
		return m.Picture
	}
	return false
}

func (m *MultipleChoiceQuestionSettings) GetRandomise() bool {
	if m != nil {
		return m.Randomise
	}
	return false
}

type Choice struct {
	Label string `protobuf:"bytes,1,opt,name=label" json:"label,omitempty"`
	Image string `protobuf:"bytes,2,opt,name=image" json:"image,omitempty"`
}

func (m *Choice) Reset()                    { *m = Choice{} }
func (m *Choice) String() string            { return proto.CompactTextString(m) }
func (*Choice) ProtoMessage()               {}
func (*Choice) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{47} }

func (m *Choice) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *Choice) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

// Contact
type ContactQuestionField struct {
	Attributes  *ContactQuestionField_Attributes `protobuf:"bytes,1,opt,name=attributes" json:"attributes,omitempty"`
	Validations []*Validation                    `protobuf:"bytes,2,rep,name=validations" json:"validations,omitempty"`
}

func (m *ContactQuestionField) Reset()                    { *m = ContactQuestionField{} }
func (m *ContactQuestionField) String() string            { return proto.CompactTextString(m) }
func (*ContactQuestionField) ProtoMessage()               {}
func (*ContactQuestionField) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{48} }

func (m *ContactQuestionField) GetAttributes() *ContactQuestionField_Attributes {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *ContactQuestionField) GetValidations() []*Validation {
	if m != nil {
		return m.Validations
	}
	return nil
}

type ContactQuestionField_Attributes struct {
	FirstName     string `protobuf:"bytes,1,opt,name=first_name,json=firstName" json:"first_name,omitempty"`
	LastName      string `protobuf:"bytes,2,opt,name=last_name,json=lastName" json:"last_name,omitempty"`
	ContactNumber string `protobuf:"bytes,3,opt,name=contact_number,json=contactNumber" json:"contact_number,omitempty"`
	Email         string `protobuf:"bytes,4,opt,name=email" json:"email,omitempty"`
	Address       string `protobuf:"bytes,5,opt,name=address" json:"address,omitempty"`
}

func (m *ContactQuestionField_Attributes) Reset()         { *m = ContactQuestionField_Attributes{} }
func (m *ContactQuestionField_Attributes) String() string { return proto.CompactTextString(m) }
func (*ContactQuestionField_Attributes) ProtoMessage()    {}
func (*ContactQuestionField_Attributes) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{48, 0}
}

func (m *ContactQuestionField_Attributes) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *ContactQuestionField_Attributes) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

func (m *ContactQuestionField_Attributes) GetContactNumber() string {
	if m != nil {
		return m.ContactNumber
	}
	return ""
}

func (m *ContactQuestionField_Attributes) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *ContactQuestionField_Attributes) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type ContactQuestionSettings struct {
	Mandatory     bool     `protobuf:"varint,1,opt,name=mandatory" json:"mandatory,omitempty"`
	FirstName     bool     `protobuf:"varint,2,opt,name=first_name,json=firstName" json:"first_name,omitempty"`
	LastName      bool     `protobuf:"varint,3,opt,name=last_name,json=lastName" json:"last_name,omitempty"`
	ContactNumber bool     `protobuf:"varint,4,opt,name=contact_number,json=contactNumber" json:"contact_number,omitempty"`
	Email         bool     `protobuf:"varint,5,opt,name=email" json:"email,omitempty"`
	Address       bool     `protobuf:"varint,6,opt,name=address" json:"address,omitempty"`
	Required      []string `protobuf:"bytes,7,rep,name=required" json:"required,omitempty"`
}

func (m *ContactQuestionSettings) Reset()                    { *m = ContactQuestionSettings{} }
func (m *ContactQuestionSettings) String() string            { return proto.CompactTextString(m) }
func (*ContactQuestionSettings) ProtoMessage()               {}
func (*ContactQuestionSettings) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{49} }

func (m *ContactQuestionSettings) GetMandatory() bool {
	if m != nil {
		return m.Mandatory
	}
	return false
}

func (m *ContactQuestionSettings) GetFirstName() bool {
	if m != nil {
		return m.FirstName
	}
	return false
}

func (m *ContactQuestionSettings) GetLastName() bool {
	if m != nil {
		return m.LastName
	}
	return false
}

func (m *ContactQuestionSettings) GetContactNumber() bool {
	if m != nil {
		return m.ContactNumber
	}
	return false
}

func (m *ContactQuestionSettings) GetEmail() bool {
	if m != nil {
		return m.Email
	}
	return false
}

func (m *ContactQuestionSettings) GetAddress() bool {
	if m != nil {
		return m.Address
	}
	return false
}

func (m *ContactQuestionSettings) GetRequired() []string {
	if m != nil {
		return m.Required
	}
	return nil
}

// Legal
type LegalQuestionField struct {
	Attributes  *LegalQuestionField_Attributes `protobuf:"bytes,1,opt,name=attributes" json:"attributes,omitempty"`
	Validations []*Validation                  `protobuf:"bytes,2,rep,name=validations" json:"validations,omitempty"`
}

func (m *LegalQuestionField) Reset()                    { *m = LegalQuestionField{} }
func (m *LegalQuestionField) String() string            { return proto.CompactTextString(m) }
func (*LegalQuestionField) ProtoMessage()               {}
func (*LegalQuestionField) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{50} }

func (m *LegalQuestionField) GetAttributes() *LegalQuestionField_Attributes {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *LegalQuestionField) GetValidations() []*Validation {
	if m != nil {
		return m.Validations
	}
	return nil
}

type LegalQuestionField_Attributes struct {
	Description string `protobuf:"bytes,1,opt,name=description" json:"description,omitempty"`
	Content     string `protobuf:"bytes,2,opt,name=content" json:"content,omitempty"`
}

func (m *LegalQuestionField_Attributes) Reset()         { *m = LegalQuestionField_Attributes{} }
func (m *LegalQuestionField_Attributes) String() string { return proto.CompactTextString(m) }
func (*LegalQuestionField_Attributes) ProtoMessage()    {}
func (*LegalQuestionField_Attributes) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{50, 0}
}

func (m *LegalQuestionField_Attributes) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *LegalQuestionField_Attributes) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

type LegalQuestionSettings struct {
	ButtonType  ButtonType `protobuf:"varint,1,opt,name=buttonType,enum=go.micro.srv.survey.ButtonType" json:"buttonType,omitempty"`
	Description bool       `protobuf:"varint,2,opt,name=description" json:"description,omitempty"`
	Mandatory   bool       `protobuf:"varint,3,opt,name=mandatory" json:"mandatory,omitempty"`
}

func (m *LegalQuestionSettings) Reset()                    { *m = LegalQuestionSettings{} }
func (m *LegalQuestionSettings) String() string            { return proto.CompactTextString(m) }
func (*LegalQuestionSettings) ProtoMessage()               {}
func (*LegalQuestionSettings) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{51} }

func (m *LegalQuestionSettings) GetButtonType() ButtonType {
	if m != nil {
		return m.ButtonType
	}
	return ButtonType_ButtonType_NONE
}

func (m *LegalQuestionSettings) GetDescription() bool {
	if m != nil {
		return m.Description
	}
	return false
}

func (m *LegalQuestionSettings) GetMandatory() bool {
	if m != nil {
		return m.Mandatory
	}
	return false
}

// Dropdown
type DropdownQuestionField struct {
	Attributes  *DropdownQuestionField_Attributes `protobuf:"bytes,1,opt,name=attributes" json:"attributes,omitempty"`
	Validations []*Validation                     `protobuf:"bytes,2,rep,name=validations" json:"validations,omitempty"`
	Choices     []*Choice                         `protobuf:"bytes,3,rep,name=choices" json:"choices,omitempty"`
}

func (m *DropdownQuestionField) Reset()                    { *m = DropdownQuestionField{} }
func (m *DropdownQuestionField) String() string            { return proto.CompactTextString(m) }
func (*DropdownQuestionField) ProtoMessage()               {}
func (*DropdownQuestionField) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{52} }

func (m *DropdownQuestionField) GetAttributes() *DropdownQuestionField_Attributes {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *DropdownQuestionField) GetValidations() []*Validation {
	if m != nil {
		return m.Validations
	}
	return nil
}

func (m *DropdownQuestionField) GetChoices() []*Choice {
	if m != nil {
		return m.Choices
	}
	return nil
}

type DropdownQuestionField_Attributes struct {
	Description string   `protobuf:"bytes,1,opt,name=description" json:"description,omitempty"`
	Options     []string `protobuf:"bytes,2,rep,name=options" json:"options,omitempty"`
}

func (m *DropdownQuestionField_Attributes) Reset()         { *m = DropdownQuestionField_Attributes{} }
func (m *DropdownQuestionField_Attributes) String() string { return proto.CompactTextString(m) }
func (*DropdownQuestionField_Attributes) ProtoMessage()    {}
func (*DropdownQuestionField_Attributes) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{52, 0}
}

func (m *DropdownQuestionField_Attributes) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *DropdownQuestionField_Attributes) GetOptions() []string {
	if m != nil {
		return m.Options
	}
	return nil
}

type DropdownQuestionSettings struct {
	Mandatory         bool `protobuf:"varint,1,opt,name=mandatory" json:"mandatory,omitempty"`
	ShowOther         bool `protobuf:"varint,2,opt,name=show_other,json=showOther" json:"show_other,omitempty"`
	Randomise         bool `protobuf:"varint,3,opt,name=randomise" json:"randomise,omitempty"`
	AlphabeticalOrder bool `protobuf:"varint,4,opt,name=alphabetical_order,json=alphabeticalOrder" json:"alphabetical_order,omitempty"`
	MultipleSelection bool `protobuf:"varint,5,opt,name=multiple_selection,json=multipleSelection" json:"multiple_selection,omitempty"`
}

func (m *DropdownQuestionSettings) Reset()                    { *m = DropdownQuestionSettings{} }
func (m *DropdownQuestionSettings) String() string            { return proto.CompactTextString(m) }
func (*DropdownQuestionSettings) ProtoMessage()               {}
func (*DropdownQuestionSettings) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{53} }

func (m *DropdownQuestionSettings) GetMandatory() bool {
	if m != nil {
		return m.Mandatory
	}
	return false
}

func (m *DropdownQuestionSettings) GetShowOther() bool {
	if m != nil {
		return m.ShowOther
	}
	return false
}

func (m *DropdownQuestionSettings) GetRandomise() bool {
	if m != nil {
		return m.Randomise
	}
	return false
}

func (m *DropdownQuestionSettings) GetAlphabeticalOrder() bool {
	if m != nil {
		return m.AlphabeticalOrder
	}
	return false
}

func (m *DropdownQuestionSettings) GetMultipleSelection() bool {
	if m != nil {
		return m.MultipleSelection
	}
	return false
}

// File
type FileQuestionField struct {
	Attributes  *FileQuestionField_Attributes `protobuf:"bytes,1,opt,name=attributes" json:"attributes,omitempty"`
	Validations []*Validation                 `protobuf:"bytes,2,rep,name=validations" json:"validations,omitempty"`
	Attachment  *Attachment                   `protobuf:"bytes,3,opt,name=attachment" json:"attachment,omitempty"`
}

func (m *FileQuestionField) Reset()                    { *m = FileQuestionField{} }
func (m *FileQuestionField) String() string            { return proto.CompactTextString(m) }
func (*FileQuestionField) ProtoMessage()               {}
func (*FileQuestionField) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{54} }

func (m *FileQuestionField) GetAttributes() *FileQuestionField_Attributes {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *FileQuestionField) GetValidations() []*Validation {
	if m != nil {
		return m.Validations
	}
	return nil
}

func (m *FileQuestionField) GetAttachment() *Attachment {
	if m != nil {
		return m.Attachment
	}
	return nil
}

type FileQuestionField_Attributes struct {
	Description string `protobuf:"bytes,1,opt,name=description" json:"description,omitempty"`
}

func (m *FileQuestionField_Attributes) Reset()         { *m = FileQuestionField_Attributes{} }
func (m *FileQuestionField_Attributes) String() string { return proto.CompactTextString(m) }
func (*FileQuestionField_Attributes) ProtoMessage()    {}
func (*FileQuestionField_Attributes) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{54, 0}
}

func (m *FileQuestionField_Attributes) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type FileQuestionSettings struct {
	Mandatory       bool       `protobuf:"varint,1,opt,name=mandatory" json:"mandatory,omitempty"`
	AllowedFiletype []FileType `protobuf:"varint,2,rep,packed,name=allowed_filetype,json=allowedFiletype,enum=go.micro.srv.survey.FileType" json:"allowed_filetype,omitempty"`
}

func (m *FileQuestionSettings) Reset()                    { *m = FileQuestionSettings{} }
func (m *FileQuestionSettings) String() string            { return proto.CompactTextString(m) }
func (*FileQuestionSettings) ProtoMessage()               {}
func (*FileQuestionSettings) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{55} }

func (m *FileQuestionSettings) GetMandatory() bool {
	if m != nil {
		return m.Mandatory
	}
	return false
}

func (m *FileQuestionSettings) GetAllowedFiletype() []FileType {
	if m != nil {
		return m.AllowedFiletype
	}
	return nil
}

// Binary
type BinaryQuestionField struct {
	Attributes  *BinaryQuestionField_Attributes `protobuf:"bytes,1,opt,name=attributes" json:"attributes,omitempty"`
	Validations []*Validation                   `protobuf:"bytes,2,rep,name=validations" json:"validations,omitempty"`
	Attachment  *Attachment                     `protobuf:"bytes,3,opt,name=attachment" json:"attachment,omitempty"`
}

func (m *BinaryQuestionField) Reset()                    { *m = BinaryQuestionField{} }
func (m *BinaryQuestionField) String() string            { return proto.CompactTextString(m) }
func (*BinaryQuestionField) ProtoMessage()               {}
func (*BinaryQuestionField) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{56} }

func (m *BinaryQuestionField) GetAttributes() *BinaryQuestionField_Attributes {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *BinaryQuestionField) GetValidations() []*Validation {
	if m != nil {
		return m.Validations
	}
	return nil
}

func (m *BinaryQuestionField) GetAttachment() *Attachment {
	if m != nil {
		return m.Attachment
	}
	return nil
}

type BinaryQuestionField_Attributes struct {
	Describe string `protobuf:"bytes,1,opt,name=describe" json:"describe,omitempty"`
}

func (m *BinaryQuestionField_Attributes) Reset()         { *m = BinaryQuestionField_Attributes{} }
func (m *BinaryQuestionField_Attributes) String() string { return proto.CompactTextString(m) }
func (*BinaryQuestionField_Attributes) ProtoMessage()    {}
func (*BinaryQuestionField_Attributes) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{56, 0}
}

func (m *BinaryQuestionField_Attributes) GetDescribe() string {
	if m != nil {
		return m.Describe
	}
	return ""
}

type BinaryQuestionSettings struct {
	Mandatory  bool       `protobuf:"varint,1,opt,name=mandatory" json:"mandatory,omitempty"`
	Image      bool       `protobuf:"varint,2,opt,name=image" json:"image,omitempty"`
	Video      bool       `protobuf:"varint,3,opt,name=video" json:"video,omitempty"`
	ButtonType ButtonType `protobuf:"varint,4,opt,name=buttonType,enum=go.micro.srv.survey.ButtonType" json:"buttonType,omitempty"`
}

func (m *BinaryQuestionSettings) Reset()                    { *m = BinaryQuestionSettings{} }
func (m *BinaryQuestionSettings) String() string            { return proto.CompactTextString(m) }
func (*BinaryQuestionSettings) ProtoMessage()               {}
func (*BinaryQuestionSettings) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{57} }

func (m *BinaryQuestionSettings) GetMandatory() bool {
	if m != nil {
		return m.Mandatory
	}
	return false
}

func (m *BinaryQuestionSettings) GetImage() bool {
	if m != nil {
		return m.Image
	}
	return false
}

func (m *BinaryQuestionSettings) GetVideo() bool {
	if m != nil {
		return m.Video
	}
	return false
}

func (m *BinaryQuestionSettings) GetButtonType() ButtonType {
	if m != nil {
		return m.ButtonType
	}
	return ButtonType_ButtonType_NONE
}

// RangeSelect
type RangeSelectQuestionField struct {
	Attributes  *RangeSelectQuestionField_Attributes `protobuf:"bytes,1,opt,name=attributes" json:"attributes,omitempty"`
	Validations []*Validation                        `protobuf:"bytes,2,rep,name=validations" json:"validations,omitempty"`
}

func (m *RangeSelectQuestionField) Reset()                    { *m = RangeSelectQuestionField{} }
func (m *RangeSelectQuestionField) String() string            { return proto.CompactTextString(m) }
func (*RangeSelectQuestionField) ProtoMessage()               {}
func (*RangeSelectQuestionField) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{58} }

func (m *RangeSelectQuestionField) GetAttributes() *RangeSelectQuestionField_Attributes {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *RangeSelectQuestionField) GetValidations() []*Validation {
	if m != nil {
		return m.Validations
	}
	return nil
}

type RangeSelectQuestionField_Attributes struct {
	Description string                                      `protobuf:"bytes,1,opt,name=description" json:"description,omitempty"`
	Labels      *RangeSelectQuestionField_Attributes_Labels `protobuf:"bytes,2,opt,name=labels" json:"labels,omitempty"`
}

func (m *RangeSelectQuestionField_Attributes) Reset()         { *m = RangeSelectQuestionField_Attributes{} }
func (m *RangeSelectQuestionField_Attributes) String() string { return proto.CompactTextString(m) }
func (*RangeSelectQuestionField_Attributes) ProtoMessage()    {}
func (*RangeSelectQuestionField_Attributes) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{58, 0}
}

func (m *RangeSelectQuestionField_Attributes) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *RangeSelectQuestionField_Attributes) GetLabels() *RangeSelectQuestionField_Attributes_Labels {
	if m != nil {
		return m.Labels
	}
	return nil
}

type RangeSelectQuestionField_Attributes_Labels struct {
	Left   string `protobuf:"bytes,1,opt,name=left" json:"left,omitempty"`
	Center string `protobuf:"bytes,2,opt,name=center" json:"center,omitempty"`
	Right  string `protobuf:"bytes,3,opt,name=right" json:"right,omitempty"`
}

func (m *RangeSelectQuestionField_Attributes_Labels) Reset() {
	*m = RangeSelectQuestionField_Attributes_Labels{}
}
func (m *RangeSelectQuestionField_Attributes_Labels) String() string {
	return proto.CompactTextString(m)
}
func (*RangeSelectQuestionField_Attributes_Labels) ProtoMessage() {}
func (*RangeSelectQuestionField_Attributes_Labels) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{58, 0, 0}
}

func (m *RangeSelectQuestionField_Attributes_Labels) GetLeft() string {
	if m != nil {
		return m.Left
	}
	return ""
}

func (m *RangeSelectQuestionField_Attributes_Labels) GetCenter() string {
	if m != nil {
		return m.Center
	}
	return ""
}

func (m *RangeSelectQuestionField_Attributes_Labels) GetRight() string {
	if m != nil {
		return m.Right
	}
	return ""
}

type RangeSelectQuestionSettings struct {
	Mandatory               bool       `protobuf:"varint,1,opt,name=mandatory" json:"mandatory,omitempty"`
	Steps                   int64      `protobuf:"varint,2,opt,name=steps" json:"steps,omitempty"`
	Style                   RangeStyle `protobuf:"varint,3,opt,name=style,enum=go.micro.srv.survey.RangeStyle" json:"style,omitempty"`
	ShowOnlyLeftRightLabels bool       `protobuf:"varint,4,opt,name=show_only_left_right_labels,json=showOnlyLeftRightLabels" json:"show_only_left_right_labels,omitempty"`
	ShowMiddle              bool       `protobuf:"varint,5,opt,name=show_middle,json=showMiddle" json:"show_middle,omitempty"`
}

func (m *RangeSelectQuestionSettings) Reset()                    { *m = RangeSelectQuestionSettings{} }
func (m *RangeSelectQuestionSettings) String() string            { return proto.CompactTextString(m) }
func (*RangeSelectQuestionSettings) ProtoMessage()               {}
func (*RangeSelectQuestionSettings) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{59} }

func (m *RangeSelectQuestionSettings) GetMandatory() bool {
	if m != nil {
		return m.Mandatory
	}
	return false
}

func (m *RangeSelectQuestionSettings) GetSteps() int64 {
	if m != nil {
		return m.Steps
	}
	return 0
}

func (m *RangeSelectQuestionSettings) GetStyle() RangeStyle {
	if m != nil {
		return m.Style
	}
	return RangeStyle_RangeStyle_NONE
}

func (m *RangeSelectQuestionSettings) GetShowOnlyLeftRightLabels() bool {
	if m != nil {
		return m.ShowOnlyLeftRightLabels
	}
	return false
}

func (m *RangeSelectQuestionSettings) GetShowMiddle() bool {
	if m != nil {
		return m.ShowMiddle
	}
	return false
}

type ShareSurveyUser struct {
	Id       string                          `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Survey   *Survey                         `protobuf:"bytes,2,opt,name=survey" json:"survey,omitempty"`
	User     *go_micro_srv_user.User         `protobuf:"bytes,3,opt,name=user" json:"user,omitempty"`
	Status   go_micro_srv_static.ShareStatus `protobuf:"varint,4,opt,name=status,enum=go.micro.srv.static.ShareStatus" json:"status,omitempty"`
	Updated  int64                           `protobuf:"varint,5,opt,name=updated" json:"updated,omitempty"`
	SharedBy *go_micro_srv_user.User         `protobuf:"bytes,6,opt,name=shared_by,json=sharedBy" json:"shared_by,omitempty"`
	Count    int64                           `protobuf:"varint,7,opt,name=count" json:"count,omitempty"`
	Created  int64                           `protobuf:"varint,8,opt,name=created" json:"created,omitempty"`
}

func (m *ShareSurveyUser) Reset()                    { *m = ShareSurveyUser{} }
func (m *ShareSurveyUser) String() string            { return proto.CompactTextString(m) }
func (*ShareSurveyUser) ProtoMessage()               {}
func (*ShareSurveyUser) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{60} }

func (m *ShareSurveyUser) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ShareSurveyUser) GetSurvey() *Survey {
	if m != nil {
		return m.Survey
	}
	return nil
}

func (m *ShareSurveyUser) GetUser() *go_micro_srv_user.User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *ShareSurveyUser) GetStatus() go_micro_srv_static.ShareStatus {
	if m != nil {
		return m.Status
	}
	return go_micro_srv_static.ShareStatus_ShareStatus_NONE
}

func (m *ShareSurveyUser) GetUpdated() int64 {
	if m != nil {
		return m.Updated
	}
	return 0
}

func (m *ShareSurveyUser) GetSharedBy() *go_micro_srv_user.User {
	if m != nil {
		return m.SharedBy
	}
	return nil
}

func (m *ShareSurveyUser) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *ShareSurveyUser) GetCreated() int64 {
	if m != nil {
		return m.Created
	}
	return 0
}

type GetTopTagsRequest struct {
	OrgId string `protobuf:"bytes,1,opt,name=org_id,json=orgId" json:"org_id,omitempty"`
	N     int64  `protobuf:"varint,2,opt,name=n" json:"n,omitempty"`
}

func (m *GetTopTagsRequest) Reset()                    { *m = GetTopTagsRequest{} }
func (m *GetTopTagsRequest) String() string            { return proto.CompactTextString(m) }
func (*GetTopTagsRequest) ProtoMessage()               {}
func (*GetTopTagsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{61} }

func (m *GetTopTagsRequest) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *GetTopTagsRequest) GetN() int64 {
	if m != nil {
		return m.N
	}
	return 0
}

type GetTopTagsResponse struct {
	Data    *GetTopTagsResponse_Data `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	Code    int64                    `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Message string                   `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *GetTopTagsResponse) Reset()                    { *m = GetTopTagsResponse{} }
func (m *GetTopTagsResponse) String() string            { return proto.CompactTextString(m) }
func (*GetTopTagsResponse) ProtoMessage()               {}
func (*GetTopTagsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{62} }

func (m *GetTopTagsResponse) GetData() *GetTopTagsResponse_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *GetTopTagsResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *GetTopTagsResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type GetTopTagsResponse_Data struct {
	Tags []string `protobuf:"bytes,1,rep,name=tags" json:"tags,omitempty"`
}

func (m *GetTopTagsResponse_Data) Reset()                    { *m = GetTopTagsResponse_Data{} }
func (m *GetTopTagsResponse_Data) String() string            { return proto.CompactTextString(m) }
func (*GetTopTagsResponse_Data) ProtoMessage()               {}
func (*GetTopTagsResponse_Data) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{62, 0} }

func (m *GetTopTagsResponse_Data) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

type AutocompleteTagsRequest struct {
	OrgId string `protobuf:"bytes,1,opt,name=org_id,json=orgId" json:"org_id,omitempty"`
	Name  string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (m *AutocompleteTagsRequest) Reset()                    { *m = AutocompleteTagsRequest{} }
func (m *AutocompleteTagsRequest) String() string            { return proto.CompactTextString(m) }
func (*AutocompleteTagsRequest) ProtoMessage()               {}
func (*AutocompleteTagsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{63} }

func (m *AutocompleteTagsRequest) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *AutocompleteTagsRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type AutocompleteTagsResponse struct {
	Data    *AutocompleteTagsResponse_Data `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	Code    int64                          `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Message string                         `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *AutocompleteTagsResponse) Reset()                    { *m = AutocompleteTagsResponse{} }
func (m *AutocompleteTagsResponse) String() string            { return proto.CompactTextString(m) }
func (*AutocompleteTagsResponse) ProtoMessage()               {}
func (*AutocompleteTagsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{64} }

func (m *AutocompleteTagsResponse) GetData() *AutocompleteTagsResponse_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *AutocompleteTagsResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *AutocompleteTagsResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type AutocompleteTagsResponse_Data struct {
	Tags []string `protobuf:"bytes,1,rep,name=tags" json:"tags,omitempty"`
}

func (m *AutocompleteTagsResponse_Data) Reset()         { *m = AutocompleteTagsResponse_Data{} }
func (m *AutocompleteTagsResponse_Data) String() string { return proto.CompactTextString(m) }
func (*AutocompleteTagsResponse_Data) ProtoMessage()    {}
func (*AutocompleteTagsResponse_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{64, 0}
}

func (m *AutocompleteTagsResponse_Data) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

type WarmupCacheSurveyRequest struct {
	SortParameter string `protobuf:"bytes,1,opt,name=sort_parameter,json=sortParameter" json:"sort_parameter,omitempty"`
	SortDirection string `protobuf:"bytes,2,opt,name=sort_direction,json=sortDirection" json:"sort_direction,omitempty"`
}

func (m *WarmupCacheSurveyRequest) Reset()                    { *m = WarmupCacheSurveyRequest{} }
func (m *WarmupCacheSurveyRequest) String() string            { return proto.CompactTextString(m) }
func (*WarmupCacheSurveyRequest) ProtoMessage()               {}
func (*WarmupCacheSurveyRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{65} }

func (m *WarmupCacheSurveyRequest) GetSortParameter() string {
	if m != nil {
		return m.SortParameter
	}
	return ""
}

func (m *WarmupCacheSurveyRequest) GetSortDirection() string {
	if m != nil {
		return m.SortDirection
	}
	return ""
}

type WarmupCacheSurveyResponse struct {
}

func (m *WarmupCacheSurveyResponse) Reset()                    { *m = WarmupCacheSurveyResponse{} }
func (m *WarmupCacheSurveyResponse) String() string            { return proto.CompactTextString(m) }
func (*WarmupCacheSurveyResponse) ProtoMessage()               {}
func (*WarmupCacheSurveyResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{66} }

func init() {
	proto.RegisterType((*Data)(nil), "go.micro.srv.survey.Data")
	proto.RegisterType((*ArrData)(nil), "go.micro.srv.survey.ArrData")
	proto.RegisterType((*AllRequest)(nil), "go.micro.srv.survey.AllRequest")
	proto.RegisterType((*AllResponse)(nil), "go.micro.srv.survey.AllResponse")
	proto.RegisterType((*NewRequest)(nil), "go.micro.srv.survey.NewRequest")
	proto.RegisterType((*NewResponse)(nil), "go.micro.srv.survey.NewResponse")
	proto.RegisterType((*NewResponse_Data)(nil), "go.micro.srv.survey.NewResponse.Data")
	proto.RegisterType((*CreateRequest)(nil), "go.micro.srv.survey.CreateRequest")
	proto.RegisterType((*CreateResponse)(nil), "go.micro.srv.survey.CreateResponse")
	proto.RegisterType((*UpdateRequest)(nil), "go.micro.srv.survey.UpdateRequest")
	proto.RegisterType((*UpdateResponse)(nil), "go.micro.srv.survey.UpdateResponse")
	proto.RegisterType((*ReadRequest)(nil), "go.micro.srv.survey.ReadRequest")
	proto.RegisterType((*ReadResponse)(nil), "go.micro.srv.survey.ReadResponse")
	proto.RegisterType((*DeleteRequest)(nil), "go.micro.srv.survey.DeleteRequest")
	proto.RegisterType((*DeleteResponse)(nil), "go.micro.srv.survey.DeleteResponse")
	proto.RegisterType((*CopyRequest)(nil), "go.micro.srv.survey.CopyRequest")
	proto.RegisterType((*CopyResponse)(nil), "go.micro.srv.survey.CopyResponse")
	proto.RegisterType((*QuestionsRequest)(nil), "go.micro.srv.survey.QuestionsRequest")
	proto.RegisterType((*QuestionsResponse)(nil), "go.micro.srv.survey.QuestionsResponse")
	proto.RegisterType((*QuestionsResponse_ArrData)(nil), "go.micro.srv.survey.QuestionsResponse.ArrData")
	proto.RegisterType((*QuestionRefRequest)(nil), "go.micro.srv.survey.QuestionRefRequest")
	proto.RegisterType((*QuestionRefResponse)(nil), "go.micro.srv.survey.QuestionRefResponse")
	proto.RegisterType((*QuestionRefResponse_Data)(nil), "go.micro.srv.survey.QuestionRefResponse.Data")
	proto.RegisterType((*CreateQuestionRequest)(nil), "go.micro.srv.survey.CreateQuestionRequest")
	proto.RegisterType((*CreateQuestionResponse)(nil), "go.micro.srv.survey.CreateQuestionResponse")
	proto.RegisterType((*CreateQuestionResponse_Data)(nil), "go.micro.srv.survey.CreateQuestionResponse.Data")
	proto.RegisterType((*ByCreatorRequest)(nil), "go.micro.srv.survey.ByCreatorRequest")
	proto.RegisterType((*ByCreatorResponse)(nil), "go.micro.srv.survey.ByCreatorResponse")
	proto.RegisterType((*LinkRequest)(nil), "go.micro.srv.survey.LinkRequest")
	proto.RegisterType((*LinkResponse)(nil), "go.micro.srv.survey.LinkResponse")
	proto.RegisterType((*TemplatesRequest)(nil), "go.micro.srv.survey.TemplatesRequest")
	proto.RegisterType((*TemplatesResponse)(nil), "go.micro.srv.survey.TemplatesResponse")
	proto.RegisterType((*FilterRequest)(nil), "go.micro.srv.survey.FilterRequest")
	proto.RegisterType((*FilterResponse)(nil), "go.micro.srv.survey.FilterResponse")
	proto.RegisterType((*SearchRequest)(nil), "go.micro.srv.survey.SearchRequest")
	proto.RegisterType((*SearchResponse)(nil), "go.micro.srv.survey.SearchResponse")
	proto.RegisterType((*ShareSurveyRequest)(nil), "go.micro.srv.survey.ShareSurveyRequest")
	proto.RegisterType((*ShareSurveyResponse)(nil), "go.micro.srv.survey.ShareSurveyResponse")
	proto.RegisterType((*AutocompleteSearchRequest)(nil), "go.micro.srv.survey.AutocompleteSearchRequest")
	proto.RegisterType((*AutocompleteSearchResponse)(nil), "go.micro.srv.survey.AutocompleteSearchResponse")
	proto.RegisterType((*AutocompleteSearchResponse_Data)(nil), "go.micro.srv.survey.AutocompleteSearchResponse.Data")
	proto.RegisterType((*Survey)(nil), "go.micro.srv.survey.Survey")
	proto.RegisterType((*Survey_Design)(nil), "go.micro.srv.survey.Survey.Design")
	proto.RegisterType((*Settings)(nil), "go.micro.srv.survey.Settings")
	proto.RegisterType((*Design)(nil), "go.micro.srv.survey.Design")
	proto.RegisterType((*DefaultQuestion)(nil), "go.micro.srv.survey.DefaultQuestion")
	proto.RegisterType((*Attachment)(nil), "go.micro.srv.survey.Attachment")
	proto.RegisterType((*Question)(nil), "go.micro.srv.survey.Question")
	proto.RegisterType((*Question_Design)(nil), "go.micro.srv.survey.Question.Design")
	proto.RegisterType((*Validation)(nil), "go.micro.srv.survey.Validation")
	proto.RegisterType((*TextQuestionField)(nil), "go.micro.srv.survey.TextQuestionField")
	proto.RegisterType((*TextQuestionField_Attributes)(nil), "go.micro.srv.survey.TextQuestionField.Attributes")
	proto.RegisterType((*TextQuestionSettings)(nil), "go.micro.srv.survey.TextQuestionSettings")
	proto.RegisterType((*MultipleChoiceQuestionField)(nil), "go.micro.srv.survey.MultipleChoiceQuestionField")
	proto.RegisterType((*MultipleChoiceQuestionField_Attributes)(nil), "go.micro.srv.survey.MultipleChoiceQuestionField.Attributes")
	proto.RegisterType((*MultipleChoiceQuestionSettings)(nil), "go.micro.srv.survey.MultipleChoiceQuestionSettings")
	proto.RegisterType((*Choice)(nil), "go.micro.srv.survey.Choice")
	proto.RegisterType((*ContactQuestionField)(nil), "go.micro.srv.survey.ContactQuestionField")
	proto.RegisterType((*ContactQuestionField_Attributes)(nil), "go.micro.srv.survey.ContactQuestionField.Attributes")
	proto.RegisterType((*ContactQuestionSettings)(nil), "go.micro.srv.survey.ContactQuestionSettings")
	proto.RegisterType((*LegalQuestionField)(nil), "go.micro.srv.survey.LegalQuestionField")
	proto.RegisterType((*LegalQuestionField_Attributes)(nil), "go.micro.srv.survey.LegalQuestionField.Attributes")
	proto.RegisterType((*LegalQuestionSettings)(nil), "go.micro.srv.survey.LegalQuestionSettings")
	proto.RegisterType((*DropdownQuestionField)(nil), "go.micro.srv.survey.DropdownQuestionField")
	proto.RegisterType((*DropdownQuestionField_Attributes)(nil), "go.micro.srv.survey.DropdownQuestionField.Attributes")
	proto.RegisterType((*DropdownQuestionSettings)(nil), "go.micro.srv.survey.DropdownQuestionSettings")
	proto.RegisterType((*FileQuestionField)(nil), "go.micro.srv.survey.FileQuestionField")
	proto.RegisterType((*FileQuestionField_Attributes)(nil), "go.micro.srv.survey.FileQuestionField.Attributes")
	proto.RegisterType((*FileQuestionSettings)(nil), "go.micro.srv.survey.FileQuestionSettings")
	proto.RegisterType((*BinaryQuestionField)(nil), "go.micro.srv.survey.BinaryQuestionField")
	proto.RegisterType((*BinaryQuestionField_Attributes)(nil), "go.micro.srv.survey.BinaryQuestionField.Attributes")
	proto.RegisterType((*BinaryQuestionSettings)(nil), "go.micro.srv.survey.BinaryQuestionSettings")
	proto.RegisterType((*RangeSelectQuestionField)(nil), "go.micro.srv.survey.RangeSelectQuestionField")
	proto.RegisterType((*RangeSelectQuestionField_Attributes)(nil), "go.micro.srv.survey.RangeSelectQuestionField.Attributes")
	proto.RegisterType((*RangeSelectQuestionField_Attributes_Labels)(nil), "go.micro.srv.survey.RangeSelectQuestionField.Attributes.Labels")
	proto.RegisterType((*RangeSelectQuestionSettings)(nil), "go.micro.srv.survey.RangeSelectQuestionSettings")
	proto.RegisterType((*ShareSurveyUser)(nil), "go.micro.srv.survey.ShareSurveyUser")
	proto.RegisterType((*GetTopTagsRequest)(nil), "go.micro.srv.survey.GetTopTagsRequest")
	proto.RegisterType((*GetTopTagsResponse)(nil), "go.micro.srv.survey.GetTopTagsResponse")
	proto.RegisterType((*GetTopTagsResponse_Data)(nil), "go.micro.srv.survey.GetTopTagsResponse.Data")
	proto.RegisterType((*AutocompleteTagsRequest)(nil), "go.micro.srv.survey.AutocompleteTagsRequest")
	proto.RegisterType((*AutocompleteTagsResponse)(nil), "go.micro.srv.survey.AutocompleteTagsResponse")
	proto.RegisterType((*AutocompleteTagsResponse_Data)(nil), "go.micro.srv.survey.AutocompleteTagsResponse.Data")
	proto.RegisterType((*WarmupCacheSurveyRequest)(nil), "go.micro.srv.survey.WarmupCacheSurveyRequest")
	proto.RegisterType((*WarmupCacheSurveyResponse)(nil), "go.micro.srv.survey.WarmupCacheSurveyResponse")
	proto.RegisterEnum("go.micro.srv.survey.ProgressBarStyle", ProgressBarStyle_name, ProgressBarStyle_value)
	proto.RegisterEnum("go.micro.srv.survey.QuestionType", QuestionType_name, QuestionType_value)
	proto.RegisterEnum("go.micro.srv.survey.AttachmentType", AttachmentType_name, AttachmentType_value)
	proto.RegisterEnum("go.micro.srv.survey.RenderTarget", RenderTarget_name, RenderTarget_value)
	proto.RegisterEnum("go.micro.srv.survey.SubmitMode", SubmitMode_name, SubmitMode_value)
	proto.RegisterEnum("go.micro.srv.survey.SurveyStatus", SurveyStatus_name, SurveyStatus_value)
	proto.RegisterEnum("go.micro.srv.survey.ButtonType", ButtonType_name, ButtonType_value)
	proto.RegisterEnum("go.micro.srv.survey.FileType", FileType_name, FileType_value)
	proto.RegisterEnum("go.micro.srv.survey.RangeStyle", RangeStyle_name, RangeStyle_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for SurveyService service

type SurveyServiceClient interface {
	All(ctx context.Context, in *AllRequest, opts ...client.CallOption) (*AllResponse, error)
	New(ctx context.Context, in *NewRequest, opts ...client.CallOption) (*NewResponse, error)
	Create(ctx context.Context, in *CreateRequest, opts ...client.CallOption) (*CreateResponse, error)
	Update(ctx context.Context, in *UpdateRequest, opts ...client.CallOption) (*UpdateResponse, error)
	Read(ctx context.Context, in *ReadRequest, opts ...client.CallOption) (*ReadResponse, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...client.CallOption) (*DeleteResponse, error)
	Copy(ctx context.Context, in *CopyRequest, opts ...client.CallOption) (*CopyResponse, error)
	Questions(ctx context.Context, in *QuestionsRequest, opts ...client.CallOption) (*QuestionsResponse, error)
	QuestionRef(ctx context.Context, in *QuestionRefRequest, opts ...client.CallOption) (*QuestionRefResponse, error)
	CreateQuestion(ctx context.Context, in *CreateQuestionRequest, opts ...client.CallOption) (*CreateQuestionResponse, error)
	ByCreator(ctx context.Context, in *ByCreatorRequest, opts ...client.CallOption) (*ByCreatorResponse, error)
	Link(ctx context.Context, in *LinkRequest, opts ...client.CallOption) (*LinkResponse, error)
	Templates(ctx context.Context, in *TemplatesRequest, opts ...client.CallOption) (*TemplatesResponse, error)
	Filter(ctx context.Context, in *FilterRequest, opts ...client.CallOption) (*FilterResponse, error)
	Search(ctx context.Context, in *SearchRequest, opts ...client.CallOption) (*SearchResponse, error)
	ShareSurvey(ctx context.Context, in *ShareSurveyRequest, opts ...client.CallOption) (*ShareSurveyResponse, error)
	AutocompleteSearch(ctx context.Context, in *AutocompleteSearchRequest, opts ...client.CallOption) (*AutocompleteSearchResponse, error)
	GetTopTags(ctx context.Context, in *GetTopTagsRequest, opts ...client.CallOption) (*GetTopTagsResponse, error)
	AutocompleteTags(ctx context.Context, in *AutocompleteTagsRequest, opts ...client.CallOption) (*AutocompleteTagsResponse, error)
	WarmupCacheSurvey(ctx context.Context, in *WarmupCacheSurveyRequest, opts ...client.CallOption) (*WarmupCacheSurveyResponse, error)
	GetShareableSurveys(ctx context.Context, in *go_micro_srv_user.GetShareableSurveyRequest, opts ...client.CallOption) (*go_micro_srv_user.GetShareableSurveyResponse, error)
}

type surveyServiceClient struct {
	c           client.Client
	serviceName string
}

func NewSurveyServiceClient(serviceName string, c client.Client) SurveyServiceClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "go.micro.srv.survey"
	}
	return &surveyServiceClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *surveyServiceClient) All(ctx context.Context, in *AllRequest, opts ...client.CallOption) (*AllResponse, error) {
	req := c.c.NewRequest(c.serviceName, "SurveyService.All", in)
	out := new(AllResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surveyServiceClient) New(ctx context.Context, in *NewRequest, opts ...client.CallOption) (*NewResponse, error) {
	req := c.c.NewRequest(c.serviceName, "SurveyService.New", in)
	out := new(NewResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surveyServiceClient) Create(ctx context.Context, in *CreateRequest, opts ...client.CallOption) (*CreateResponse, error) {
	req := c.c.NewRequest(c.serviceName, "SurveyService.Create", in)
	out := new(CreateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surveyServiceClient) Update(ctx context.Context, in *UpdateRequest, opts ...client.CallOption) (*UpdateResponse, error) {
	req := c.c.NewRequest(c.serviceName, "SurveyService.Update", in)
	out := new(UpdateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surveyServiceClient) Read(ctx context.Context, in *ReadRequest, opts ...client.CallOption) (*ReadResponse, error) {
	req := c.c.NewRequest(c.serviceName, "SurveyService.Read", in)
	out := new(ReadResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surveyServiceClient) Delete(ctx context.Context, in *DeleteRequest, opts ...client.CallOption) (*DeleteResponse, error) {
	req := c.c.NewRequest(c.serviceName, "SurveyService.Delete", in)
	out := new(DeleteResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surveyServiceClient) Copy(ctx context.Context, in *CopyRequest, opts ...client.CallOption) (*CopyResponse, error) {
	req := c.c.NewRequest(c.serviceName, "SurveyService.Copy", in)
	out := new(CopyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surveyServiceClient) Questions(ctx context.Context, in *QuestionsRequest, opts ...client.CallOption) (*QuestionsResponse, error) {
	req := c.c.NewRequest(c.serviceName, "SurveyService.Questions", in)
	out := new(QuestionsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surveyServiceClient) QuestionRef(ctx context.Context, in *QuestionRefRequest, opts ...client.CallOption) (*QuestionRefResponse, error) {
	req := c.c.NewRequest(c.serviceName, "SurveyService.QuestionRef", in)
	out := new(QuestionRefResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surveyServiceClient) CreateQuestion(ctx context.Context, in *CreateQuestionRequest, opts ...client.CallOption) (*CreateQuestionResponse, error) {
	req := c.c.NewRequest(c.serviceName, "SurveyService.CreateQuestion", in)
	out := new(CreateQuestionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surveyServiceClient) ByCreator(ctx context.Context, in *ByCreatorRequest, opts ...client.CallOption) (*ByCreatorResponse, error) {
	req := c.c.NewRequest(c.serviceName, "SurveyService.ByCreator", in)
	out := new(ByCreatorResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surveyServiceClient) Link(ctx context.Context, in *LinkRequest, opts ...client.CallOption) (*LinkResponse, error) {
	req := c.c.NewRequest(c.serviceName, "SurveyService.Link", in)
	out := new(LinkResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surveyServiceClient) Templates(ctx context.Context, in *TemplatesRequest, opts ...client.CallOption) (*TemplatesResponse, error) {
	req := c.c.NewRequest(c.serviceName, "SurveyService.Templates", in)
	out := new(TemplatesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surveyServiceClient) Filter(ctx context.Context, in *FilterRequest, opts ...client.CallOption) (*FilterResponse, error) {
	req := c.c.NewRequest(c.serviceName, "SurveyService.Filter", in)
	out := new(FilterResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surveyServiceClient) Search(ctx context.Context, in *SearchRequest, opts ...client.CallOption) (*SearchResponse, error) {
	req := c.c.NewRequest(c.serviceName, "SurveyService.Search", in)
	out := new(SearchResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surveyServiceClient) ShareSurvey(ctx context.Context, in *ShareSurveyRequest, opts ...client.CallOption) (*ShareSurveyResponse, error) {
	req := c.c.NewRequest(c.serviceName, "SurveyService.ShareSurvey", in)
	out := new(ShareSurveyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surveyServiceClient) AutocompleteSearch(ctx context.Context, in *AutocompleteSearchRequest, opts ...client.CallOption) (*AutocompleteSearchResponse, error) {
	req := c.c.NewRequest(c.serviceName, "SurveyService.AutocompleteSearch", in)
	out := new(AutocompleteSearchResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surveyServiceClient) GetTopTags(ctx context.Context, in *GetTopTagsRequest, opts ...client.CallOption) (*GetTopTagsResponse, error) {
	req := c.c.NewRequest(c.serviceName, "SurveyService.GetTopTags", in)
	out := new(GetTopTagsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surveyServiceClient) AutocompleteTags(ctx context.Context, in *AutocompleteTagsRequest, opts ...client.CallOption) (*AutocompleteTagsResponse, error) {
	req := c.c.NewRequest(c.serviceName, "SurveyService.AutocompleteTags", in)
	out := new(AutocompleteTagsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surveyServiceClient) WarmupCacheSurvey(ctx context.Context, in *WarmupCacheSurveyRequest, opts ...client.CallOption) (*WarmupCacheSurveyResponse, error) {
	req := c.c.NewRequest(c.serviceName, "SurveyService.WarmupCacheSurvey", in)
	out := new(WarmupCacheSurveyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surveyServiceClient) GetShareableSurveys(ctx context.Context, in *go_micro_srv_user.GetShareableSurveyRequest, opts ...client.CallOption) (*go_micro_srv_user.GetShareableSurveyResponse, error) {
	req := c.c.NewRequest(c.serviceName, "SurveyService.GetShareableSurveys", in)
	out := new(go_micro_srv_user.GetShareableSurveyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SurveyService service

type SurveyServiceHandler interface {
	All(context.Context, *AllRequest, *AllResponse) error
	New(context.Context, *NewRequest, *NewResponse) error
	Create(context.Context, *CreateRequest, *CreateResponse) error
	Update(context.Context, *UpdateRequest, *UpdateResponse) error
	Read(context.Context, *ReadRequest, *ReadResponse) error
	Delete(context.Context, *DeleteRequest, *DeleteResponse) error
	Copy(context.Context, *CopyRequest, *CopyResponse) error
	Questions(context.Context, *QuestionsRequest, *QuestionsResponse) error
	QuestionRef(context.Context, *QuestionRefRequest, *QuestionRefResponse) error
	CreateQuestion(context.Context, *CreateQuestionRequest, *CreateQuestionResponse) error
	ByCreator(context.Context, *ByCreatorRequest, *ByCreatorResponse) error
	Link(context.Context, *LinkRequest, *LinkResponse) error
	Templates(context.Context, *TemplatesRequest, *TemplatesResponse) error
	Filter(context.Context, *FilterRequest, *FilterResponse) error
	Search(context.Context, *SearchRequest, *SearchResponse) error
	ShareSurvey(context.Context, *ShareSurveyRequest, *ShareSurveyResponse) error
	AutocompleteSearch(context.Context, *AutocompleteSearchRequest, *AutocompleteSearchResponse) error
	GetTopTags(context.Context, *GetTopTagsRequest, *GetTopTagsResponse) error
	AutocompleteTags(context.Context, *AutocompleteTagsRequest, *AutocompleteTagsResponse) error
	WarmupCacheSurvey(context.Context, *WarmupCacheSurveyRequest, *WarmupCacheSurveyResponse) error
	GetShareableSurveys(context.Context, *go_micro_srv_user.GetShareableSurveyRequest, *go_micro_srv_user.GetShareableSurveyResponse) error
}

func RegisterSurveyServiceHandler(s server.Server, hdlr SurveyServiceHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&SurveyService{hdlr}, opts...))
}

type SurveyService struct {
	SurveyServiceHandler
}

func (h *SurveyService) All(ctx context.Context, in *AllRequest, out *AllResponse) error {
	return h.SurveyServiceHandler.All(ctx, in, out)
}

func (h *SurveyService) New(ctx context.Context, in *NewRequest, out *NewResponse) error {
	return h.SurveyServiceHandler.New(ctx, in, out)
}

func (h *SurveyService) Create(ctx context.Context, in *CreateRequest, out *CreateResponse) error {
	return h.SurveyServiceHandler.Create(ctx, in, out)
}

func (h *SurveyService) Update(ctx context.Context, in *UpdateRequest, out *UpdateResponse) error {
	return h.SurveyServiceHandler.Update(ctx, in, out)
}

func (h *SurveyService) Read(ctx context.Context, in *ReadRequest, out *ReadResponse) error {
	return h.SurveyServiceHandler.Read(ctx, in, out)
}

func (h *SurveyService) Delete(ctx context.Context, in *DeleteRequest, out *DeleteResponse) error {
	return h.SurveyServiceHandler.Delete(ctx, in, out)
}

func (h *SurveyService) Copy(ctx context.Context, in *CopyRequest, out *CopyResponse) error {
	return h.SurveyServiceHandler.Copy(ctx, in, out)
}

func (h *SurveyService) Questions(ctx context.Context, in *QuestionsRequest, out *QuestionsResponse) error {
	return h.SurveyServiceHandler.Questions(ctx, in, out)
}

func (h *SurveyService) QuestionRef(ctx context.Context, in *QuestionRefRequest, out *QuestionRefResponse) error {
	return h.SurveyServiceHandler.QuestionRef(ctx, in, out)
}

func (h *SurveyService) CreateQuestion(ctx context.Context, in *CreateQuestionRequest, out *CreateQuestionResponse) error {
	return h.SurveyServiceHandler.CreateQuestion(ctx, in, out)
}

func (h *SurveyService) ByCreator(ctx context.Context, in *ByCreatorRequest, out *ByCreatorResponse) error {
	return h.SurveyServiceHandler.ByCreator(ctx, in, out)
}

func (h *SurveyService) Link(ctx context.Context, in *LinkRequest, out *LinkResponse) error {
	return h.SurveyServiceHandler.Link(ctx, in, out)
}

func (h *SurveyService) Templates(ctx context.Context, in *TemplatesRequest, out *TemplatesResponse) error {
	return h.SurveyServiceHandler.Templates(ctx, in, out)
}

func (h *SurveyService) Filter(ctx context.Context, in *FilterRequest, out *FilterResponse) error {
	return h.SurveyServiceHandler.Filter(ctx, in, out)
}

func (h *SurveyService) Search(ctx context.Context, in *SearchRequest, out *SearchResponse) error {
	return h.SurveyServiceHandler.Search(ctx, in, out)
}

func (h *SurveyService) ShareSurvey(ctx context.Context, in *ShareSurveyRequest, out *ShareSurveyResponse) error {
	return h.SurveyServiceHandler.ShareSurvey(ctx, in, out)
}

func (h *SurveyService) AutocompleteSearch(ctx context.Context, in *AutocompleteSearchRequest, out *AutocompleteSearchResponse) error {
	return h.SurveyServiceHandler.AutocompleteSearch(ctx, in, out)
}

func (h *SurveyService) GetTopTags(ctx context.Context, in *GetTopTagsRequest, out *GetTopTagsResponse) error {
	return h.SurveyServiceHandler.GetTopTags(ctx, in, out)
}

func (h *SurveyService) AutocompleteTags(ctx context.Context, in *AutocompleteTagsRequest, out *AutocompleteTagsResponse) error {
	return h.SurveyServiceHandler.AutocompleteTags(ctx, in, out)
}

func (h *SurveyService) WarmupCacheSurvey(ctx context.Context, in *WarmupCacheSurveyRequest, out *WarmupCacheSurveyResponse) error {
	return h.SurveyServiceHandler.WarmupCacheSurvey(ctx, in, out)
}

func (h *SurveyService) GetShareableSurveys(ctx context.Context, in *go_micro_srv_user.GetShareableSurveyRequest, out *go_micro_srv_user.GetShareableSurveyResponse) error {
	return h.SurveyServiceHandler.GetShareableSurveys(ctx, in, out)
}

func init() { proto.RegisterFile("server/survey-srv/proto/survey/survey.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 3819 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x3b, 0x4d, 0x6f, 0x23, 0x47,
	0x76, 0x6a, 0x7e, 0xf3, 0x51, 0xd2, 0xb4, 0x6a, 0xbe, 0x38, 0x9a, 0xf5, 0x5a, 0xd3, 0x8e, 0x77,
	0x67, 0x65, 0x8f, 0xc6, 0x1e, 0x7b, 0xb2, 0xf6, 0xda, 0xb0, 0x4d, 0x91, 0x9c, 0x19, 0xee, 0x4a,
	0xe4, 0xb8, 0x49, 0x79, 0x76, 0x9c, 0x00, 0x44, 0x93, 0x5d, 0xa2, 0x1a, 0xd3, 0x64, 0x73, 0xba,
	0x9b, 0x92, 0x79, 0xc9, 0x29, 0x39, 0x6e, 0xce, 0x8b, 0x5c, 0x36, 0x40, 0x72, 0x5c, 0x20, 0xd8,
	0x9c, 0x72, 0x48, 0x72, 0x49, 0x82, 0x24, 0x40, 0x80, 0x6c, 0xb0, 0x87, 0x1c, 0x72, 0x0c, 0x90,
	0xfc, 0x82, 0x1c, 0x03, 0x04, 0xf5, 0xd5, 0x5d, 0x4d, 0x76, 0x53, 0xa4, 0x06, 0x9a, 0xec, 0xee,
	0x45, 0x62, 0xbd, 0x7a, 0xf5, 0xea, 0x7d, 0xd5, 0x7b, 0xaf, 0x3e, 0x1a, 0xde, 0xf1, 0xb0, 0x7b,
	0x8a, 0xdd, 0xfb, 0xde, 0xc4, 0x3d, 0xc5, 0xd3, 0x7b, 0x9e, 0x7b, 0x7a, 0x7f, 0xec, 0x3a, 0xbe,
	0xc3, 0x01, 0xfc, 0xdf, 0x1e, 0x85, 0xa1, 0xab, 0x03, 0x67, 0x6f, 0x68, 0xf5, 0x5d, 0x67, 0xcf,
	0x73, 0x4f, 0xf7, 0x58, 0xd7, 0xf6, 0xad, 0x81, 0xe3, 0x0c, 0x6c, 0xcc, 0x86, 0xf5, 0x26, 0xc7,
	0xf7, 0x8d, 0x11, 0xc7, 0xdf, 0x7e, 0x9b, 0x13, 0x9f, 0x78, 0xd8, 0x95, 0x48, 0x93, 0x26, 0xfd,
	0xc3, 0xd1, 0x02, 0x1e, 0x7c, 0xc3, 0xb7, 0xfa, 0x32, 0x0f, 0x14, 0xc0, 0xff, 0x31, 0x64, 0xed,
	0x13, 0xc8, 0xd4, 0x0c, 0xdf, 0x40, 0x1f, 0x40, 0x8e, 0x31, 0x50, 0x56, 0x76, 0x94, 0xbb, 0xa5,
	0x07, 0xb7, 0xf7, 0x62, 0x98, 0xdb, 0x6b, 0xd3, 0x7f, 0x3a, 0x47, 0xd5, 0xbe, 0x80, 0x7c, 0xc5,
	0x75, 0xe9, 0xf8, 0x87, 0x90, 0x67, 0x40, 0xaf, 0xac, 0xec, 0xa4, 0xcf, 0x23, 0x20, 0x70, 0xb5,
	0xbf, 0x52, 0x00, 0x2a, 0xb6, 0xad, 0xe3, 0x97, 0x13, 0xec, 0xf9, 0xe8, 0x3a, 0xe4, 0x1c, 0x77,
	0xd0, 0xb5, 0x4c, 0xca, 0x45, 0x51, 0xcf, 0x3a, 0xee, 0xa0, 0x61, 0xa2, 0x9b, 0x90, 0xf7, 0xb1,
	0x31, 0x24, 0xf0, 0x14, 0x85, 0xe7, 0x48, 0xb3, 0x61, 0xa2, 0x6b, 0x90, 0xb5, 0xad, 0xa1, 0xe5,
	0x97, 0xd3, 0x3b, 0xca, 0xdd, 0xb4, 0xce, 0x1a, 0xe8, 0x06, 0xe4, 0x9c, 0xe3, 0x63, 0x0f, 0xfb,
	0xe5, 0x0c, 0x05, 0xf3, 0x16, 0x7a, 0x1b, 0x36, 0x3d, 0xc7, 0xf5, 0xbb, 0x63, 0xc3, 0x35, 0x86,
	0xd8, 0xc7, 0x6e, 0x39, 0x4b, 0xa9, 0x6d, 0x10, 0xe8, 0x53, 0x01, 0x0c, 0xd0, 0x4c, 0xcb, 0xc5,
	0x7d, 0xdf, 0x72, 0x46, 0xe5, 0x5c, 0x88, 0x56, 0x13, 0x40, 0x6d, 0x08, 0x25, 0xca, 0xb9, 0x37,
	0x76, 0x46, 0x1e, 0x46, 0xef, 0x41, 0xc6, 0x34, 0x7c, 0x83, 0xab, 0xef, 0x5b, 0xb1, 0xd2, 0x73,
	0x65, 0xe9, 0x14, 0x13, 0x21, 0xc8, 0xf4, 0x1d, 0x13, 0x53, 0x91, 0xd2, 0x3a, 0xfd, 0x8d, 0xca,
	0x90, 0x1f, 0x62, 0xcf, 0x33, 0x06, 0x98, 0x8a, 0x54, 0xd4, 0x45, 0x53, 0xfb, 0x14, 0xa0, 0x89,
	0xcf, 0xe6, 0x15, 0x95, 0x4a, 0x50, 0x54, 0x5a, 0x56, 0x94, 0xf6, 0x17, 0x0a, 0x94, 0xe8, 0x70,
	0xce, 0xed, 0xc7, 0x11, 0x6e, 0xdf, 0x8e, 0xe5, 0x56, 0xc2, 0xdf, 0xbb, 0x28, 0xdb, 0xdb, 0xdf,
	0xe7, 0xfe, 0x85, 0x20, 0x73, 0x62, 0x78, 0x27, 0xdc, 0xae, 0xf4, 0x37, 0xba, 0x0d, 0x45, 0x36,
	0x55, 0x28, 0x47, 0x81, 0x01, 0x1a, 0xa6, 0xf6, 0x13, 0x05, 0x36, 0xaa, 0x2e, 0x36, 0x7c, 0x2c,
	0x64, 0xbe, 0x88, 0x8b, 0x2e, 0x50, 0x14, 0x59, 0x31, 0x92, 0xa2, 0x48, 0x33, 0xaa, 0xc1, 0x4c,
	0x44, 0x83, 0x43, 0xd8, 0x14, 0xec, 0x70, 0x1d, 0xde, 0x8b, 0xe8, 0xf0, 0x56, 0x2c, 0x37, 0x17,
	0x36, 0x37, 0x11, 0xff, 0x68, 0x6c, 0xfe, 0x3a, 0x89, 0x2f, 0xd8, 0x79, 0x1d, 0xe2, 0x1f, 0x42,
	0x49, 0xc7, 0x86, 0x29, 0x64, 0xdf, 0x84, 0x54, 0x10, 0x13, 0x52, 0x96, 0xb9, 0xb2, 0xfb, 0xbf,
	0x80, 0x75, 0x46, 0xee, 0x75, 0xf0, 0xde, 0x82, 0x8d, 0x1a, 0xb6, 0x71, 0x68, 0xb9, 0x57, 0xe5,
	0xfe, 0x33, 0xd8, 0x14, 0x04, 0x39, 0xff, 0xab, 0x31, 0xf4, 0x35, 0x94, 0xaa, 0xce, 0x78, 0x2a,
	0xd8, 0x89, 0x2c, 0x3b, 0x25, 0xba, 0xec, 0x2e, 0xa2, 0x59, 0x46, 0xfb, 0x75, 0x68, 0xf6, 0x3f,
	0x14, 0x50, 0xbf, 0x24, 0x32, 0x58, 0xce, 0xc8, 0xbb, 0x0c, 0x71, 0xc2, 0x84, 0x92, 0x89, 0x4f,
	0x28, 0xd9, 0x73, 0x12, 0x4a, 0x6e, 0xb9, 0x84, 0x92, 0x8f, 0x4b, 0x28, 0xbf, 0x4c, 0xc1, 0x96,
	0x24, 0x1d, 0x57, 0xe8, 0x7e, 0x44, 0xa1, 0x7b, 0xb1, 0x0a, 0x9d, 0x1b, 0xf5, 0x2a, 0x99, 0x66,
	0xfb, 0x9f, 0x94, 0x30, 0xad, 0x7f, 0x02, 0xc5, 0x97, 0x82, 0x38, 0x4f, 0xec, 0x6f, 0x2c, 0x64,
	0x41, 0x0f, 0xf1, 0xd1, 0x67, 0x90, 0x3f, 0xc3, 0x76, 0xdf, 0x19, 0xb2, 0x99, 0x4b, 0x0f, 0x7e,
	0x27, 0xde, 0x1d, 0xf0, 0xb1, 0x31, 0xb1, 0xfd, 0x80, 0x82, 0x18, 0x84, 0xbe, 0x80, 0x82, 0x7f,
	0x62, 0x8c, 0x5e, 0x4c, 0x9d, 0x09, 0xe5, 0x71, 0x59, 0x02, 0xc1, 0x28, 0xed, 0x0f, 0x15, 0x40,
	0x01, 0x18, 0x1f, 0x2f, 0xe5, 0x32, 0x77, 0x60, 0x5d, 0x88, 0xd0, 0x75, 0xf1, 0x31, 0x77, 0x9c,
	0xd2, 0xcb, 0x90, 0x8c, 0xe4, 0x55, 0xe9, 0x04, 0xaf, 0x8a, 0x06, 0xcf, 0x7f, 0x56, 0xe0, 0x6a,
	0x84, 0x0d, 0x6e, 0xdb, 0x4a, 0xc4, 0xb6, 0xf7, 0x16, 0x2b, 0x36, 0x1c, 0x77, 0xf1, 0x6c, 0x5c,
	0xe1, 0xd9, 0xf8, 0x63, 0x28, 0x08, 0x79, 0xf8, 0xe4, 0xe7, 0x58, 0x35, 0x40, 0xd7, 0x7e, 0xa6,
	0xc0, 0x75, 0x96, 0x08, 0x43, 0xce, 0x96, 0xd0, 0xaa, 0x3c, 0x63, 0x6a, 0xa5, 0x19, 0x57, 0xd6,
	0xf6, 0xbf, 0x2a, 0x70, 0x63, 0x96, 0x43, 0xae, 0xf0, 0x5a, 0x44, 0xe1, 0xef, 0xc5, 0x72, 0x10,
	0x3f, 0xf4, 0xff, 0x55, 0xe7, 0xff, 0xae, 0x80, 0xba, 0x3f, 0xa5, 0x8c, 0x39, 0xae, 0x50, 0xb7,
	0x94, 0xc3, 0x95, 0x48, 0x0e, 0xff, 0x4d, 0x8a, 0x79, 0x1e, 0x6c, 0x49, 0x82, 0xbd, 0xa6, 0x52,
	0xfa, 0x6b, 0x28, 0x1d, 0x58, 0xa3, 0x17, 0x97, 0x92, 0x0f, 0x9f, 0xc1, 0x3a, 0xa3, 0xcd, 0x65,
	0xb9, 0x05, 0x85, 0x89, 0x6b, 0x77, 0x6d, 0x6b, 0xf4, 0x82, 0xd3, 0xce, 0x4f, 0x5c, 0x9b, 0xa0,
	0xac, 0xc8, 0xf4, 0xdf, 0x2a, 0xa0, 0x76, 0xf0, 0x70, 0x6c, 0x1b, 0x3e, 0xf6, 0x7e, 0x13, 0xf7,
	0x4b, 0x1e, 0x6c, 0x49, 0xfc, 0xbf, 0x26, 0x53, 0xff, 0x22, 0x0d, 0x1b, 0x8f, 0x2c, 0xdb, 0xc7,
	0xc1, 0xb2, 0xf9, 0x18, 0x72, 0x64, 0x03, 0x3c, 0x61, 0xe9, 0x6c, 0xf3, 0xc1, 0x9d, 0x05, 0x65,
	0x74, 0x9b, 0x22, 0xea, 0x7c, 0x00, 0x99, 0xda, 0x37, 0x06, 0x5e, 0x39, 0xb5, 0x93, 0x26, 0x7b,
	0x18, 0xf2, 0x1b, 0xd5, 0x61, 0xdd, 0xc5, 0x23, 0x13, 0xbb, 0x1d, 0xc3, 0x1d, 0x60, 0xa2, 0xd8,
	0x64, 0xa2, 0xba, 0x84, 0xa8, 0x47, 0x86, 0xa1, 0xcf, 0x01, 0x4e, 0x2d, 0xcf, 0xea, 0x59, 0xb6,
	0xe5, 0x4f, 0xcb, 0x19, 0x4a, 0xe4, 0xcd, 0x19, 0x22, 0x6c, 0xdb, 0xfe, 0x55, 0x80, 0xa6, 0x4b,
	0x43, 0xd0, 0x1b, 0x00, 0x7d, 0x1a, 0xb8, 0xcc, 0x6e, 0x6f, 0x5a, 0xce, 0x52, 0x0e, 0x8b, 0x1c,
	0xb2, 0x2f, 0xef, 0x03, 0x72, 0x09, 0x8e, 0x92, 0x8f, 0x77, 0x94, 0x42, 0xbc, 0xa3, 0x14, 0xcf,
	0x71, 0x14, 0x58, 0xce, 0x51, 0x4a, 0x71, 0x8e, 0x32, 0x86, 0x4d, 0x61, 0xb2, 0xd7, 0xe4, 0x25,
	0x7f, 0x9c, 0x82, 0x8d, 0x36, 0x36, 0xdc, 0xfe, 0x89, 0xf0, 0x12, 0x04, 0x99, 0x91, 0x31, 0xc4,
	0x62, 0xbb, 0x4a, 0x7e, 0x5f, 0x72, 0x5c, 0xdd, 0x81, 0x92, 0x89, 0xbd, 0xbe, 0x6b, 0x8d, 0xa5,
	0x25, 0x24, 0x83, 0x48, 0x9c, 0xa2, 0x01, 0x9f, 0x32, 0xc6, 0xcc, 0x55, 0x20, 0x80, 0x26, 0x61,
	0x6e, 0xde, 0x04, 0x85, 0xe5, 0x4c, 0x50, 0x4c, 0x30, 0x81, 0xd0, 0xc7, 0x6b, 0x32, 0xc1, 0xdf,
	0x29, 0x80, 0xda, 0x27, 0x86, 0x8b, 0xf9, 0x06, 0x96, 0xdb, 0xe1, 0x62, 0xc7, 0x4a, 0xe8, 0x1e,
	0x64, 0x89, 0x66, 0xd8, 0x52, 0x2d, 0x3d, 0xb8, 0x19, 0x1d, 0x44, 0xcf, 0xca, 0x8e, 0x3c, 0xec,
	0xea, 0x0c, 0x2b, 0x79, 0x3b, 0x1c, 0x9a, 0x3c, 0x93, 0x60, 0xf2, 0x6c, 0x24, 0xfa, 0x57, 0xe1,
	0x6a, 0x44, 0x88, 0x99, 0xed, 0x9a, 0x12, 0xaf, 0x8a, 0x54, 0x54, 0x15, 0xef, 0xc3, 0xad, 0xca,
	0xc4, 0x77, 0xfa, 0xce, 0x70, 0x4c, 0x36, 0x7d, 0x51, 0xc7, 0xbc, 0x06, 0x59, 0xdf, 0xf2, 0x6d,
	0xe1, 0x99, 0xac, 0xa1, 0xfd, 0xa7, 0x02, 0xdb, 0x71, 0x63, 0xf8, 0xfc, 0x4f, 0x22, 0xc6, 0xfb,
	0x30, 0xde, 0x78, 0x89, 0xc3, 0x2f, 0x5e, 0xfa, 0x1c, 0xf2, 0xd2, 0xa7, 0x0e, 0x05, 0x97, 0x13,
	0xe3, 0x66, 0xfc, 0x5e, 0x6c, 0x6c, 0x93, 0x79, 0x10, 0xb3, 0xeb, 0xc1, 0x50, 0xed, 0x5f, 0xf2,
	0x90, 0x63, 0x9a, 0x5d, 0x76, 0x4b, 0x1d, 0x68, 0x2b, 0x2d, 0x69, 0x6b, 0x76, 0xa9, 0x65, 0xe6,
	0x97, 0x9a, 0x88, 0xf4, 0x59, 0x29, 0xd2, 0x97, 0x21, 0xcf, 0xe3, 0x29, 0x5d, 0x9c, 0x69, 0x5d,
	0x34, 0x49, 0xcf, 0x84, 0x9e, 0x8d, 0xb0, 0x28, 0x9a, 0xd6, 0x45, 0x13, 0xbd, 0xcf, 0xc7, 0x38,
	0x6c, 0x39, 0x2e, 0xf0, 0x44, 0x81, 0x87, 0xee, 0x43, 0xce, 0x23, 0x2e, 0xe4, 0x95, 0x8b, 0x8b,
	0x7d, 0x97, 0xa3, 0xa1, 0x4f, 0x20, 0xcf, 0x52, 0x89, 0x57, 0x86, 0x65, 0x93, 0x8f, 0x18, 0x81,
	0x7e, 0x17, 0xf2, 0x1e, 0xf6, 0x7d, 0x6b, 0x34, 0xa0, 0xb1, 0x78, 0x7e, 0x65, 0x33, 0xc3, 0xb4,
	0x19, 0x8e, 0x2e, 0x90, 0xe5, 0xad, 0xdd, 0xfa, 0xab, 0x6e, 0xed, 0x36, 0x2e, 0xb2, 0xb5, 0x8b,
	0xee, 0x4c, 0x37, 0x57, 0xdc, 0x99, 0xfe, 0x00, 0x72, 0x26, 0xf6, 0xac, 0xc1, 0xa8, 0x7c, 0x85,
	0x4e, 0xae, 0x2d, 0x88, 0x2a, 0x7b, 0x35, 0x8a, 0xa9, 0xf3, 0x11, 0x52, 0x01, 0xa1, 0xee, 0x28,
	0xab, 0x15, 0x10, 0xdf, 0x06, 0xb0, 0x3c, 0x51, 0x04, 0x95, 0xb7, 0x76, 0x94, 0xbb, 0x05, 0x5d,
	0x82, 0x90, 0x7e, 0x9f, 0xff, 0x6e, 0x98, 0x65, 0x44, 0xfd, 0x52, 0x82, 0x10, 0x47, 0xf3, 0x26,
	0xc3, 0xa1, 0xe1, 0x4e, 0xcb, 0x57, 0xd9, 0x4a, 0xe3, 0xcd, 0xed, 0x5f, 0x28, 0x90, 0x63, 0x7c,
	0xa2, 0x36, 0xa0, 0xb1, 0xeb, 0x0c, 0x5c, 0xec, 0x79, 0xdd, 0x9e, 0xe1, 0x76, 0x3d, 0x7f, 0xca,
	0xc3, 0xc5, 0x66, 0xc2, 0x41, 0xef, 0x53, 0x8e, 0xbe, 0x6f, 0xb8, 0x6d, 0x82, 0xac, 0xab, 0xe3,
	0x19, 0x08, 0xba, 0x0b, 0xaa, 0xc9, 0x4c, 0xd1, 0xed, 0x0d, 0xba, 0x7d, 0xc7, 0x76, 0x5c, 0xbe,
	0xd2, 0x36, 0x39, 0x7c, 0x7f, 0x50, 0x25, 0x50, 0x19, 0xd3, 0x76, 0x06, 0x4e, 0x77, 0xe2, 0xda,
	0x7c, 0xf5, 0x09, 0xcc, 0x03, 0x67, 0xe0, 0x1c, 0xb9, 0xb6, 0xf6, 0xd7, 0x29, 0x28, 0x70, 0xc7,
	0xa2, 0xaa, 0xf1, 0x4e, 0x9c, 0xb3, 0xfd, 0x89, 0xef, 0xf3, 0xfd, 0x51, 0x41, 0x97, 0x20, 0xa4,
	0xbf, 0x47, 0x7f, 0x75, 0xf0, 0x37, 0x3e, 0x9f, 0x5a, 0x82, 0xa0, 0x0f, 0xe1, 0x86, 0xe7, 0xf4,
	0x2d, 0xc3, 0xee, 0x92, 0x65, 0x61, 0x8d, 0x06, 0x5d, 0x3c, 0x32, 0x7a, 0x36, 0x66, 0x11, 0xbd,
	0xa0, 0x5f, 0x63, 0xbd, 0x6d, 0xd6, 0x59, 0x67, 0x7d, 0xe8, 0x7b, 0xa0, 0xba, 0x98, 0xe5, 0xc2,
	0x00, 0x3f, 0x43, 0xf1, 0xaf, 0x08, 0xb8, 0x40, 0xbd, 0x43, 0x0a, 0x3d, 0x8e, 0x4a, 0x64, 0x62,
	0x81, 0xbf, 0x24, 0x60, 0x47, 0xae, 0x8d, 0xbe, 0x80, 0x92, 0x37, 0xe9, 0x0d, 0x2d, 0xbf, 0x3b,
	0x24, 0x31, 0x32, 0x47, 0x55, 0xfe, 0x66, 0x82, 0x7b, 0x10, 0xbc, 0x43, 0xc7, 0xc4, 0x3a, 0x78,
	0xc1, 0x6f, 0xb4, 0x0b, 0x2a, 0x91, 0xb9, 0x63, 0x0d, 0x71, 0xc7, 0xa9, 0x8c, 0xbc, 0x33, 0xec,
	0xd2, 0x90, 0x52, 0xd0, 0xe7, 0xe0, 0xda, 0x67, 0x81, 0xc5, 0x6f, 0x41, 0x21, 0x30, 0x0a, 0xdf,
	0x63, 0xf4, 0xb8, 0x35, 0x6e, 0x41, 0x21, 0xb0, 0x02, 0x4f, 0x33, 0x36, 0x57, 0xff, 0x3f, 0xa6,
	0xe0, 0xca, 0xcc, 0xf2, 0x42, 0x0f, 0x21, 0xe3, 0x4f, 0xc7, 0xc2, 0x5b, 0xee, 0x2c, 0x5c, 0x4f,
	0x9d, 0xe9, 0x18, 0xeb, 0x14, 0x3d, 0x0c, 0xb3, 0xa9, 0x05, 0x61, 0x36, 0x3d, 0x1f, 0x66, 0xaf,
	0x41, 0xd6, 0x71, 0x4d, 0xec, 0x8a, 0x0a, 0x89, 0x36, 0xd0, 0x07, 0xc1, 0xe2, 0xcc, 0x2e, 0x38,
	0xe8, 0x9e, 0x5b, 0x95, 0x05, 0x1e, 0x9b, 0x3c, 0xaa, 0xf8, 0xa4, 0x68, 0x20, 0x1c, 0x4e, 0x0f,
	0xd0, 0x49, 0xed, 0x6d, 0xf8, 0xbe, 0xd1, 0x3f, 0x19, 0xe2, 0x91, 0x5f, 0xce, 0xd3, 0x50, 0x12,
	0x6f, 0xb5, 0x4a, 0x80, 0xa6, 0x4b, 0x43, 0xb4, 0x3f, 0x52, 0x00, 0xc2, 0x2e, 0xf4, 0xfd, 0x88,
	0x12, 0xdf, 0x3a, 0x87, 0x92, 0xa4, 0x46, 0x15, 0xd2, 0xa1, 0x9d, 0xc8, 0x4f, 0xa2, 0xa0, 0x33,
	0xcb, 0xf4, 0x4f, 0xc4, 0x7e, 0x8d, 0x36, 0x48, 0x09, 0x79, 0x82, 0xad, 0xc1, 0x49, 0xb0, 0x5f,
	0x63, 0x2d, 0xed, 0x7f, 0x53, 0x50, 0x08, 0x4c, 0x39, 0x9b, 0x21, 0x85, 0x69, 0x53, 0x2b, 0x9b,
	0x96, 0x99, 0x28, 0x2d, 0x9b, 0x28, 0x30, 0x78, 0x66, 0x81, 0xc1, 0xb3, 0xf3, 0x06, 0xff, 0x34,
	0x30, 0x6d, 0x6e, 0x41, 0xd0, 0x17, 0x6c, 0xcc, 0xda, 0xf8, 0x5d, 0xc8, 0x1d, 0x5b, 0xd8, 0x36,
	0x3d, 0xba, 0x26, 0x4a, 0x0f, 0xae, 0xed, 0xb1, 0xbb, 0xd2, 0x3d, 0x71, 0x57, 0xba, 0x57, 0x19,
	0x4d, 0x75, 0x8e, 0x83, 0xde, 0x93, 0x3c, 0xa2, 0xb0, 0x00, 0x3f, 0xc0, 0xda, 0x7e, 0xd5, 0x15,
	0xb5, 0x0e, 0xf0, 0x95, 0x61, 0x5b, 0xa6, 0x41, 0x6b, 0xe8, 0x3f, 0x49, 0x91, 0x0d, 0xef, 0x37,
	0xc1, 0xe2, 0x7a, 0x44, 0xd8, 0x42, 0x5f, 0x52, 0x67, 0x73, 0xad, 0xde, 0xc4, 0xc7, 0x1e, 0x2f,
	0xc8, 0xde, 0x8f, 0xd5, 0xc2, 0xdc, 0x58, 0xe2, 0x34, 0x7c, 0xa0, 0x2e, 0x11, 0x41, 0x15, 0x28,
	0x9d, 0x06, 0xd3, 0x8a, 0x92, 0x37, 0xde, 0x81, 0x43, 0xf6, 0x74, 0x79, 0xcc, 0xcc, 0x12, 0x60,
	0x67, 0xad, 0xab, 0x2c, 0x81, 0xed, 0x3d, 0xba, 0x02, 0x04, 0x47, 0x33, 0x8e, 0xa0, 0xcc, 0x39,
	0x82, 0xf6, 0x4b, 0x05, 0xae, 0xc9, 0x02, 0x06, 0x79, 0xe0, 0x1e, 0xa0, 0xa1, 0xf1, 0x8d, 0x35,
	0x9c, 0x0c, 0xbb, 0xfd, 0x13, 0xc3, 0x35, 0xfa, 0x3e, 0x29, 0x6c, 0x58, 0xe1, 0xbc, 0xc5, 0x7b,
	0xaa, 0x41, 0x07, 0x7a, 0x0b, 0x36, 0x86, 0x13, 0xdb, 0xb7, 0xc6, 0x36, 0xee, 0xba, 0xce, 0x99,
	0x47, 0x4d, 0x52, 0xd0, 0xd7, 0x05, 0x50, 0x77, 0xce, 0x3c, 0xf4, 0x2d, 0x28, 0x0e, 0x8d, 0x91,
	0x49, 0xca, 0xab, 0x29, 0x4f, 0x07, 0x21, 0x80, 0xf8, 0xb2, 0x35, 0x24, 0xc5, 0x2b, 0x0b, 0xfc,
	0xac, 0x41, 0xa0, 0xa7, 0x96, 0x89, 0x1d, 0xea, 0xc5, 0x05, 0x9d, 0x35, 0xd0, 0x36, 0x14, 0x4e,
	0x0d, 0xd7, 0x22, 0x19, 0x81, 0x7a, 0x70, 0x41, 0x0f, 0xda, 0xda, 0x9f, 0xa7, 0xe0, 0xf6, 0x21,
	0x9f, 0xb6, 0x7a, 0xe2, 0x58, 0x7d, 0x1c, 0xb5, 0xfc, 0x43, 0xc8, 0xf7, 0x29, 0x78, 0xf1, 0x56,
	0x86, 0x0d, 0xd5, 0x05, 0x2e, 0xfa, 0xbd, 0x88, 0xc3, 0xb0, 0xa3, 0xd3, 0x4f, 0x62, 0x47, 0x2e,
	0x98, 0x7c, 0x49, 0xd7, 0x49, 0xaf, 0xee, 0x3a, 0x2b, 0x5b, 0xfe, 0xef, 0x15, 0xf8, 0x76, 0x3c,
	0xa7, 0x81, 0x0f, 0x44, 0xec, 0xa5, 0xcc, 0xda, 0x8b, 0x78, 0x88, 0x30, 0xb9, 0x87, 0x6d, 0xbe,
	0x8d, 0x65, 0x76, 0xdf, 0x12, 0x3d, 0x6d, 0xd1, 0x81, 0xde, 0x60, 0x85, 0x45, 0xd7, 0xf1, 0x4f,
	0x78, 0x14, 0x2b, 0xe8, 0x45, 0x02, 0x69, 0x11, 0x00, 0x29, 0xa9, 0xc6, 0x56, 0xdf, 0x9f, 0xb8,
	0xc2, 0xfe, 0xa2, 0x49, 0xb8, 0x70, 0x8d, 0x91, 0xe9, 0x0c, 0x2d, 0x0f, 0x73, 0x2f, 0x08, 0x01,
	0xda, 0x87, 0x90, 0x63, 0xdc, 0xd3, 0x6d, 0xbe, 0xd1, 0xc3, 0xb6, 0xd8, 0x91, 0xd1, 0x46, 0xe8,
	0x55, 0x3c, 0x25, 0xd2, 0x86, 0xf6, 0x6f, 0x29, 0xb8, 0x56, 0x75, 0x46, 0xbe, 0xd1, 0x9f, 0x09,
	0x0b, 0x9d, 0x98, 0xb0, 0x10, 0xbf, 0x4f, 0x8b, 0x1b, 0x7e, 0x79, 0x91, 0x61, 0xfb, 0x67, 0x4a,
	0xc4, 0xbe, 0x6f, 0x00, 0x1c, 0x5b, 0xae, 0xe7, 0x77, 0xa5, 0xd3, 0x91, 0x22, 0x85, 0xd0, 0x53,
	0x88, 0xdb, 0x50, 0xb4, 0x0d, 0xd1, 0xcb, 0x6f, 0xf4, 0x09, 0x40, 0x1c, 0x51, 0xf4, 0x19, 0xf3,
	0xdd, 0xd1, 0x64, 0xd8, 0xe3, 0xd6, 0x28, 0xea, 0x1b, 0x1c, 0xda, 0xa4, 0x40, 0xa2, 0x39, 0x3c,
	0x34, 0x2c, 0x5b, 0xe4, 0x16, 0xda, 0x20, 0x76, 0x32, 0x4c, 0x93, 0xd4, 0xa4, 0x3c, 0xaf, 0x88,
	0xa6, 0xf6, 0x5f, 0x0a, 0xdc, 0x9c, 0x51, 0xca, 0x92, 0x9e, 0x14, 0x15, 0x86, 0x79, 0x50, 0x92,
	0x30, 0xcc, 0x71, 0x16, 0x09, 0xc3, 0xdc, 0x27, 0x49, 0x18, 0x1e, 0x46, 0xe6, 0x84, 0x61, 0x51,
	0x44, 0x34, 0x49, 0x80, 0x71, 0xf1, 0xcb, 0x89, 0xe5, 0xd2, 0xbd, 0x24, 0xd9, 0x7c, 0x06, 0x6d,
	0xed, 0x7f, 0x14, 0x40, 0x07, 0x78, 0x60, 0xd8, 0x51, 0xd7, 0xd1, 0x63, 0x5c, 0xe7, 0x41, 0xac,
	0x8d, 0xe7, 0x07, 0x5f, 0xa2, 0xe3, 0x3c, 0x59, 0x2d, 0x2e, 0xd0, 0xed, 0xb5, 0x33, 0xf2, 0x49,
	0xfe, 0xe1, 0x69, 0x95, 0x37, 0xb5, 0x9f, 0x2a, 0x70, 0x3d, 0xc2, 0x7a, 0x5b, 0xaa, 0xdc, 0xf8,
	0x16, 0x20, 0xac, 0xb7, 0xe2, 0xb9, 0xdc, 0x0f, 0xd0, 0x74, 0x69, 0xc8, 0x2c, 0x5b, 0xcc, 0x05,
	0x22, 0x6c, 0x2d, 0xcc, 0x1d, 0xda, 0x5f, 0xa6, 0xe0, 0x7a, 0xcd, 0x75, 0xc6, 0xa6, 0x73, 0x36,
	0x8a, 0x5a, 0xe5, 0x28, 0xc6, 0x2a, 0x0f, 0xe3, 0x0b, 0xd9, 0xb8, 0xf1, 0x97, 0x98, 0xeb, 0xa5,
	0x3c, 0x94, 0x5e, 0x3e, 0x0f, 0x5d, 0xc4, 0x9e, 0xce, 0x38, 0xe4, 0xb2, 0xa8, 0x8b, 0xa6, 0xf6,
	0x2b, 0x05, 0xca, 0xb3, 0x42, 0x2f, 0xbf, 0x62, 0xa5, 0x60, 0x9e, 0x9a, 0x0d, 0xe6, 0x91, 0x90,
	0x9d, 0x9e, 0x09, 0xd9, 0x24, 0x71, 0x18, 0xf6, 0xf8, 0xc4, 0xe8, 0x61, 0xdf, 0xea, 0x1b, 0x76,
	0x37, 0xdc, 0x7a, 0x14, 0xf4, 0x2d, 0xb9, 0xa7, 0x45, 0x6b, 0xdc, 0xf8, 0x3c, 0x93, 0x4d, 0xc8,
	0x33, 0xb4, 0xdc, 0x7b, 0x64, 0xd9, 0xf8, 0xa2, 0xe5, 0xde, 0xdc, 0xd8, 0xdf, 0xa6, 0x72, 0xef,
	0x0f, 0xe0, 0x9a, 0x2c, 0xdf, 0x92, 0xd6, 0x7e, 0x02, 0xaa, 0x61, 0xdb, 0xce, 0x19, 0x36, 0xbb,
	0xc7, 0x96, 0x8d, 0xf9, 0xf6, 0x25, 0x7d, 0x77, 0x33, 0x61, 0x6f, 0x47, 0xa6, 0xa0, 0x4b, 0xfc,
	0x0a, 0x1f, 0xf6, 0x88, 0x8f, 0xd2, 0x7e, 0x9a, 0x82, 0xab, 0xfb, 0xd6, 0xc8, 0x70, 0xa7, 0x51,
	0xf3, 0xb4, 0x63, 0xcc, 0xf3, 0x41, 0x7c, 0x00, 0x99, 0x1f, 0xfd, 0xeb, 0x6c, 0xa0, 0xbb, 0x11,
	0x03, 0x6d, 0x43, 0x81, 0x59, 0xa3, 0x27, 0x72, 0x76, 0xd0, 0xd6, 0xfe, 0x4c, 0x81, 0x1b, 0x51,
	0xe1, 0x96, 0xb4, 0x4e, 0xa4, 0xc2, 0x99, 0xaf, 0x9b, 0xd3, 0x72, 0xdd, 0x1c, 0x0d, 0xd4, 0x99,
	0x95, 0x03, 0xb5, 0xf6, 0x93, 0x34, 0x94, 0x75, 0x63, 0x34, 0xe0, 0x0b, 0x2e, 0x6a, 0xc5, 0x1f,
	0xc7, 0x58, 0xf1, 0xa3, 0xf8, 0x43, 0xd0, 0x04, 0x12, 0x97, 0x98, 0x07, 0x7f, 0xa5, 0xac, 0x18,
	0x38, 0x9f, 0x41, 0x8e, 0x96, 0x90, 0xa2, 0xd8, 0xff, 0xfc, 0xa2, 0x92, 0xec, 0x1d, 0x50, 0x32,
	0x3a, 0x27, 0xb7, 0xfd, 0x43, 0xc8, 0x31, 0x08, 0x42, 0x90, 0xb1, 0xf1, 0xb1, 0x2f, 0x6e, 0xb7,
	0xc8, 0x6f, 0x74, 0x03, 0x72, 0x7d, 0x3c, 0xf2, 0xb1, 0x38, 0xd7, 0xe3, 0x2d, 0x62, 0x50, 0x97,
	0x9e, 0x35, 0xf0, 0x23, 0x74, 0xda, 0xd0, 0xfe, 0x5b, 0x81, 0xdb, 0x31, 0x2c, 0x2c, 0xef, 0x3a,
	0x9e, 0x8f, 0xc7, 0x1e, 0xbf, 0x46, 0x60, 0x0d, 0xf4, 0x90, 0x40, 0xa7, 0xfc, 0xb0, 0x3e, 0xc9,
	0x3f, 0xd8, 0xa4, 0xf4, 0x94, 0x92, 0x61, 0xa3, 0x4f, 0xe1, 0x36, 0xcb, 0x09, 0x23, 0x7b, 0xda,
	0x25, 0xa2, 0x74, 0x29, 0x8b, 0x5d, 0xae, 0x44, 0x16, 0xdf, 0x6f, 0xd2, 0x24, 0x31, 0xb2, 0xa7,
	0x07, 0xf8, 0xd8, 0xd7, 0x49, 0x3f, 0x57, 0xc5, 0x9b, 0x50, 0xa2, 0xa3, 0x87, 0x96, 0x69, 0xda,
	0xa2, 0xce, 0xa7, 0x49, 0xe6, 0x90, 0x42, 0xb4, 0xbf, 0x49, 0xc1, 0x15, 0xe9, 0x4e, 0xe7, 0xc8,
	0xc3, 0xee, 0xdc, 0xd9, 0x4a, 0xf8, 0x34, 0x33, 0xb5, 0xfc, 0xd3, 0xcc, 0x77, 0x20, 0x33, 0xf1,
	0x78, 0x11, 0xbc, 0xe0, 0x98, 0x9f, 0x22, 0xa1, 0x8f, 0x82, 0x43, 0x67, 0xb6, 0x78, 0x76, 0xe2,
	0x8f, 0xe9, 0x29, 0x9f, 0xd1, 0x33, 0x67, 0xe9, 0x72, 0x22, 0x1b, 0xbd, 0x9c, 0xf8, 0x10, 0x8a,
	0xf4, 0x0a, 0x81, 0xde, 0x18, 0xe7, 0x16, 0x73, 0x51, 0x60, 0x98, 0xfb, 0xd4, 0x76, 0x7d, 0x67,
	0x42, 0x0f, 0xca, 0xa8, 0xed, 0x68, 0x43, 0xbe, 0x1c, 0x29, 0x44, 0x2e, 0x47, 0xb4, 0x8f, 0x60,
	0xeb, 0x31, 0xf6, 0x3b, 0xce, 0xb8, 0x63, 0x0c, 0xce, 0x7b, 0xb7, 0xb0, 0x0e, 0xca, 0x88, 0xfb,
	0x84, 0x32, 0xd2, 0xfe, 0x54, 0x01, 0x24, 0x0f, 0xe5, 0x97, 0x59, 0x5f, 0x44, 0x2e, 0xb3, 0xde,
	0x8d, 0x55, 0xf5, 0xfc, 0xb0, 0x8b, 0x5f, 0x62, 0x6d, 0x87, 0x2f, 0x98, 0xe9, 0x9d, 0x90, 0x12,
	0xde, 0x09, 0x69, 0x35, 0xb8, 0x29, 0xdf, 0x59, 0x2d, 0x21, 0xa2, 0xb8, 0x58, 0x4e, 0x85, 0x17,
	0xcb, 0xda, 0xcf, 0x15, 0x28, 0xcf, 0x93, 0xe1, 0xe2, 0x3e, 0x8a, 0x88, 0xfb, 0xe0, 0xdc, 0xbb,
	0xbb, 0xcb, 0x17, 0xfa, 0x04, 0xca, 0xcf, 0x0c, 0x77, 0x38, 0x19, 0x57, 0x8d, 0xfe, 0xc9, 0xcc,
	0x7d, 0xed, 0xfc, 0x35, 0xb4, 0xb2, 0xdc, 0x35, 0x74, 0x2a, 0xee, 0x1a, 0xfa, 0x36, 0xdc, 0x8a,
	0x99, 0x89, 0xc9, 0xb6, 0xfb, 0x25, 0xa8, 0xb3, 0x17, 0x17, 0xe8, 0x16, 0x5c, 0x9f, 0x85, 0x75,
	0x9b, 0xad, 0x66, 0x5d, 0x5d, 0x43, 0x05, 0xc8, 0x3c, 0x6a, 0x1c, 0x1c, 0xa8, 0x0a, 0x5a, 0x87,
	0x42, 0xf3, 0xe8, 0x70, 0xbf, 0xae, 0xd7, 0x6b, 0x6a, 0x0a, 0x01, 0xe4, 0x6a, 0xad, 0x4e, 0xa7,
	0x5e, 0x53, 0xd3, 0xbb, 0x3f, 0x57, 0x60, 0x5d, 0x3e, 0x03, 0x45, 0xd7, 0xc3, 0x17, 0x99, 0xa4,
	0x2d, 0x68, 0x95, 0x20, 0xff, 0xac, 0x7e, 0x50, 0x6d, 0x1d, 0xd6, 0x19, 0xb9, 0xf6, 0x93, 0x96,
	0xde, 0xa9, 0xff, 0xb8, 0xa3, 0xa6, 0xd0, 0x55, 0xb8, 0x72, 0x78, 0x74, 0xd0, 0x69, 0x3c, 0x3d,
	0xa8, 0x77, 0xab, 0x4f, 0x5a, 0x8d, 0x6a, 0x5d, 0x4d, 0x13, 0xfc, 0x6a, 0xab, 0xd9, 0xa9, 0x54,
	0x3b, 0x6a, 0x06, 0x15, 0x21, 0x7b, 0x50, 0x7f, 0x5c, 0x39, 0x50, 0xb3, 0x64, 0x68, 0x4d, 0x6f,
	0x3d, 0xad, 0xb5, 0x9e, 0x35, 0xd5, 0x1c, 0xe7, 0xb0, 0xae, 0xe6, 0x09, 0x4f, 0xfb, 0x8d, 0x66,
	0x45, 0x7f, 0xae, 0x16, 0xc8, 0x6f, 0xbd, 0xd2, 0x69, 0x34, 0x1f, 0xab, 0x45, 0xb4, 0x01, 0xc5,
	0xce, 0x93, 0x4a, 0xf3, 0x47, 0xdd, 0xe7, 0xad, 0x23, 0x15, 0x76, 0x3f, 0x87, 0xcd, 0xe8, 0x39,
	0x32, 0xba, 0x09, 0x57, 0xa3, 0x10, 0xc1, 0x71, 0x11, 0xb2, 0x8d, 0xc3, 0xca, 0x63, 0xc2, 0x6f,
	0x11, 0xb2, 0x5f, 0x35, 0x6a, 0xf5, 0x96, 0x9a, 0xda, 0xfd, 0x01, 0xac, 0xcb, 0xd7, 0x82, 0x44,
	0x5c, 0xb9, 0x2d, 0x06, 0xe7, 0x21, 0xfd, 0xac, 0xbe, 0xaf, 0x2a, 0x84, 0x97, 0xc3, 0xd6, 0x3e,
	0xe1, 0x31, 0xb5, 0xdb, 0x04, 0x08, 0x2f, 0x31, 0x88, 0xd8, 0x61, 0x4b, 0x52, 0x93, 0x5e, 0xaf,
	0x1f, 0xb4, 0x2a, 0x35, 0xa6, 0x26, 0xbd, 0x5e, 0x6b, 0xe8, 0xf5, 0x2a, 0x51, 0x93, 0x0a, 0xeb,
	0xed, 0x27, 0xad, 0x67, 0xdd, 0xc3, 0x7a, 0xbb, 0x4d, 0xd8, 0x4a, 0xef, 0x9a, 0xb0, 0x2e, 0xdf,
	0x99, 0x11, 0x5e, 0xe4, 0xb6, 0x24, 0x48, 0x4d, 0xaf, 0x3c, 0xea, 0xa8, 0x0a, 0xd5, 0xaa, 0x5e,
	0xaf, 0x74, 0x84, 0x19, 0x2b, 0xd5, 0x4e, 0xe3, 0x2b, 0xa2, 0xee, 0x75, 0x28, 0x34, 0x9a, 0xbc,
	0x95, 0x21, 0x68, 0xb5, 0xfa, 0x41, 0x9d, 0xa0, 0x65, 0x77, 0x5d, 0x80, 0xb0, 0xc2, 0x20, 0x5c,
	0x87, 0x2d, 0x31, 0x03, 0x40, 0xee, 0x79, 0xbd, 0xdd, 0x6d, 0xb6, 0x54, 0x05, 0x21, 0xd8, 0xac,
	0x54, 0xab, 0xf5, 0xa7, 0x9d, 0x6e, 0xad, 0x5e, 0x3d, 0x68, 0x34, 0xeb, 0x6a, 0x8a, 0xc2, 0x1e,
	0xeb, 0xf5, 0x7a, 0xb7, 0xd6, 0x68, 0xd3, 0x1f, 0x6a, 0x9a, 0x8c, 0xe9, 0x3c, 0x39, 0x3a, 0xdc,
	0x6f, 0xab, 0x19, 0x74, 0x05, 0x4a, 0x9d, 0x46, 0xf5, 0x47, 0xed, 0x6e, 0x55, 0x6f, 0xb5, 0xdb,
	0x6a, 0x76, 0xf7, 0x6b, 0x28, 0x88, 0xca, 0x14, 0x6d, 0xd1, 0xe7, 0x48, 0x78, 0x66, 0x3e, 0x6a,
	0x9a, 0x36, 0x53, 0x30, 0xb5, 0x4d, 0x5b, 0x4d, 0x11, 0xad, 0xd7, 0x5a, 0x55, 0x35, 0x4d, 0xfc,
	0x82, 0x3a, 0x57, 0x86, 0x80, 0x9e, 0xd6, 0x1e, 0xa9, 0x59, 0xf2, 0xa3, 0xd2, 0x7c, 0xae, 0xe6,
	0x76, 0xab, 0x00, 0x61, 0x46, 0x24, 0xf2, 0x84, 0x2d, 0x89, 0x3e, 0x73, 0x77, 0x55, 0x21, 0xa4,
	0xda, 0x9d, 0x8a, 0xce, 0xf4, 0xd5, 0x3e, 0x6c, 0x1c, 0xd4, 0x9f, 0xab, 0xe9, 0x07, 0xff, 0x70,
	0x05, 0x36, 0xb8, 0xae, 0xb1, 0x7b, 0x6a, 0xf5, 0x31, 0xfa, 0x21, 0xa4, 0x2b, 0xb6, 0x8d, 0x12,
	0x4a, 0xce, 0xe0, 0x7b, 0x9d, 0xed, 0x9d, 0x64, 0x04, 0x7e, 0x67, 0xbf, 0x46, 0x68, 0x35, 0xf1,
	0x59, 0x02, 0xad, 0xf0, 0x93, 0x96, 0x04, 0x5a, 0xd2, 0x47, 0x28, 0xda, 0x1a, 0x6a, 0x43, 0x8e,
	0x3d, 0xcf, 0x44, 0xda, 0x82, 0xb7, 0x9b, 0x82, 0xe2, 0x5b, 0x0b, 0x71, 0x64, 0xa2, 0xec, 0xd3,
	0x86, 0x04, 0xa2, 0x91, 0xcf, 0x30, 0x12, 0x88, 0x46, 0xbf, 0x8d, 0xd0, 0xd6, 0xd0, 0x21, 0x64,
	0x74, 0x6c, 0x98, 0x68, 0x27, 0xe1, 0x32, 0x3e, 0xf8, 0xb6, 0x61, 0xfb, 0xce, 0x02, 0x0c, 0x99,
	0x47, 0xf6, 0x09, 0x40, 0x02, 0x8f, 0x91, 0x0f, 0x0e, 0x12, 0x78, 0x8c, 0x7e, 0x43, 0xc0, 0x78,
	0xac, 0x3a, 0xe3, 0x69, 0x02, 0x8f, 0xd2, 0x27, 0x03, 0x09, 0x3c, 0xca, 0x0f, 0xff, 0xb5, 0x35,
	0xf4, 0xfb, 0x50, 0x0c, 0x1e, 0xa2, 0xa3, 0xb7, 0xcf, 0x7b, 0xa8, 0xce, 0x08, 0x7f, 0x67, 0xb9,
	0xf7, 0xec, 0xda, 0x1a, 0xea, 0x41, 0x49, 0x7a, 0x0a, 0x8d, 0xbe, 0x7b, 0xfe, 0x63, 0x69, 0x36,
	0xc3, 0xdd, 0x65, 0x5f, 0x55, 0x6b, 0x6b, 0xe8, 0x85, 0xf8, 0xc6, 0x27, 0xb8, 0x45, 0xdb, 0x5d,
	0xea, 0x89, 0x30, 0x9b, 0xe9, 0x9d, 0x15, 0x9e, 0x13, 0x33, 0x75, 0x05, 0x4f, 0x5f, 0x13, 0xd4,
	0x35, 0xfb, 0xe6, 0x37, 0x41, 0x5d, 0x73, 0x2f, 0x68, 0x99, 0x6d, 0xe9, 0x23, 0xd3, 0x78, 0xdb,
	0x4a, 0xcf, 0x5f, 0x13, 0x6c, 0x2b, 0x3f, 0x62, 0x65, 0xcc, 0x06, 0x8f, 0x37, 0x13, 0x98, 0x9d,
	0x7d, 0x9c, 0x9a, 0xc0, 0xec, 0xdc, 0x1b, 0x50, 0xe6, 0xdd, 0xec, 0xc5, 0x5f, 0x82, 0x77, 0x47,
	0x5e, 0x70, 0x26, 0x78, 0x77, 0xf4, 0xc9, 0x20, 0x23, 0xca, 0xde, 0x31, 0x25, 0x10, 0x8d, 0xbc,
	0xab, 0x4a, 0x20, 0x1a, 0x7d, 0x08, 0xc5, 0xbc, 0x50, 0xda, 0x0c, 0x24, 0x78, 0xe1, 0xfc, 0x3b,
	0xb6, 0x04, 0x2f, 0x8c, 0x79, 0x2b, 0xa6, 0xad, 0xa1, 0x33, 0x40, 0xf3, 0x8f, 0xb1, 0xd0, 0xde,
	0xd2, 0xaf, 0xb6, 0xd8, 0x8c, 0xf7, 0x57, 0x7c, 0xe5, 0xa5, 0xad, 0xa1, 0x2e, 0x40, 0x58, 0x38,
	0xa3, 0xef, 0x9c, 0x5b, 0x59, 0xb3, 0x89, 0xbe, 0xbb, 0x64, 0x05, 0xae, 0xad, 0xa1, 0x97, 0xa0,
	0xce, 0x96, 0xaa, 0xe8, 0xdd, 0x25, 0x2b, 0x5a, 0x36, 0xd9, 0xbd, 0x95, 0xea, 0x5f, 0x6d, 0x0d,
	0xf9, 0xb0, 0x35, 0x57, 0x42, 0xa2, 0x78, 0x2a, 0x49, 0x45, 0xed, 0xf6, 0xde, 0xb2, 0xe8, 0xd2,
	0xac, 0x57, 0x1f, 0x63, 0x9f, 0x9a, 0xd7, 0xe8, 0xd9, 0xbc, 0x7f, 0x4e, 0x56, 0xba, 0xbd, 0x9a,
	0xc7, 0x4b, 0x90, 0x35, 0x11, 0x5b, 0xcc, 0xda, 0xcb, 0xd1, 0x7b, 0xed, 0x0f, 0xfe, 0x2f, 0x00,
	0x00, 0xff, 0xff, 0x5e, 0xbd, 0xec, 0x3c, 0x85, 0x3c, 0x00, 0x00,
}
