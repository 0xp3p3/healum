// Code generated by protoc-gen-go. DO NOT EDIT.
// source: server/track-srv/proto/track/track.proto

/*
Package go_micro_srv_track is a generated protocol buffer package.

It is generated from these files:
	server/track-srv/proto/track/track.proto

It has these top-level messages:
	SubscribeMarker
	SubscribeMarkerRequest
	SubscribeMarkerResponse
	CreateTrackGoalRequest
	CreateTrackGoalResponse
	GetGoalCountRequest
	GetGoalCountResponse
	GetGoalHistoryRequest
	GetGoalHistoryResponse
	CreateTrackContentRequest
	CreateTrackContentResponse
	GetContentCountRequest
	GetContentCountResponse
	GetContentHistoryRequest
	GetContentHistoryResponse
	CreateTrackChallengeRequest
	CreateTrackChallengeResponse
	GetChallengeCountRequest
	GetChallengeCountResponse
	GetChallengeHistoryRequest
	GetChallengeHistoryResponse
	CreateTrackHabitRequest
	CreateTrackHabitResponse
	GetHabitCountRequest
	GetHabitCountResponse
	GetHabitHistoryRequest
	GetHabitHistoryResponse
	CreateTrackMarkerRequest
	CreateTrackMarkerResponse
	GetLastMarkerRequest
	GetLastMarkerResponse
	GetMarkerHistoryRequest
	GetMarkerHistoryResponse
	GetAllMarkerHistoryRequest
	GetAllMarkerHistoryResponse
	GetDefaultMarkerHistoryRequest
	GetDefaultMarkerHistoryResponse
	TrackGoal
	TrackChallenge
	TrackHabit
	TrackContent
	TrackMarker
*/
package go_micro_srv_track

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/any"
import google_protobuf1 "github.com/golang/protobuf/ptypes/struct"
import go_micro_srv_user "server/user-srv/proto/user"
import go_micro_srv_behaviour "server/behaviour-srv/proto/behaviour"
import go_micro_srv_content "server/content-srv/proto/content"
import go_micro_srv_static "server/static-srv/proto/static"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SubscribeMarker struct {
	Value *google_protobuf.Any `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
	Unit  string               `protobuf:"bytes,2,opt,name=unit" json:"unit,omitempty"`
}

func (m *SubscribeMarker) Reset()                    { *m = SubscribeMarker{} }
func (m *SubscribeMarker) String() string            { return proto.CompactTextString(m) }
func (*SubscribeMarker) ProtoMessage()               {}
func (*SubscribeMarker) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *SubscribeMarker) GetValue() *google_protobuf.Any {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *SubscribeMarker) GetUnit() string {
	if m != nil {
		return m.Unit
	}
	return ""
}

type SubscribeMarkerRequest struct {
	Channel string `protobuf:"bytes,1,opt,name=channel" json:"channel,omitempty"`
}

func (m *SubscribeMarkerRequest) Reset()                    { *m = SubscribeMarkerRequest{} }
func (m *SubscribeMarkerRequest) String() string            { return proto.CompactTextString(m) }
func (*SubscribeMarkerRequest) ProtoMessage()               {}
func (*SubscribeMarkerRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *SubscribeMarkerRequest) GetChannel() string {
	if m != nil {
		return m.Channel
	}
	return ""
}

type SubscribeMarkerResponse struct {
	Success bool `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
}

func (m *SubscribeMarkerResponse) Reset()                    { *m = SubscribeMarkerResponse{} }
func (m *SubscribeMarkerResponse) String() string            { return proto.CompactTextString(m) }
func (*SubscribeMarkerResponse) ProtoMessage()               {}
func (*SubscribeMarkerResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *SubscribeMarkerResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type CreateTrackGoalRequest struct {
	User   *go_micro_srv_user.User `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
	GoalId string                  `protobuf:"bytes,2,opt,name=goal_id,json=goalId" json:"goal_id,omitempty"`
	OrgId  string                  `protobuf:"bytes,3,opt,name=org_id,json=orgId" json:"org_id,omitempty"`
	TeamId string                  `protobuf:"bytes,4,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
}

func (m *CreateTrackGoalRequest) Reset()                    { *m = CreateTrackGoalRequest{} }
func (m *CreateTrackGoalRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateTrackGoalRequest) ProtoMessage()               {}
func (*CreateTrackGoalRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *CreateTrackGoalRequest) GetUser() *go_micro_srv_user.User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *CreateTrackGoalRequest) GetGoalId() string {
	if m != nil {
		return m.GoalId
	}
	return ""
}

func (m *CreateTrackGoalRequest) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *CreateTrackGoalRequest) GetTeamId() string {
	if m != nil {
		return m.TeamId
	}
	return ""
}

type CreateTrackGoalResponse struct {
	Data    *CreateTrackGoalResponse_Data `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	Code    int64                         `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Message string                        `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *CreateTrackGoalResponse) Reset()                    { *m = CreateTrackGoalResponse{} }
func (m *CreateTrackGoalResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateTrackGoalResponse) ProtoMessage()               {}
func (*CreateTrackGoalResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *CreateTrackGoalResponse) GetData() *CreateTrackGoalResponse_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *CreateTrackGoalResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *CreateTrackGoalResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type CreateTrackGoalResponse_Data struct {
	TrackGoal *TrackGoal `protobuf:"bytes,1,opt,name=track_goal,json=trackGoal" json:"track_goal,omitempty"`
	Count     int64      `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
}

func (m *CreateTrackGoalResponse_Data) Reset()                    { *m = CreateTrackGoalResponse_Data{} }
func (m *CreateTrackGoalResponse_Data) String() string            { return proto.CompactTextString(m) }
func (*CreateTrackGoalResponse_Data) ProtoMessage()               {}
func (*CreateTrackGoalResponse_Data) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4, 0} }

func (m *CreateTrackGoalResponse_Data) GetTrackGoal() *TrackGoal {
	if m != nil {
		return m.TrackGoal
	}
	return nil
}

func (m *CreateTrackGoalResponse_Data) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

type GetGoalCountRequest struct {
	UserId        string `protobuf:"bytes,8,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	GoalId        string `protobuf:"bytes,1,opt,name=goal_id,json=goalId" json:"goal_id,omitempty"`
	OrgId         string `protobuf:"bytes,2,opt,name=org_id,json=orgId" json:"org_id,omitempty"`
	TeamId        string `protobuf:"bytes,3,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
	Limit         int64  `protobuf:"varint,4,opt,name=limit" json:"limit,omitempty"`
	Offset        int64  `protobuf:"varint,5,opt,name=offset" json:"offset,omitempty"`
	From          int64  `protobuf:"varint,6,opt,name=from" json:"from,omitempty"`
	To            int64  `protobuf:"varint,7,opt,name=to" json:"to,omitempty"`
	SortParameter string `protobuf:"bytes,9,opt,name=sort_parameter,json=sortParameter" json:"sort_parameter,omitempty"`
	SortDirection string `protobuf:"bytes,10,opt,name=sort_direction,json=sortDirection" json:"sort_direction,omitempty"`
}

func (m *GetGoalCountRequest) Reset()                    { *m = GetGoalCountRequest{} }
func (m *GetGoalCountRequest) String() string            { return proto.CompactTextString(m) }
func (*GetGoalCountRequest) ProtoMessage()               {}
func (*GetGoalCountRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *GetGoalCountRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *GetGoalCountRequest) GetGoalId() string {
	if m != nil {
		return m.GoalId
	}
	return ""
}

func (m *GetGoalCountRequest) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *GetGoalCountRequest) GetTeamId() string {
	if m != nil {
		return m.TeamId
	}
	return ""
}

func (m *GetGoalCountRequest) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *GetGoalCountRequest) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *GetGoalCountRequest) GetFrom() int64 {
	if m != nil {
		return m.From
	}
	return 0
}

func (m *GetGoalCountRequest) GetTo() int64 {
	if m != nil {
		return m.To
	}
	return 0
}

func (m *GetGoalCountRequest) GetSortParameter() string {
	if m != nil {
		return m.SortParameter
	}
	return ""
}

func (m *GetGoalCountRequest) GetSortDirection() string {
	if m != nil {
		return m.SortDirection
	}
	return ""
}

type GetGoalCountResponse struct {
	Data    *GetGoalCountResponse_Data `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	Code    int64                      `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Message string                     `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *GetGoalCountResponse) Reset()                    { *m = GetGoalCountResponse{} }
func (m *GetGoalCountResponse) String() string            { return proto.CompactTextString(m) }
func (*GetGoalCountResponse) ProtoMessage()               {}
func (*GetGoalCountResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *GetGoalCountResponse) GetData() *GetGoalCountResponse_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *GetGoalCountResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *GetGoalCountResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type GetGoalCountResponse_Data struct {
	Count int64 `protobuf:"varint,1,opt,name=count" json:"count,omitempty"`
}

func (m *GetGoalCountResponse_Data) Reset()                    { *m = GetGoalCountResponse_Data{} }
func (m *GetGoalCountResponse_Data) String() string            { return proto.CompactTextString(m) }
func (*GetGoalCountResponse_Data) ProtoMessage()               {}
func (*GetGoalCountResponse_Data) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6, 0} }

func (m *GetGoalCountResponse_Data) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

type GetGoalHistoryRequest struct {
	GoalId        string `protobuf:"bytes,1,opt,name=goal_id,json=goalId" json:"goal_id,omitempty"`
	OrgId         string `protobuf:"bytes,2,opt,name=org_id,json=orgId" json:"org_id,omitempty"`
	TeamId        string `protobuf:"bytes,3,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
	Limit         int64  `protobuf:"varint,4,opt,name=limit" json:"limit,omitempty"`
	Offset        int64  `protobuf:"varint,5,opt,name=offset" json:"offset,omitempty"`
	From          int64  `protobuf:"varint,6,opt,name=from" json:"from,omitempty"`
	To            int64  `protobuf:"varint,7,opt,name=to" json:"to,omitempty"`
	SortParameter string `protobuf:"bytes,8,opt,name=sort_parameter,json=sortParameter" json:"sort_parameter,omitempty"`
	SortDirection string `protobuf:"bytes,9,opt,name=sort_direction,json=sortDirection" json:"sort_direction,omitempty"`
}

func (m *GetGoalHistoryRequest) Reset()                    { *m = GetGoalHistoryRequest{} }
func (m *GetGoalHistoryRequest) String() string            { return proto.CompactTextString(m) }
func (*GetGoalHistoryRequest) ProtoMessage()               {}
func (*GetGoalHistoryRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *GetGoalHistoryRequest) GetGoalId() string {
	if m != nil {
		return m.GoalId
	}
	return ""
}

func (m *GetGoalHistoryRequest) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *GetGoalHistoryRequest) GetTeamId() string {
	if m != nil {
		return m.TeamId
	}
	return ""
}

func (m *GetGoalHistoryRequest) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *GetGoalHistoryRequest) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *GetGoalHistoryRequest) GetFrom() int64 {
	if m != nil {
		return m.From
	}
	return 0
}

func (m *GetGoalHistoryRequest) GetTo() int64 {
	if m != nil {
		return m.To
	}
	return 0
}

func (m *GetGoalHistoryRequest) GetSortParameter() string {
	if m != nil {
		return m.SortParameter
	}
	return ""
}

func (m *GetGoalHistoryRequest) GetSortDirection() string {
	if m != nil {
		return m.SortDirection
	}
	return ""
}

type GetGoalHistoryResponse struct {
	Data    *GetGoalHistoryResponse_Data `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	Code    int64                        `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Message string                       `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *GetGoalHistoryResponse) Reset()                    { *m = GetGoalHistoryResponse{} }
func (m *GetGoalHistoryResponse) String() string            { return proto.CompactTextString(m) }
func (*GetGoalHistoryResponse) ProtoMessage()               {}
func (*GetGoalHistoryResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *GetGoalHistoryResponse) GetData() *GetGoalHistoryResponse_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *GetGoalHistoryResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *GetGoalHistoryResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type GetGoalHistoryResponse_Data struct {
	TrackGoals []*TrackGoal `protobuf:"bytes,1,rep,name=track_goals,json=trackGoals" json:"track_goals,omitempty"`
}

func (m *GetGoalHistoryResponse_Data) Reset()                    { *m = GetGoalHistoryResponse_Data{} }
func (m *GetGoalHistoryResponse_Data) String() string            { return proto.CompactTextString(m) }
func (*GetGoalHistoryResponse_Data) ProtoMessage()               {}
func (*GetGoalHistoryResponse_Data) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8, 0} }

func (m *GetGoalHistoryResponse_Data) GetTrackGoals() []*TrackGoal {
	if m != nil {
		return m.TrackGoals
	}
	return nil
}

type CreateTrackContentRequest struct {
	User      *go_micro_srv_user.User `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
	ContentId string                  `protobuf:"bytes,2,opt,name=content_id,json=contentId" json:"content_id,omitempty"`
	OrgId     string                  `protobuf:"bytes,3,opt,name=org_id,json=orgId" json:"org_id,omitempty"`
	TeamId    string                  `protobuf:"bytes,4,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
}

func (m *CreateTrackContentRequest) Reset()                    { *m = CreateTrackContentRequest{} }
func (m *CreateTrackContentRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateTrackContentRequest) ProtoMessage()               {}
func (*CreateTrackContentRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *CreateTrackContentRequest) GetUser() *go_micro_srv_user.User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *CreateTrackContentRequest) GetContentId() string {
	if m != nil {
		return m.ContentId
	}
	return ""
}

func (m *CreateTrackContentRequest) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *CreateTrackContentRequest) GetTeamId() string {
	if m != nil {
		return m.TeamId
	}
	return ""
}

type CreateTrackContentResponse struct {
	Data    *CreateTrackContentResponse_Data `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	Code    int64                            `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Message string                           `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *CreateTrackContentResponse) Reset()                    { *m = CreateTrackContentResponse{} }
func (m *CreateTrackContentResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateTrackContentResponse) ProtoMessage()               {}
func (*CreateTrackContentResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *CreateTrackContentResponse) GetData() *CreateTrackContentResponse_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *CreateTrackContentResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *CreateTrackContentResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type CreateTrackContentResponse_Data struct {
	TrackContent *TrackContent `protobuf:"bytes,1,opt,name=track_content,json=trackContent" json:"track_content,omitempty"`
	Count        int64         `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
}

func (m *CreateTrackContentResponse_Data) Reset()         { *m = CreateTrackContentResponse_Data{} }
func (m *CreateTrackContentResponse_Data) String() string { return proto.CompactTextString(m) }
func (*CreateTrackContentResponse_Data) ProtoMessage()    {}
func (*CreateTrackContentResponse_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{10, 0}
}

func (m *CreateTrackContentResponse_Data) GetTrackContent() *TrackContent {
	if m != nil {
		return m.TrackContent
	}
	return nil
}

func (m *CreateTrackContentResponse_Data) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

type GetContentCountRequest struct {
	UserId    string `protobuf:"bytes,8,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	ContentId string `protobuf:"bytes,1,opt,name=content_id,json=contentId" json:"content_id,omitempty"`
	OrgId     string `protobuf:"bytes,2,opt,name=org_id,json=orgId" json:"org_id,omitempty"`
	TeamId    string `protobuf:"bytes,3,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
	Limit     int64  `protobuf:"varint,4,opt,name=limit" json:"limit,omitempty"`
	Offset    int64  `protobuf:"varint,5,opt,name=offset" json:"offset,omitempty"`
	From      int64  `protobuf:"varint,6,opt,name=from" json:"from,omitempty"`
	To        int64  `protobuf:"varint,7,opt,name=to" json:"to,omitempty"`
}

func (m *GetContentCountRequest) Reset()                    { *m = GetContentCountRequest{} }
func (m *GetContentCountRequest) String() string            { return proto.CompactTextString(m) }
func (*GetContentCountRequest) ProtoMessage()               {}
func (*GetContentCountRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *GetContentCountRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *GetContentCountRequest) GetContentId() string {
	if m != nil {
		return m.ContentId
	}
	return ""
}

func (m *GetContentCountRequest) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *GetContentCountRequest) GetTeamId() string {
	if m != nil {
		return m.TeamId
	}
	return ""
}

func (m *GetContentCountRequest) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *GetContentCountRequest) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *GetContentCountRequest) GetFrom() int64 {
	if m != nil {
		return m.From
	}
	return 0
}

func (m *GetContentCountRequest) GetTo() int64 {
	if m != nil {
		return m.To
	}
	return 0
}

type GetContentCountResponse struct {
	Data    *GetContentCountResponse_Data `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	Code    int64                         `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Message string                        `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *GetContentCountResponse) Reset()                    { *m = GetContentCountResponse{} }
func (m *GetContentCountResponse) String() string            { return proto.CompactTextString(m) }
func (*GetContentCountResponse) ProtoMessage()               {}
func (*GetContentCountResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *GetContentCountResponse) GetData() *GetContentCountResponse_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *GetContentCountResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *GetContentCountResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type GetContentCountResponse_Data struct {
	Count int64 `protobuf:"varint,1,opt,name=count" json:"count,omitempty"`
}

func (m *GetContentCountResponse_Data) Reset()         { *m = GetContentCountResponse_Data{} }
func (m *GetContentCountResponse_Data) String() string { return proto.CompactTextString(m) }
func (*GetContentCountResponse_Data) ProtoMessage()    {}
func (*GetContentCountResponse_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{12, 0}
}

func (m *GetContentCountResponse_Data) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

type GetContentHistoryRequest struct {
	ContentId     string `protobuf:"bytes,1,opt,name=content_id,json=contentId" json:"content_id,omitempty"`
	OrgId         string `protobuf:"bytes,2,opt,name=org_id,json=orgId" json:"org_id,omitempty"`
	TeamId        string `protobuf:"bytes,3,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
	Limit         int64  `protobuf:"varint,4,opt,name=limit" json:"limit,omitempty"`
	Offset        int64  `protobuf:"varint,5,opt,name=offset" json:"offset,omitempty"`
	From          int64  `protobuf:"varint,6,opt,name=from" json:"from,omitempty"`
	To            int64  `protobuf:"varint,7,opt,name=to" json:"to,omitempty"`
	SortParameter string `protobuf:"bytes,8,opt,name=sort_parameter,json=sortParameter" json:"sort_parameter,omitempty"`
	SortDirection string `protobuf:"bytes,9,opt,name=sort_direction,json=sortDirection" json:"sort_direction,omitempty"`
}

func (m *GetContentHistoryRequest) Reset()                    { *m = GetContentHistoryRequest{} }
func (m *GetContentHistoryRequest) String() string            { return proto.CompactTextString(m) }
func (*GetContentHistoryRequest) ProtoMessage()               {}
func (*GetContentHistoryRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *GetContentHistoryRequest) GetContentId() string {
	if m != nil {
		return m.ContentId
	}
	return ""
}

func (m *GetContentHistoryRequest) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *GetContentHistoryRequest) GetTeamId() string {
	if m != nil {
		return m.TeamId
	}
	return ""
}

func (m *GetContentHistoryRequest) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *GetContentHistoryRequest) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *GetContentHistoryRequest) GetFrom() int64 {
	if m != nil {
		return m.From
	}
	return 0
}

func (m *GetContentHistoryRequest) GetTo() int64 {
	if m != nil {
		return m.To
	}
	return 0
}

func (m *GetContentHistoryRequest) GetSortParameter() string {
	if m != nil {
		return m.SortParameter
	}
	return ""
}

func (m *GetContentHistoryRequest) GetSortDirection() string {
	if m != nil {
		return m.SortDirection
	}
	return ""
}

type GetContentHistoryResponse struct {
	Data    *GetContentHistoryResponse_Data `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	Code    int64                           `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Message string                          `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *GetContentHistoryResponse) Reset()                    { *m = GetContentHistoryResponse{} }
func (m *GetContentHistoryResponse) String() string            { return proto.CompactTextString(m) }
func (*GetContentHistoryResponse) ProtoMessage()               {}
func (*GetContentHistoryResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *GetContentHistoryResponse) GetData() *GetContentHistoryResponse_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *GetContentHistoryResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *GetContentHistoryResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type GetContentHistoryResponse_Data struct {
	TrackContents []*TrackContent `protobuf:"bytes,1,rep,name=track_contents,json=trackContents" json:"track_contents,omitempty"`
}

func (m *GetContentHistoryResponse_Data) Reset()         { *m = GetContentHistoryResponse_Data{} }
func (m *GetContentHistoryResponse_Data) String() string { return proto.CompactTextString(m) }
func (*GetContentHistoryResponse_Data) ProtoMessage()    {}
func (*GetContentHistoryResponse_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{14, 0}
}

func (m *GetContentHistoryResponse_Data) GetTrackContents() []*TrackContent {
	if m != nil {
		return m.TrackContents
	}
	return nil
}

type CreateTrackChallengeRequest struct {
	User        *go_micro_srv_user.User `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
	ChallengeId string                  `protobuf:"bytes,2,opt,name=challenge_id,json=challengeId" json:"challenge_id,omitempty"`
	OrgId       string                  `protobuf:"bytes,3,opt,name=org_id,json=orgId" json:"org_id,omitempty"`
	TeamId      string                  `protobuf:"bytes,4,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
}

func (m *CreateTrackChallengeRequest) Reset()                    { *m = CreateTrackChallengeRequest{} }
func (m *CreateTrackChallengeRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateTrackChallengeRequest) ProtoMessage()               {}
func (*CreateTrackChallengeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *CreateTrackChallengeRequest) GetUser() *go_micro_srv_user.User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *CreateTrackChallengeRequest) GetChallengeId() string {
	if m != nil {
		return m.ChallengeId
	}
	return ""
}

func (m *CreateTrackChallengeRequest) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *CreateTrackChallengeRequest) GetTeamId() string {
	if m != nil {
		return m.TeamId
	}
	return ""
}

type CreateTrackChallengeResponse struct {
	Data    *CreateTrackChallengeResponse_Data `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	Code    int64                              `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Message string                             `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *CreateTrackChallengeResponse) Reset()                    { *m = CreateTrackChallengeResponse{} }
func (m *CreateTrackChallengeResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateTrackChallengeResponse) ProtoMessage()               {}
func (*CreateTrackChallengeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *CreateTrackChallengeResponse) GetData() *CreateTrackChallengeResponse_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *CreateTrackChallengeResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *CreateTrackChallengeResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type CreateTrackChallengeResponse_Data struct {
	TrackChallenge *TrackChallenge `protobuf:"bytes,1,opt,name=track_challenge,json=trackChallenge" json:"track_challenge,omitempty"`
	Count          int64           `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
}

func (m *CreateTrackChallengeResponse_Data) Reset()         { *m = CreateTrackChallengeResponse_Data{} }
func (m *CreateTrackChallengeResponse_Data) String() string { return proto.CompactTextString(m) }
func (*CreateTrackChallengeResponse_Data) ProtoMessage()    {}
func (*CreateTrackChallengeResponse_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{16, 0}
}

func (m *CreateTrackChallengeResponse_Data) GetTrackChallenge() *TrackChallenge {
	if m != nil {
		return m.TrackChallenge
	}
	return nil
}

func (m *CreateTrackChallengeResponse_Data) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

type GetChallengeCountRequest struct {
	UserId      string `protobuf:"bytes,8,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	ChallengeId string `protobuf:"bytes,1,opt,name=challenge_id,json=challengeId" json:"challenge_id,omitempty"`
	OrgId       string `protobuf:"bytes,2,opt,name=org_id,json=orgId" json:"org_id,omitempty"`
	TeamId      string `protobuf:"bytes,3,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
	Limit       int64  `protobuf:"varint,4,opt,name=limit" json:"limit,omitempty"`
	Offset      int64  `protobuf:"varint,5,opt,name=offset" json:"offset,omitempty"`
	From        int64  `protobuf:"varint,6,opt,name=from" json:"from,omitempty"`
	To          int64  `protobuf:"varint,7,opt,name=to" json:"to,omitempty"`
}

func (m *GetChallengeCountRequest) Reset()                    { *m = GetChallengeCountRequest{} }
func (m *GetChallengeCountRequest) String() string            { return proto.CompactTextString(m) }
func (*GetChallengeCountRequest) ProtoMessage()               {}
func (*GetChallengeCountRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *GetChallengeCountRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *GetChallengeCountRequest) GetChallengeId() string {
	if m != nil {
		return m.ChallengeId
	}
	return ""
}

func (m *GetChallengeCountRequest) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *GetChallengeCountRequest) GetTeamId() string {
	if m != nil {
		return m.TeamId
	}
	return ""
}

func (m *GetChallengeCountRequest) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *GetChallengeCountRequest) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *GetChallengeCountRequest) GetFrom() int64 {
	if m != nil {
		return m.From
	}
	return 0
}

func (m *GetChallengeCountRequest) GetTo() int64 {
	if m != nil {
		return m.To
	}
	return 0
}

type GetChallengeCountResponse struct {
	Data    *GetChallengeCountResponse_Data `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	Code    int64                           `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Message string                          `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *GetChallengeCountResponse) Reset()                    { *m = GetChallengeCountResponse{} }
func (m *GetChallengeCountResponse) String() string            { return proto.CompactTextString(m) }
func (*GetChallengeCountResponse) ProtoMessage()               {}
func (*GetChallengeCountResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *GetChallengeCountResponse) GetData() *GetChallengeCountResponse_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *GetChallengeCountResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *GetChallengeCountResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type GetChallengeCountResponse_Data struct {
	Count int64 `protobuf:"varint,1,opt,name=count" json:"count,omitempty"`
}

func (m *GetChallengeCountResponse_Data) Reset()         { *m = GetChallengeCountResponse_Data{} }
func (m *GetChallengeCountResponse_Data) String() string { return proto.CompactTextString(m) }
func (*GetChallengeCountResponse_Data) ProtoMessage()    {}
func (*GetChallengeCountResponse_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{18, 0}
}

func (m *GetChallengeCountResponse_Data) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

type GetChallengeHistoryRequest struct {
	ChallengeId   string `protobuf:"bytes,1,opt,name=challenge_id,json=challengeId" json:"challenge_id,omitempty"`
	OrgId         string `protobuf:"bytes,2,opt,name=org_id,json=orgId" json:"org_id,omitempty"`
	TeamId        string `protobuf:"bytes,3,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
	Limit         int64  `protobuf:"varint,4,opt,name=limit" json:"limit,omitempty"`
	Offset        int64  `protobuf:"varint,5,opt,name=offset" json:"offset,omitempty"`
	From          int64  `protobuf:"varint,6,opt,name=from" json:"from,omitempty"`
	To            int64  `protobuf:"varint,7,opt,name=to" json:"to,omitempty"`
	SortParameter string `protobuf:"bytes,8,opt,name=sort_parameter,json=sortParameter" json:"sort_parameter,omitempty"`
	SortDirection string `protobuf:"bytes,9,opt,name=sort_direction,json=sortDirection" json:"sort_direction,omitempty"`
}

func (m *GetChallengeHistoryRequest) Reset()                    { *m = GetChallengeHistoryRequest{} }
func (m *GetChallengeHistoryRequest) String() string            { return proto.CompactTextString(m) }
func (*GetChallengeHistoryRequest) ProtoMessage()               {}
func (*GetChallengeHistoryRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *GetChallengeHistoryRequest) GetChallengeId() string {
	if m != nil {
		return m.ChallengeId
	}
	return ""
}

func (m *GetChallengeHistoryRequest) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *GetChallengeHistoryRequest) GetTeamId() string {
	if m != nil {
		return m.TeamId
	}
	return ""
}

func (m *GetChallengeHistoryRequest) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *GetChallengeHistoryRequest) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *GetChallengeHistoryRequest) GetFrom() int64 {
	if m != nil {
		return m.From
	}
	return 0
}

func (m *GetChallengeHistoryRequest) GetTo() int64 {
	if m != nil {
		return m.To
	}
	return 0
}

func (m *GetChallengeHistoryRequest) GetSortParameter() string {
	if m != nil {
		return m.SortParameter
	}
	return ""
}

func (m *GetChallengeHistoryRequest) GetSortDirection() string {
	if m != nil {
		return m.SortDirection
	}
	return ""
}

type GetChallengeHistoryResponse struct {
	Data    *GetChallengeHistoryResponse_Data `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	Code    int64                             `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Message string                            `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *GetChallengeHistoryResponse) Reset()                    { *m = GetChallengeHistoryResponse{} }
func (m *GetChallengeHistoryResponse) String() string            { return proto.CompactTextString(m) }
func (*GetChallengeHistoryResponse) ProtoMessage()               {}
func (*GetChallengeHistoryResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *GetChallengeHistoryResponse) GetData() *GetChallengeHistoryResponse_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *GetChallengeHistoryResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *GetChallengeHistoryResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type GetChallengeHistoryResponse_Data struct {
	TrackChallenges []*TrackChallenge `protobuf:"bytes,1,rep,name=track_challenges,json=trackChallenges" json:"track_challenges,omitempty"`
}

func (m *GetChallengeHistoryResponse_Data) Reset()         { *m = GetChallengeHistoryResponse_Data{} }
func (m *GetChallengeHistoryResponse_Data) String() string { return proto.CompactTextString(m) }
func (*GetChallengeHistoryResponse_Data) ProtoMessage()    {}
func (*GetChallengeHistoryResponse_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{20, 0}
}

func (m *GetChallengeHistoryResponse_Data) GetTrackChallenges() []*TrackChallenge {
	if m != nil {
		return m.TrackChallenges
	}
	return nil
}

type CreateTrackHabitRequest struct {
	User    *go_micro_srv_user.User `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
	HabitId string                  `protobuf:"bytes,2,opt,name=habit_id,json=habitId" json:"habit_id,omitempty"`
	OrgId   string                  `protobuf:"bytes,3,opt,name=org_id,json=orgId" json:"org_id,omitempty"`
	TeamId  string                  `protobuf:"bytes,4,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
}

func (m *CreateTrackHabitRequest) Reset()                    { *m = CreateTrackHabitRequest{} }
func (m *CreateTrackHabitRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateTrackHabitRequest) ProtoMessage()               {}
func (*CreateTrackHabitRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *CreateTrackHabitRequest) GetUser() *go_micro_srv_user.User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *CreateTrackHabitRequest) GetHabitId() string {
	if m != nil {
		return m.HabitId
	}
	return ""
}

func (m *CreateTrackHabitRequest) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *CreateTrackHabitRequest) GetTeamId() string {
	if m != nil {
		return m.TeamId
	}
	return ""
}

type CreateTrackHabitResponse struct {
	Data    *CreateTrackHabitResponse_Data `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	Code    int64                          `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Message string                         `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *CreateTrackHabitResponse) Reset()                    { *m = CreateTrackHabitResponse{} }
func (m *CreateTrackHabitResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateTrackHabitResponse) ProtoMessage()               {}
func (*CreateTrackHabitResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *CreateTrackHabitResponse) GetData() *CreateTrackHabitResponse_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *CreateTrackHabitResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *CreateTrackHabitResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type CreateTrackHabitResponse_Data struct {
	TrackHabit *TrackHabit `protobuf:"bytes,1,opt,name=track_habit,json=trackHabit" json:"track_habit,omitempty"`
	Count      int64       `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
}

func (m *CreateTrackHabitResponse_Data) Reset()         { *m = CreateTrackHabitResponse_Data{} }
func (m *CreateTrackHabitResponse_Data) String() string { return proto.CompactTextString(m) }
func (*CreateTrackHabitResponse_Data) ProtoMessage()    {}
func (*CreateTrackHabitResponse_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{22, 0}
}

func (m *CreateTrackHabitResponse_Data) GetTrackHabit() *TrackHabit {
	if m != nil {
		return m.TrackHabit
	}
	return nil
}

func (m *CreateTrackHabitResponse_Data) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

type GetHabitCountRequest struct {
	UserId  string `protobuf:"bytes,8,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	HabitId string `protobuf:"bytes,1,opt,name=habit_id,json=habitId" json:"habit_id,omitempty"`
	OrgId   string `protobuf:"bytes,2,opt,name=org_id,json=orgId" json:"org_id,omitempty"`
	TeamId  string `protobuf:"bytes,3,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
	Limit   int64  `protobuf:"varint,4,opt,name=limit" json:"limit,omitempty"`
	Offset  int64  `protobuf:"varint,5,opt,name=offset" json:"offset,omitempty"`
	From    int64  `protobuf:"varint,6,opt,name=from" json:"from,omitempty"`
	To      int64  `protobuf:"varint,7,opt,name=to" json:"to,omitempty"`
}

func (m *GetHabitCountRequest) Reset()                    { *m = GetHabitCountRequest{} }
func (m *GetHabitCountRequest) String() string            { return proto.CompactTextString(m) }
func (*GetHabitCountRequest) ProtoMessage()               {}
func (*GetHabitCountRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *GetHabitCountRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *GetHabitCountRequest) GetHabitId() string {
	if m != nil {
		return m.HabitId
	}
	return ""
}

func (m *GetHabitCountRequest) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *GetHabitCountRequest) GetTeamId() string {
	if m != nil {
		return m.TeamId
	}
	return ""
}

func (m *GetHabitCountRequest) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *GetHabitCountRequest) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *GetHabitCountRequest) GetFrom() int64 {
	if m != nil {
		return m.From
	}
	return 0
}

func (m *GetHabitCountRequest) GetTo() int64 {
	if m != nil {
		return m.To
	}
	return 0
}

type GetHabitCountResponse struct {
	Data    *GetHabitCountResponse_Data `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	Code    int64                       `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Message string                      `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *GetHabitCountResponse) Reset()                    { *m = GetHabitCountResponse{} }
func (m *GetHabitCountResponse) String() string            { return proto.CompactTextString(m) }
func (*GetHabitCountResponse) ProtoMessage()               {}
func (*GetHabitCountResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *GetHabitCountResponse) GetData() *GetHabitCountResponse_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *GetHabitCountResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *GetHabitCountResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type GetHabitCountResponse_Data struct {
	Count int64 `protobuf:"varint,1,opt,name=count" json:"count,omitempty"`
}

func (m *GetHabitCountResponse_Data) Reset()                    { *m = GetHabitCountResponse_Data{} }
func (m *GetHabitCountResponse_Data) String() string            { return proto.CompactTextString(m) }
func (*GetHabitCountResponse_Data) ProtoMessage()               {}
func (*GetHabitCountResponse_Data) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24, 0} }

func (m *GetHabitCountResponse_Data) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

type GetHabitHistoryRequest struct {
	HabitId       string `protobuf:"bytes,1,opt,name=habit_id,json=habitId" json:"habit_id,omitempty"`
	OrgId         string `protobuf:"bytes,2,opt,name=org_id,json=orgId" json:"org_id,omitempty"`
	TeamId        string `protobuf:"bytes,3,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
	Limit         int64  `protobuf:"varint,4,opt,name=limit" json:"limit,omitempty"`
	Offset        int64  `protobuf:"varint,5,opt,name=offset" json:"offset,omitempty"`
	From          int64  `protobuf:"varint,6,opt,name=from" json:"from,omitempty"`
	To            int64  `protobuf:"varint,7,opt,name=to" json:"to,omitempty"`
	SortParameter string `protobuf:"bytes,8,opt,name=sort_parameter,json=sortParameter" json:"sort_parameter,omitempty"`
	SortDirection string `protobuf:"bytes,9,opt,name=sort_direction,json=sortDirection" json:"sort_direction,omitempty"`
}

func (m *GetHabitHistoryRequest) Reset()                    { *m = GetHabitHistoryRequest{} }
func (m *GetHabitHistoryRequest) String() string            { return proto.CompactTextString(m) }
func (*GetHabitHistoryRequest) ProtoMessage()               {}
func (*GetHabitHistoryRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *GetHabitHistoryRequest) GetHabitId() string {
	if m != nil {
		return m.HabitId
	}
	return ""
}

func (m *GetHabitHistoryRequest) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *GetHabitHistoryRequest) GetTeamId() string {
	if m != nil {
		return m.TeamId
	}
	return ""
}

func (m *GetHabitHistoryRequest) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *GetHabitHistoryRequest) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *GetHabitHistoryRequest) GetFrom() int64 {
	if m != nil {
		return m.From
	}
	return 0
}

func (m *GetHabitHistoryRequest) GetTo() int64 {
	if m != nil {
		return m.To
	}
	return 0
}

func (m *GetHabitHistoryRequest) GetSortParameter() string {
	if m != nil {
		return m.SortParameter
	}
	return ""
}

func (m *GetHabitHistoryRequest) GetSortDirection() string {
	if m != nil {
		return m.SortDirection
	}
	return ""
}

type GetHabitHistoryResponse struct {
	Data    *GetHabitHistoryResponse_Data `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	Code    int64                         `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Message string                        `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *GetHabitHistoryResponse) Reset()                    { *m = GetHabitHistoryResponse{} }
func (m *GetHabitHistoryResponse) String() string            { return proto.CompactTextString(m) }
func (*GetHabitHistoryResponse) ProtoMessage()               {}
func (*GetHabitHistoryResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *GetHabitHistoryResponse) GetData() *GetHabitHistoryResponse_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *GetHabitHistoryResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *GetHabitHistoryResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type GetHabitHistoryResponse_Data struct {
	TrackHabits []*TrackHabit `protobuf:"bytes,1,rep,name=track_habits,json=trackHabits" json:"track_habits,omitempty"`
}

func (m *GetHabitHistoryResponse_Data) Reset()         { *m = GetHabitHistoryResponse_Data{} }
func (m *GetHabitHistoryResponse_Data) String() string { return proto.CompactTextString(m) }
func (*GetHabitHistoryResponse_Data) ProtoMessage()    {}
func (*GetHabitHistoryResponse_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{26, 0}
}

func (m *GetHabitHistoryResponse_Data) GetTrackHabits() []*TrackHabit {
	if m != nil {
		return m.TrackHabits
	}
	return nil
}

type CreateTrackMarkerRequest struct {
	Value         *google_protobuf1.Value            `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
	Unit          string                             `protobuf:"bytes,2,opt,name=unit" json:"unit,omitempty"`
	UserId        string                             `protobuf:"bytes,3,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	MarkerId      string                             `protobuf:"bytes,4,opt,name=marker_id,json=markerId" json:"marker_id,omitempty"`
	OrgId         string                             `protobuf:"bytes,5,opt,name=org_id,json=orgId" json:"org_id,omitempty"`
	TrackerMethod *go_micro_srv_static.TrackerMethod `protobuf:"bytes,6,opt,name=tracker_method,json=trackerMethod" json:"tracker_method,omitempty"`
}

func (m *CreateTrackMarkerRequest) Reset()                    { *m = CreateTrackMarkerRequest{} }
func (m *CreateTrackMarkerRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateTrackMarkerRequest) ProtoMessage()               {}
func (*CreateTrackMarkerRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *CreateTrackMarkerRequest) GetValue() *google_protobuf1.Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *CreateTrackMarkerRequest) GetUnit() string {
	if m != nil {
		return m.Unit
	}
	return ""
}

func (m *CreateTrackMarkerRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *CreateTrackMarkerRequest) GetMarkerId() string {
	if m != nil {
		return m.MarkerId
	}
	return ""
}

func (m *CreateTrackMarkerRequest) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *CreateTrackMarkerRequest) GetTrackerMethod() *go_micro_srv_static.TrackerMethod {
	if m != nil {
		return m.TrackerMethod
	}
	return nil
}

type CreateTrackMarkerResponse struct {
	Data    *CreateTrackMarkerResponse_Data `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	Code    int64                           `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Message string                          `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *CreateTrackMarkerResponse) Reset()                    { *m = CreateTrackMarkerResponse{} }
func (m *CreateTrackMarkerResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateTrackMarkerResponse) ProtoMessage()               {}
func (*CreateTrackMarkerResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func (m *CreateTrackMarkerResponse) GetData() *CreateTrackMarkerResponse_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *CreateTrackMarkerResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *CreateTrackMarkerResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type CreateTrackMarkerResponse_Data struct {
	TrackMarker *TrackMarker `protobuf:"bytes,1,opt,name=track_marker,json=trackMarker" json:"track_marker,omitempty"`
}

func (m *CreateTrackMarkerResponse_Data) Reset()         { *m = CreateTrackMarkerResponse_Data{} }
func (m *CreateTrackMarkerResponse_Data) String() string { return proto.CompactTextString(m) }
func (*CreateTrackMarkerResponse_Data) ProtoMessage()    {}
func (*CreateTrackMarkerResponse_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{28, 0}
}

func (m *CreateTrackMarkerResponse_Data) GetTrackMarker() *TrackMarker {
	if m != nil {
		return m.TrackMarker
	}
	return nil
}

type GetLastMarkerRequest struct {
	MarkerId string `protobuf:"bytes,1,opt,name=marker_id,json=markerId" json:"marker_id,omitempty"`
	UserId   string `protobuf:"bytes,2,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	OrgId    string `protobuf:"bytes,3,opt,name=org_id,json=orgId" json:"org_id,omitempty"`
}

func (m *GetLastMarkerRequest) Reset()                    { *m = GetLastMarkerRequest{} }
func (m *GetLastMarkerRequest) String() string            { return proto.CompactTextString(m) }
func (*GetLastMarkerRequest) ProtoMessage()               {}
func (*GetLastMarkerRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

func (m *GetLastMarkerRequest) GetMarkerId() string {
	if m != nil {
		return m.MarkerId
	}
	return ""
}

func (m *GetLastMarkerRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *GetLastMarkerRequest) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

type GetLastMarkerResponse struct {
	Data    *GetLastMarkerResponse_Data `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	Code    int64                       `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Message string                      `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *GetLastMarkerResponse) Reset()                    { *m = GetLastMarkerResponse{} }
func (m *GetLastMarkerResponse) String() string            { return proto.CompactTextString(m) }
func (*GetLastMarkerResponse) ProtoMessage()               {}
func (*GetLastMarkerResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30} }

func (m *GetLastMarkerResponse) GetData() *GetLastMarkerResponse_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *GetLastMarkerResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *GetLastMarkerResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type GetLastMarkerResponse_Data struct {
	Value *google_protobuf1.Value `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *GetLastMarkerResponse_Data) Reset()                    { *m = GetLastMarkerResponse_Data{} }
func (m *GetLastMarkerResponse_Data) String() string            { return proto.CompactTextString(m) }
func (*GetLastMarkerResponse_Data) ProtoMessage()               {}
func (*GetLastMarkerResponse_Data) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30, 0} }

func (m *GetLastMarkerResponse_Data) GetValue() *google_protobuf1.Value {
	if m != nil {
		return m.Value
	}
	return nil
}

type GetMarkerHistoryRequest struct {
	MarkerId      string `protobuf:"bytes,1,opt,name=marker_id,json=markerId" json:"marker_id,omitempty"`
	From          int64  `protobuf:"varint,2,opt,name=from" json:"from,omitempty"`
	To            int64  `protobuf:"varint,3,opt,name=to" json:"to,omitempty"`
	Offset        int64  `protobuf:"varint,4,opt,name=offset" json:"offset,omitempty"`
	Limit         int64  `protobuf:"varint,5,opt,name=limit" json:"limit,omitempty"`
	SortParameter string `protobuf:"bytes,6,opt,name=sort_parameter,json=sortParameter" json:"sort_parameter,omitempty"`
	SortDirection string `protobuf:"bytes,7,opt,name=sort_direction,json=sortDirection" json:"sort_direction,omitempty"`
}

func (m *GetMarkerHistoryRequest) Reset()                    { *m = GetMarkerHistoryRequest{} }
func (m *GetMarkerHistoryRequest) String() string            { return proto.CompactTextString(m) }
func (*GetMarkerHistoryRequest) ProtoMessage()               {}
func (*GetMarkerHistoryRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{31} }

func (m *GetMarkerHistoryRequest) GetMarkerId() string {
	if m != nil {
		return m.MarkerId
	}
	return ""
}

func (m *GetMarkerHistoryRequest) GetFrom() int64 {
	if m != nil {
		return m.From
	}
	return 0
}

func (m *GetMarkerHistoryRequest) GetTo() int64 {
	if m != nil {
		return m.To
	}
	return 0
}

func (m *GetMarkerHistoryRequest) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *GetMarkerHistoryRequest) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *GetMarkerHistoryRequest) GetSortParameter() string {
	if m != nil {
		return m.SortParameter
	}
	return ""
}

func (m *GetMarkerHistoryRequest) GetSortDirection() string {
	if m != nil {
		return m.SortDirection
	}
	return ""
}

type GetMarkerHistoryResponse struct {
	Data    *GetMarkerHistoryResponse_Data `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	Code    int64                          `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Message string                         `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *GetMarkerHistoryResponse) Reset()                    { *m = GetMarkerHistoryResponse{} }
func (m *GetMarkerHistoryResponse) String() string            { return proto.CompactTextString(m) }
func (*GetMarkerHistoryResponse) ProtoMessage()               {}
func (*GetMarkerHistoryResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{32} }

func (m *GetMarkerHistoryResponse) GetData() *GetMarkerHistoryResponse_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *GetMarkerHistoryResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *GetMarkerHistoryResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type GetMarkerHistoryResponse_Data struct {
	TrackMarkers []*TrackMarker `protobuf:"bytes,1,rep,name=track_markers,json=trackMarkers" json:"track_markers,omitempty"`
}

func (m *GetMarkerHistoryResponse_Data) Reset()         { *m = GetMarkerHistoryResponse_Data{} }
func (m *GetMarkerHistoryResponse_Data) String() string { return proto.CompactTextString(m) }
func (*GetMarkerHistoryResponse_Data) ProtoMessage()    {}
func (*GetMarkerHistoryResponse_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{32, 0}
}

func (m *GetMarkerHistoryResponse_Data) GetTrackMarkers() []*TrackMarker {
	if m != nil {
		return m.TrackMarkers
	}
	return nil
}

type GetAllMarkerHistoryRequest struct {
	From          int64  `protobuf:"varint,1,opt,name=from" json:"from,omitempty"`
	To            int64  `protobuf:"varint,2,opt,name=to" json:"to,omitempty"`
	Offset        int64  `protobuf:"varint,3,opt,name=offset" json:"offset,omitempty"`
	Limit         int64  `protobuf:"varint,4,opt,name=limit" json:"limit,omitempty"`
	SortParameter string `protobuf:"bytes,5,opt,name=sort_parameter,json=sortParameter" json:"sort_parameter,omitempty"`
	SortDirection string `protobuf:"bytes,6,opt,name=sort_direction,json=sortDirection" json:"sort_direction,omitempty"`
}

func (m *GetAllMarkerHistoryRequest) Reset()                    { *m = GetAllMarkerHistoryRequest{} }
func (m *GetAllMarkerHistoryRequest) String() string            { return proto.CompactTextString(m) }
func (*GetAllMarkerHistoryRequest) ProtoMessage()               {}
func (*GetAllMarkerHistoryRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{33} }

func (m *GetAllMarkerHistoryRequest) GetFrom() int64 {
	if m != nil {
		return m.From
	}
	return 0
}

func (m *GetAllMarkerHistoryRequest) GetTo() int64 {
	if m != nil {
		return m.To
	}
	return 0
}

func (m *GetAllMarkerHistoryRequest) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *GetAllMarkerHistoryRequest) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *GetAllMarkerHistoryRequest) GetSortParameter() string {
	if m != nil {
		return m.SortParameter
	}
	return ""
}

func (m *GetAllMarkerHistoryRequest) GetSortDirection() string {
	if m != nil {
		return m.SortDirection
	}
	return ""
}

type GetAllMarkerHistoryResponse struct {
	Data    *GetAllMarkerHistoryResponse_Data `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	Code    int64                             `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Message string                            `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *GetAllMarkerHistoryResponse) Reset()                    { *m = GetAllMarkerHistoryResponse{} }
func (m *GetAllMarkerHistoryResponse) String() string            { return proto.CompactTextString(m) }
func (*GetAllMarkerHistoryResponse) ProtoMessage()               {}
func (*GetAllMarkerHistoryResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{34} }

func (m *GetAllMarkerHistoryResponse) GetData() *GetAllMarkerHistoryResponse_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *GetAllMarkerHistoryResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *GetAllMarkerHistoryResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type GetAllMarkerHistoryResponse_Data struct {
	TrackMarkers []*TrackMarker `protobuf:"bytes,1,rep,name=track_markers,json=trackMarkers" json:"track_markers,omitempty"`
}

func (m *GetAllMarkerHistoryResponse_Data) Reset()         { *m = GetAllMarkerHistoryResponse_Data{} }
func (m *GetAllMarkerHistoryResponse_Data) String() string { return proto.CompactTextString(m) }
func (*GetAllMarkerHistoryResponse_Data) ProtoMessage()    {}
func (*GetAllMarkerHistoryResponse_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{34, 0}
}

func (m *GetAllMarkerHistoryResponse_Data) GetTrackMarkers() []*TrackMarker {
	if m != nil {
		return m.TrackMarkers
	}
	return nil
}

type GetDefaultMarkerHistoryRequest struct {
	UserId        string `protobuf:"bytes,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	Offset        int64  `protobuf:"varint,2,opt,name=offset" json:"offset,omitempty"`
	Limit         int64  `protobuf:"varint,3,opt,name=limit" json:"limit,omitempty"`
	From          int64  `protobuf:"varint,4,opt,name=from" json:"from,omitempty"`
	To            int64  `protobuf:"varint,5,opt,name=to" json:"to,omitempty"`
	SortParameter string `protobuf:"bytes,6,opt,name=sort_parameter,json=sortParameter" json:"sort_parameter,omitempty"`
	SortDirection string `protobuf:"bytes,7,opt,name=sort_direction,json=sortDirection" json:"sort_direction,omitempty"`
}

func (m *GetDefaultMarkerHistoryRequest) Reset()                    { *m = GetDefaultMarkerHistoryRequest{} }
func (m *GetDefaultMarkerHistoryRequest) String() string            { return proto.CompactTextString(m) }
func (*GetDefaultMarkerHistoryRequest) ProtoMessage()               {}
func (*GetDefaultMarkerHistoryRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{35} }

func (m *GetDefaultMarkerHistoryRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *GetDefaultMarkerHistoryRequest) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *GetDefaultMarkerHistoryRequest) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *GetDefaultMarkerHistoryRequest) GetFrom() int64 {
	if m != nil {
		return m.From
	}
	return 0
}

func (m *GetDefaultMarkerHistoryRequest) GetTo() int64 {
	if m != nil {
		return m.To
	}
	return 0
}

func (m *GetDefaultMarkerHistoryRequest) GetSortParameter() string {
	if m != nil {
		return m.SortParameter
	}
	return ""
}

func (m *GetDefaultMarkerHistoryRequest) GetSortDirection() string {
	if m != nil {
		return m.SortDirection
	}
	return ""
}

type GetDefaultMarkerHistoryResponse struct {
	Data    *GetDefaultMarkerHistoryResponse_Data `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	Code    int64                                 `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Message string                                `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *GetDefaultMarkerHistoryResponse) Reset()         { *m = GetDefaultMarkerHistoryResponse{} }
func (m *GetDefaultMarkerHistoryResponse) String() string { return proto.CompactTextString(m) }
func (*GetDefaultMarkerHistoryResponse) ProtoMessage()    {}
func (*GetDefaultMarkerHistoryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{36}
}

func (m *GetDefaultMarkerHistoryResponse) GetData() *GetDefaultMarkerHistoryResponse_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *GetDefaultMarkerHistoryResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *GetDefaultMarkerHistoryResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type GetDefaultMarkerHistoryResponse_Data struct {
	TrackMarkers []*TrackMarker `protobuf:"bytes,1,rep,name=track_markers,json=trackMarkers" json:"track_markers,omitempty"`
}

func (m *GetDefaultMarkerHistoryResponse_Data) Reset()         { *m = GetDefaultMarkerHistoryResponse_Data{} }
func (m *GetDefaultMarkerHistoryResponse_Data) String() string { return proto.CompactTextString(m) }
func (*GetDefaultMarkerHistoryResponse_Data) ProtoMessage()    {}
func (*GetDefaultMarkerHistoryResponse_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{36, 0}
}

func (m *GetDefaultMarkerHistoryResponse_Data) GetTrackMarkers() []*TrackMarker {
	if m != nil {
		return m.TrackMarkers
	}
	return nil
}

type TrackGoal struct {
	User    *go_micro_srv_user.User      `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
	OrgId   string                       `protobuf:"bytes,2,opt,name=org_id,json=orgId" json:"org_id,omitempty"`
	Goal    *go_micro_srv_behaviour.Goal `protobuf:"bytes,3,opt,name=goal" json:"goal,omitempty"`
	Created int64                        `protobuf:"varint,4,opt,name=created" json:"created,omitempty"`
}

func (m *TrackGoal) Reset()                    { *m = TrackGoal{} }
func (m *TrackGoal) String() string            { return proto.CompactTextString(m) }
func (*TrackGoal) ProtoMessage()               {}
func (*TrackGoal) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{37} }

func (m *TrackGoal) GetUser() *go_micro_srv_user.User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *TrackGoal) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *TrackGoal) GetGoal() *go_micro_srv_behaviour.Goal {
	if m != nil {
		return m.Goal
	}
	return nil
}

func (m *TrackGoal) GetCreated() int64 {
	if m != nil {
		return m.Created
	}
	return 0
}

type TrackChallenge struct {
	User      *go_micro_srv_user.User           `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
	OrgId     string                            `protobuf:"bytes,2,opt,name=org_id,json=orgId" json:"org_id,omitempty"`
	Challenge *go_micro_srv_behaviour.Challenge `protobuf:"bytes,3,opt,name=challenge" json:"challenge,omitempty"`
	Created   int64                             `protobuf:"varint,4,opt,name=created" json:"created,omitempty"`
}

func (m *TrackChallenge) Reset()                    { *m = TrackChallenge{} }
func (m *TrackChallenge) String() string            { return proto.CompactTextString(m) }
func (*TrackChallenge) ProtoMessage()               {}
func (*TrackChallenge) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{38} }

func (m *TrackChallenge) GetUser() *go_micro_srv_user.User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *TrackChallenge) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *TrackChallenge) GetChallenge() *go_micro_srv_behaviour.Challenge {
	if m != nil {
		return m.Challenge
	}
	return nil
}

func (m *TrackChallenge) GetCreated() int64 {
	if m != nil {
		return m.Created
	}
	return 0
}

type TrackHabit struct {
	User    *go_micro_srv_user.User       `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
	OrgId   string                        `protobuf:"bytes,2,opt,name=org_id,json=orgId" json:"org_id,omitempty"`
	Habit   *go_micro_srv_behaviour.Habit `protobuf:"bytes,3,opt,name=habit" json:"habit,omitempty"`
	Created int64                         `protobuf:"varint,4,opt,name=created" json:"created,omitempty"`
}

func (m *TrackHabit) Reset()                    { *m = TrackHabit{} }
func (m *TrackHabit) String() string            { return proto.CompactTextString(m) }
func (*TrackHabit) ProtoMessage()               {}
func (*TrackHabit) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{39} }

func (m *TrackHabit) GetUser() *go_micro_srv_user.User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *TrackHabit) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *TrackHabit) GetHabit() *go_micro_srv_behaviour.Habit {
	if m != nil {
		return m.Habit
	}
	return nil
}

func (m *TrackHabit) GetCreated() int64 {
	if m != nil {
		return m.Created
	}
	return 0
}

type TrackContent struct {
	User    *go_micro_srv_user.User       `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
	OrgId   string                        `protobuf:"bytes,2,opt,name=org_id,json=orgId" json:"org_id,omitempty"`
	Content *go_micro_srv_content.Content `protobuf:"bytes,3,opt,name=content" json:"content,omitempty"`
	Created int64                         `protobuf:"varint,4,opt,name=created" json:"created,omitempty"`
}

func (m *TrackContent) Reset()                    { *m = TrackContent{} }
func (m *TrackContent) String() string            { return proto.CompactTextString(m) }
func (*TrackContent) ProtoMessage()               {}
func (*TrackContent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{40} }

func (m *TrackContent) GetUser() *go_micro_srv_user.User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *TrackContent) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *TrackContent) GetContent() *go_micro_srv_content.Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *TrackContent) GetCreated() int64 {
	if m != nil {
		return m.Created
	}
	return 0
}

type TrackMarker struct {
	Id      string                      `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	User    *go_micro_srv_user.User     `protobuf:"bytes,2,opt,name=user" json:"user,omitempty"`
	OrgId   string                      `protobuf:"bytes,3,opt,name=org_id,json=orgId" json:"org_id,omitempty"`
	Marker  *go_micro_srv_static.Marker `protobuf:"bytes,4,opt,name=marker" json:"marker,omitempty"`
	Created int64                       `protobuf:"varint,5,opt,name=created" json:"created,omitempty"`
	Value   *google_protobuf1.Value     `protobuf:"bytes,6,opt,name=value" json:"value,omitempty"`
	Unit    string                      `protobuf:"bytes,7,opt,name=unit" json:"unit,omitempty"`
}

func (m *TrackMarker) Reset()                    { *m = TrackMarker{} }
func (m *TrackMarker) String() string            { return proto.CompactTextString(m) }
func (*TrackMarker) ProtoMessage()               {}
func (*TrackMarker) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{41} }

func (m *TrackMarker) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *TrackMarker) GetUser() *go_micro_srv_user.User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *TrackMarker) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *TrackMarker) GetMarker() *go_micro_srv_static.Marker {
	if m != nil {
		return m.Marker
	}
	return nil
}

func (m *TrackMarker) GetCreated() int64 {
	if m != nil {
		return m.Created
	}
	return 0
}

func (m *TrackMarker) GetValue() *google_protobuf1.Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *TrackMarker) GetUnit() string {
	if m != nil {
		return m.Unit
	}
	return ""
}

func init() {
	proto.RegisterType((*SubscribeMarker)(nil), "go.micro.srv.track.SubscribeMarker")
	proto.RegisterType((*SubscribeMarkerRequest)(nil), "go.micro.srv.track.SubscribeMarkerRequest")
	proto.RegisterType((*SubscribeMarkerResponse)(nil), "go.micro.srv.track.SubscribeMarkerResponse")
	proto.RegisterType((*CreateTrackGoalRequest)(nil), "go.micro.srv.track.CreateTrackGoalRequest")
	proto.RegisterType((*CreateTrackGoalResponse)(nil), "go.micro.srv.track.CreateTrackGoalResponse")
	proto.RegisterType((*CreateTrackGoalResponse_Data)(nil), "go.micro.srv.track.CreateTrackGoalResponse.Data")
	proto.RegisterType((*GetGoalCountRequest)(nil), "go.micro.srv.track.GetGoalCountRequest")
	proto.RegisterType((*GetGoalCountResponse)(nil), "go.micro.srv.track.GetGoalCountResponse")
	proto.RegisterType((*GetGoalCountResponse_Data)(nil), "go.micro.srv.track.GetGoalCountResponse.Data")
	proto.RegisterType((*GetGoalHistoryRequest)(nil), "go.micro.srv.track.GetGoalHistoryRequest")
	proto.RegisterType((*GetGoalHistoryResponse)(nil), "go.micro.srv.track.GetGoalHistoryResponse")
	proto.RegisterType((*GetGoalHistoryResponse_Data)(nil), "go.micro.srv.track.GetGoalHistoryResponse.Data")
	proto.RegisterType((*CreateTrackContentRequest)(nil), "go.micro.srv.track.CreateTrackContentRequest")
	proto.RegisterType((*CreateTrackContentResponse)(nil), "go.micro.srv.track.CreateTrackContentResponse")
	proto.RegisterType((*CreateTrackContentResponse_Data)(nil), "go.micro.srv.track.CreateTrackContentResponse.Data")
	proto.RegisterType((*GetContentCountRequest)(nil), "go.micro.srv.track.GetContentCountRequest")
	proto.RegisterType((*GetContentCountResponse)(nil), "go.micro.srv.track.GetContentCountResponse")
	proto.RegisterType((*GetContentCountResponse_Data)(nil), "go.micro.srv.track.GetContentCountResponse.Data")
	proto.RegisterType((*GetContentHistoryRequest)(nil), "go.micro.srv.track.GetContentHistoryRequest")
	proto.RegisterType((*GetContentHistoryResponse)(nil), "go.micro.srv.track.GetContentHistoryResponse")
	proto.RegisterType((*GetContentHistoryResponse_Data)(nil), "go.micro.srv.track.GetContentHistoryResponse.Data")
	proto.RegisterType((*CreateTrackChallengeRequest)(nil), "go.micro.srv.track.CreateTrackChallengeRequest")
	proto.RegisterType((*CreateTrackChallengeResponse)(nil), "go.micro.srv.track.CreateTrackChallengeResponse")
	proto.RegisterType((*CreateTrackChallengeResponse_Data)(nil), "go.micro.srv.track.CreateTrackChallengeResponse.Data")
	proto.RegisterType((*GetChallengeCountRequest)(nil), "go.micro.srv.track.GetChallengeCountRequest")
	proto.RegisterType((*GetChallengeCountResponse)(nil), "go.micro.srv.track.GetChallengeCountResponse")
	proto.RegisterType((*GetChallengeCountResponse_Data)(nil), "go.micro.srv.track.GetChallengeCountResponse.Data")
	proto.RegisterType((*GetChallengeHistoryRequest)(nil), "go.micro.srv.track.GetChallengeHistoryRequest")
	proto.RegisterType((*GetChallengeHistoryResponse)(nil), "go.micro.srv.track.GetChallengeHistoryResponse")
	proto.RegisterType((*GetChallengeHistoryResponse_Data)(nil), "go.micro.srv.track.GetChallengeHistoryResponse.Data")
	proto.RegisterType((*CreateTrackHabitRequest)(nil), "go.micro.srv.track.CreateTrackHabitRequest")
	proto.RegisterType((*CreateTrackHabitResponse)(nil), "go.micro.srv.track.CreateTrackHabitResponse")
	proto.RegisterType((*CreateTrackHabitResponse_Data)(nil), "go.micro.srv.track.CreateTrackHabitResponse.Data")
	proto.RegisterType((*GetHabitCountRequest)(nil), "go.micro.srv.track.GetHabitCountRequest")
	proto.RegisterType((*GetHabitCountResponse)(nil), "go.micro.srv.track.GetHabitCountResponse")
	proto.RegisterType((*GetHabitCountResponse_Data)(nil), "go.micro.srv.track.GetHabitCountResponse.Data")
	proto.RegisterType((*GetHabitHistoryRequest)(nil), "go.micro.srv.track.GetHabitHistoryRequest")
	proto.RegisterType((*GetHabitHistoryResponse)(nil), "go.micro.srv.track.GetHabitHistoryResponse")
	proto.RegisterType((*GetHabitHistoryResponse_Data)(nil), "go.micro.srv.track.GetHabitHistoryResponse.Data")
	proto.RegisterType((*CreateTrackMarkerRequest)(nil), "go.micro.srv.track.CreateTrackMarkerRequest")
	proto.RegisterType((*CreateTrackMarkerResponse)(nil), "go.micro.srv.track.CreateTrackMarkerResponse")
	proto.RegisterType((*CreateTrackMarkerResponse_Data)(nil), "go.micro.srv.track.CreateTrackMarkerResponse.Data")
	proto.RegisterType((*GetLastMarkerRequest)(nil), "go.micro.srv.track.GetLastMarkerRequest")
	proto.RegisterType((*GetLastMarkerResponse)(nil), "go.micro.srv.track.GetLastMarkerResponse")
	proto.RegisterType((*GetLastMarkerResponse_Data)(nil), "go.micro.srv.track.GetLastMarkerResponse.Data")
	proto.RegisterType((*GetMarkerHistoryRequest)(nil), "go.micro.srv.track.GetMarkerHistoryRequest")
	proto.RegisterType((*GetMarkerHistoryResponse)(nil), "go.micro.srv.track.GetMarkerHistoryResponse")
	proto.RegisterType((*GetMarkerHistoryResponse_Data)(nil), "go.micro.srv.track.GetMarkerHistoryResponse.Data")
	proto.RegisterType((*GetAllMarkerHistoryRequest)(nil), "go.micro.srv.track.GetAllMarkerHistoryRequest")
	proto.RegisterType((*GetAllMarkerHistoryResponse)(nil), "go.micro.srv.track.GetAllMarkerHistoryResponse")
	proto.RegisterType((*GetAllMarkerHistoryResponse_Data)(nil), "go.micro.srv.track.GetAllMarkerHistoryResponse.Data")
	proto.RegisterType((*GetDefaultMarkerHistoryRequest)(nil), "go.micro.srv.track.GetDefaultMarkerHistoryRequest")
	proto.RegisterType((*GetDefaultMarkerHistoryResponse)(nil), "go.micro.srv.track.GetDefaultMarkerHistoryResponse")
	proto.RegisterType((*GetDefaultMarkerHistoryResponse_Data)(nil), "go.micro.srv.track.GetDefaultMarkerHistoryResponse.Data")
	proto.RegisterType((*TrackGoal)(nil), "go.micro.srv.track.TrackGoal")
	proto.RegisterType((*TrackChallenge)(nil), "go.micro.srv.track.TrackChallenge")
	proto.RegisterType((*TrackHabit)(nil), "go.micro.srv.track.TrackHabit")
	proto.RegisterType((*TrackContent)(nil), "go.micro.srv.track.TrackContent")
	proto.RegisterType((*TrackMarker)(nil), "go.micro.srv.track.TrackMarker")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for TrackService service

type TrackServiceClient interface {
	CreateTrackGoal(ctx context.Context, in *CreateTrackGoalRequest, opts ...client.CallOption) (*CreateTrackGoalResponse, error)
	GetGoalCount(ctx context.Context, in *GetGoalCountRequest, opts ...client.CallOption) (*GetGoalCountResponse, error)
	GetGoalHistory(ctx context.Context, in *GetGoalHistoryRequest, opts ...client.CallOption) (*GetGoalHistoryResponse, error)
	CreateTrackChallenge(ctx context.Context, in *CreateTrackChallengeRequest, opts ...client.CallOption) (*CreateTrackChallengeResponse, error)
	GetChallengeCount(ctx context.Context, in *GetChallengeCountRequest, opts ...client.CallOption) (*GetChallengeCountResponse, error)
	GetChallengeHistory(ctx context.Context, in *GetChallengeHistoryRequest, opts ...client.CallOption) (*GetChallengeHistoryResponse, error)
	CreateTrackHabit(ctx context.Context, in *CreateTrackHabitRequest, opts ...client.CallOption) (*CreateTrackHabitResponse, error)
	GetHabitCount(ctx context.Context, in *GetHabitCountRequest, opts ...client.CallOption) (*GetHabitCountResponse, error)
	GetHabitHistory(ctx context.Context, in *GetHabitHistoryRequest, opts ...client.CallOption) (*GetHabitHistoryResponse, error)
	CreateTrackContent(ctx context.Context, in *CreateTrackContentRequest, opts ...client.CallOption) (*CreateTrackContentResponse, error)
	GetContentCount(ctx context.Context, in *GetContentCountRequest, opts ...client.CallOption) (*GetContentCountResponse, error)
	GetContentHistory(ctx context.Context, in *GetContentHistoryRequest, opts ...client.CallOption) (*GetContentHistoryResponse, error)
	CreateTrackMarker(ctx context.Context, in *CreateTrackMarkerRequest, opts ...client.CallOption) (*CreateTrackMarkerResponse, error)
	GetLastMarker(ctx context.Context, in *GetLastMarkerRequest, opts ...client.CallOption) (*GetLastMarkerResponse, error)
	GetMarkerHistory(ctx context.Context, in *GetMarkerHistoryRequest, opts ...client.CallOption) (*GetMarkerHistoryResponse, error)
	GetAllMarkerHistory(ctx context.Context, in *GetAllMarkerHistoryRequest, opts ...client.CallOption) (*GetAllMarkerHistoryResponse, error)
	SubscribeMarker(ctx context.Context, in *SubscribeMarkerRequest, opts ...client.CallOption) (*SubscribeMarkerResponse, error)
	GetDefaultMarkerHistory(ctx context.Context, in *GetDefaultMarkerHistoryRequest, opts ...client.CallOption) (*GetDefaultMarkerHistoryResponse, error)
}

type trackServiceClient struct {
	c           client.Client
	serviceName string
}

func NewTrackServiceClient(serviceName string, c client.Client) TrackServiceClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "go.micro.srv.track"
	}
	return &trackServiceClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *trackServiceClient) CreateTrackGoal(ctx context.Context, in *CreateTrackGoalRequest, opts ...client.CallOption) (*CreateTrackGoalResponse, error) {
	req := c.c.NewRequest(c.serviceName, "TrackService.CreateTrackGoal", in)
	out := new(CreateTrackGoalResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trackServiceClient) GetGoalCount(ctx context.Context, in *GetGoalCountRequest, opts ...client.CallOption) (*GetGoalCountResponse, error) {
	req := c.c.NewRequest(c.serviceName, "TrackService.GetGoalCount", in)
	out := new(GetGoalCountResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trackServiceClient) GetGoalHistory(ctx context.Context, in *GetGoalHistoryRequest, opts ...client.CallOption) (*GetGoalHistoryResponse, error) {
	req := c.c.NewRequest(c.serviceName, "TrackService.GetGoalHistory", in)
	out := new(GetGoalHistoryResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trackServiceClient) CreateTrackChallenge(ctx context.Context, in *CreateTrackChallengeRequest, opts ...client.CallOption) (*CreateTrackChallengeResponse, error) {
	req := c.c.NewRequest(c.serviceName, "TrackService.CreateTrackChallenge", in)
	out := new(CreateTrackChallengeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trackServiceClient) GetChallengeCount(ctx context.Context, in *GetChallengeCountRequest, opts ...client.CallOption) (*GetChallengeCountResponse, error) {
	req := c.c.NewRequest(c.serviceName, "TrackService.GetChallengeCount", in)
	out := new(GetChallengeCountResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trackServiceClient) GetChallengeHistory(ctx context.Context, in *GetChallengeHistoryRequest, opts ...client.CallOption) (*GetChallengeHistoryResponse, error) {
	req := c.c.NewRequest(c.serviceName, "TrackService.GetChallengeHistory", in)
	out := new(GetChallengeHistoryResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trackServiceClient) CreateTrackHabit(ctx context.Context, in *CreateTrackHabitRequest, opts ...client.CallOption) (*CreateTrackHabitResponse, error) {
	req := c.c.NewRequest(c.serviceName, "TrackService.CreateTrackHabit", in)
	out := new(CreateTrackHabitResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trackServiceClient) GetHabitCount(ctx context.Context, in *GetHabitCountRequest, opts ...client.CallOption) (*GetHabitCountResponse, error) {
	req := c.c.NewRequest(c.serviceName, "TrackService.GetHabitCount", in)
	out := new(GetHabitCountResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trackServiceClient) GetHabitHistory(ctx context.Context, in *GetHabitHistoryRequest, opts ...client.CallOption) (*GetHabitHistoryResponse, error) {
	req := c.c.NewRequest(c.serviceName, "TrackService.GetHabitHistory", in)
	out := new(GetHabitHistoryResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trackServiceClient) CreateTrackContent(ctx context.Context, in *CreateTrackContentRequest, opts ...client.CallOption) (*CreateTrackContentResponse, error) {
	req := c.c.NewRequest(c.serviceName, "TrackService.CreateTrackContent", in)
	out := new(CreateTrackContentResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trackServiceClient) GetContentCount(ctx context.Context, in *GetContentCountRequest, opts ...client.CallOption) (*GetContentCountResponse, error) {
	req := c.c.NewRequest(c.serviceName, "TrackService.GetContentCount", in)
	out := new(GetContentCountResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trackServiceClient) GetContentHistory(ctx context.Context, in *GetContentHistoryRequest, opts ...client.CallOption) (*GetContentHistoryResponse, error) {
	req := c.c.NewRequest(c.serviceName, "TrackService.GetContentHistory", in)
	out := new(GetContentHistoryResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trackServiceClient) CreateTrackMarker(ctx context.Context, in *CreateTrackMarkerRequest, opts ...client.CallOption) (*CreateTrackMarkerResponse, error) {
	req := c.c.NewRequest(c.serviceName, "TrackService.CreateTrackMarker", in)
	out := new(CreateTrackMarkerResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trackServiceClient) GetLastMarker(ctx context.Context, in *GetLastMarkerRequest, opts ...client.CallOption) (*GetLastMarkerResponse, error) {
	req := c.c.NewRequest(c.serviceName, "TrackService.GetLastMarker", in)
	out := new(GetLastMarkerResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trackServiceClient) GetMarkerHistory(ctx context.Context, in *GetMarkerHistoryRequest, opts ...client.CallOption) (*GetMarkerHistoryResponse, error) {
	req := c.c.NewRequest(c.serviceName, "TrackService.GetMarkerHistory", in)
	out := new(GetMarkerHistoryResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trackServiceClient) GetAllMarkerHistory(ctx context.Context, in *GetAllMarkerHistoryRequest, opts ...client.CallOption) (*GetAllMarkerHistoryResponse, error) {
	req := c.c.NewRequest(c.serviceName, "TrackService.GetAllMarkerHistory", in)
	out := new(GetAllMarkerHistoryResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trackServiceClient) SubscribeMarker(ctx context.Context, in *SubscribeMarkerRequest, opts ...client.CallOption) (*SubscribeMarkerResponse, error) {
	req := c.c.NewRequest(c.serviceName, "TrackService.SubscribeMarker", in)
	out := new(SubscribeMarkerResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trackServiceClient) GetDefaultMarkerHistory(ctx context.Context, in *GetDefaultMarkerHistoryRequest, opts ...client.CallOption) (*GetDefaultMarkerHistoryResponse, error) {
	req := c.c.NewRequest(c.serviceName, "TrackService.GetDefaultMarkerHistory", in)
	out := new(GetDefaultMarkerHistoryResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TrackService service

type TrackServiceHandler interface {
	CreateTrackGoal(context.Context, *CreateTrackGoalRequest, *CreateTrackGoalResponse) error
	GetGoalCount(context.Context, *GetGoalCountRequest, *GetGoalCountResponse) error
	GetGoalHistory(context.Context, *GetGoalHistoryRequest, *GetGoalHistoryResponse) error
	CreateTrackChallenge(context.Context, *CreateTrackChallengeRequest, *CreateTrackChallengeResponse) error
	GetChallengeCount(context.Context, *GetChallengeCountRequest, *GetChallengeCountResponse) error
	GetChallengeHistory(context.Context, *GetChallengeHistoryRequest, *GetChallengeHistoryResponse) error
	CreateTrackHabit(context.Context, *CreateTrackHabitRequest, *CreateTrackHabitResponse) error
	GetHabitCount(context.Context, *GetHabitCountRequest, *GetHabitCountResponse) error
	GetHabitHistory(context.Context, *GetHabitHistoryRequest, *GetHabitHistoryResponse) error
	CreateTrackContent(context.Context, *CreateTrackContentRequest, *CreateTrackContentResponse) error
	GetContentCount(context.Context, *GetContentCountRequest, *GetContentCountResponse) error
	GetContentHistory(context.Context, *GetContentHistoryRequest, *GetContentHistoryResponse) error
	CreateTrackMarker(context.Context, *CreateTrackMarkerRequest, *CreateTrackMarkerResponse) error
	GetLastMarker(context.Context, *GetLastMarkerRequest, *GetLastMarkerResponse) error
	GetMarkerHistory(context.Context, *GetMarkerHistoryRequest, *GetMarkerHistoryResponse) error
	GetAllMarkerHistory(context.Context, *GetAllMarkerHistoryRequest, *GetAllMarkerHistoryResponse) error
	SubscribeMarker(context.Context, *SubscribeMarkerRequest, *SubscribeMarkerResponse) error
	GetDefaultMarkerHistory(context.Context, *GetDefaultMarkerHistoryRequest, *GetDefaultMarkerHistoryResponse) error
}

func RegisterTrackServiceHandler(s server.Server, hdlr TrackServiceHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&TrackService{hdlr}, opts...))
}

type TrackService struct {
	TrackServiceHandler
}

func (h *TrackService) CreateTrackGoal(ctx context.Context, in *CreateTrackGoalRequest, out *CreateTrackGoalResponse) error {
	return h.TrackServiceHandler.CreateTrackGoal(ctx, in, out)
}

func (h *TrackService) GetGoalCount(ctx context.Context, in *GetGoalCountRequest, out *GetGoalCountResponse) error {
	return h.TrackServiceHandler.GetGoalCount(ctx, in, out)
}

func (h *TrackService) GetGoalHistory(ctx context.Context, in *GetGoalHistoryRequest, out *GetGoalHistoryResponse) error {
	return h.TrackServiceHandler.GetGoalHistory(ctx, in, out)
}

func (h *TrackService) CreateTrackChallenge(ctx context.Context, in *CreateTrackChallengeRequest, out *CreateTrackChallengeResponse) error {
	return h.TrackServiceHandler.CreateTrackChallenge(ctx, in, out)
}

func (h *TrackService) GetChallengeCount(ctx context.Context, in *GetChallengeCountRequest, out *GetChallengeCountResponse) error {
	return h.TrackServiceHandler.GetChallengeCount(ctx, in, out)
}

func (h *TrackService) GetChallengeHistory(ctx context.Context, in *GetChallengeHistoryRequest, out *GetChallengeHistoryResponse) error {
	return h.TrackServiceHandler.GetChallengeHistory(ctx, in, out)
}

func (h *TrackService) CreateTrackHabit(ctx context.Context, in *CreateTrackHabitRequest, out *CreateTrackHabitResponse) error {
	return h.TrackServiceHandler.CreateTrackHabit(ctx, in, out)
}

func (h *TrackService) GetHabitCount(ctx context.Context, in *GetHabitCountRequest, out *GetHabitCountResponse) error {
	return h.TrackServiceHandler.GetHabitCount(ctx, in, out)
}

func (h *TrackService) GetHabitHistory(ctx context.Context, in *GetHabitHistoryRequest, out *GetHabitHistoryResponse) error {
	return h.TrackServiceHandler.GetHabitHistory(ctx, in, out)
}

func (h *TrackService) CreateTrackContent(ctx context.Context, in *CreateTrackContentRequest, out *CreateTrackContentResponse) error {
	return h.TrackServiceHandler.CreateTrackContent(ctx, in, out)
}

func (h *TrackService) GetContentCount(ctx context.Context, in *GetContentCountRequest, out *GetContentCountResponse) error {
	return h.TrackServiceHandler.GetContentCount(ctx, in, out)
}

func (h *TrackService) GetContentHistory(ctx context.Context, in *GetContentHistoryRequest, out *GetContentHistoryResponse) error {
	return h.TrackServiceHandler.GetContentHistory(ctx, in, out)
}

func (h *TrackService) CreateTrackMarker(ctx context.Context, in *CreateTrackMarkerRequest, out *CreateTrackMarkerResponse) error {
	return h.TrackServiceHandler.CreateTrackMarker(ctx, in, out)
}

func (h *TrackService) GetLastMarker(ctx context.Context, in *GetLastMarkerRequest, out *GetLastMarkerResponse) error {
	return h.TrackServiceHandler.GetLastMarker(ctx, in, out)
}

func (h *TrackService) GetMarkerHistory(ctx context.Context, in *GetMarkerHistoryRequest, out *GetMarkerHistoryResponse) error {
	return h.TrackServiceHandler.GetMarkerHistory(ctx, in, out)
}

func (h *TrackService) GetAllMarkerHistory(ctx context.Context, in *GetAllMarkerHistoryRequest, out *GetAllMarkerHistoryResponse) error {
	return h.TrackServiceHandler.GetAllMarkerHistory(ctx, in, out)
}

func (h *TrackService) SubscribeMarker(ctx context.Context, in *SubscribeMarkerRequest, out *SubscribeMarkerResponse) error {
	return h.TrackServiceHandler.SubscribeMarker(ctx, in, out)
}

func (h *TrackService) GetDefaultMarkerHistory(ctx context.Context, in *GetDefaultMarkerHistoryRequest, out *GetDefaultMarkerHistoryResponse) error {
	return h.TrackServiceHandler.GetDefaultMarkerHistory(ctx, in, out)
}

func init() { proto.RegisterFile("server/track-srv/proto/track/track.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 2001 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x5a, 0xcd, 0x6f, 0xdc, 0xc6,
	0x15, 0xdf, 0xe1, 0x7e, 0x69, 0x9f, 0xbe, 0xdc, 0xa9, 0x2c, 0xad, 0x24, 0x7f, 0x12, 0x30, 0x2a,
	0xeb, 0x83, 0xeb, 0x4a, 0x36, 0xda, 0x43, 0x51, 0x43, 0x96, 0x6c, 0x59, 0xad, 0x8d, 0xb6, 0x6b,
	0xbb, 0x87, 0x02, 0x85, 0x40, 0x71, 0x47, 0x2b, 0xc2, 0xbb, 0x4b, 0x95, 0xe4, 0x0a, 0x15, 0x7a,
	0x29, 0xda, 0x5c, 0x72, 0x49, 0x10, 0xe4, 0xe0, 0x43, 0x10, 0xe4, 0x64, 0xe4, 0x90, 0x83, 0xff,
	0x81, 0x00, 0xf9, 0x07, 0x72, 0x4a, 0x80, 0xc0, 0x39, 0xf8, 0x92, 0x9c, 0x82, 0x04, 0x39, 0x04,
	0x39, 0xe4, 0x18, 0x70, 0x66, 0xb8, 0xe4, 0x90, 0x9c, 0x5d, 0x2e, 0xb3, 0x86, 0xe5, 0x8b, 0x96,
	0x33, 0x7a, 0x8f, 0xf3, 0xe6, 0xfd, 0xe6, 0xfd, 0xf6, 0xcd, 0x7b, 0x0b, 0x4b, 0x0e, 0xb1, 0x8f,
	0x89, 0x5d, 0x73, 0x6d, 0xdd, 0x78, 0xbc, 0xe6, 0xd8, 0xc7, 0xb5, 0x23, 0xdb, 0x72, 0x2d, 0x36,
	0x66, 0x7f, 0x35, 0x3a, 0x83, 0x71, 0xd3, 0xd2, 0xda, 0xa6, 0x61, 0x5b, 0x9a, 0x63, 0x1f, 0x6b,
	0xf4, 0x3f, 0x0b, 0xf3, 0x4d, 0xcb, 0x6a, 0xb6, 0x08, 0xd3, 0xd9, 0xef, 0x1e, 0xd4, 0xf4, 0xce,
	0x09, 0x13, 0x5f, 0xb8, 0xd1, 0x34, 0xdd, 0xc3, 0xee, 0xbe, 0x66, 0x58, 0xed, 0x5a, 0xd3, 0x6a,
	0xe9, 0x9d, 0x66, 0x20, 0x75, 0xe4, 0x9e, 0x1c, 0x11, 0xa7, 0xe6, 0xb8, 0x76, 0xd7, 0x70, 0xf9,
	0x07, 0x57, 0xbb, 0xc2, 0xed, 0xe9, 0x3a, 0xc4, 0x0e, 0x99, 0xe3, 0x0d, 0xe9, 0x1f, 0x2e, 0x76,
	0x9d, 0x8b, 0xed, 0x93, 0x43, 0xfd, 0xd8, 0xb4, 0xba, 0x61, 0xd9, 0xde, 0x5c, 0xf0, 0xc4, 0xb5,
	0x34, 0xae, 0x65, 0x58, 0x1d, 0x97, 0x74, 0xdc, 0x90, 0x0e, 0x9f, 0xf1, 0x3f, 0xb9, 0xfc, 0x0a,
	0x97, 0x77, 0x5c, 0xdd, 0x35, 0x8d, 0x90, 0x38, 0x9b, 0xe0, 0x1f, 0x4c, 0x58, 0xfd, 0x1b, 0x4c,
	0x3f, 0xe8, 0xee, 0x3b, 0x86, 0x6d, 0xee, 0x93, 0xfb, 0xba, 0xfd, 0x98, 0xd8, 0x78, 0x19, 0x8a,
	0xc7, 0x7a, 0xab, 0x4b, 0xaa, 0xe8, 0x12, 0x5a, 0x1a, 0x5f, 0x9f, 0xd1, 0x98, 0xbb, 0x34, 0xdf,
	0x11, 0xda, 0x66, 0xe7, 0xa4, 0xce, 0x44, 0x30, 0x86, 0x42, 0xb7, 0x63, 0xba, 0x55, 0xe5, 0x12,
	0x5a, 0xaa, 0xd4, 0xe9, 0xb3, 0xba, 0x0e, 0xb3, 0x91, 0x57, 0xd6, 0xc9, 0xbf, 0xba, 0xc4, 0x71,
	0x71, 0x15, 0xca, 0xc6, 0xa1, 0xde, 0xe9, 0x90, 0x16, 0x7d, 0x77, 0xa5, 0xee, 0x0f, 0xd5, 0x0d,
	0x98, 0x8b, 0xe9, 0x38, 0x47, 0x56, 0xc7, 0x21, 0x9e, 0x92, 0xd3, 0x35, 0x0c, 0xe2, 0x38, 0x54,
	0x69, 0xac, 0xee, 0x0f, 0xd5, 0xb7, 0x10, 0xcc, 0x6e, 0xd9, 0x44, 0x77, 0xc9, 0x43, 0x0f, 0xd7,
	0x1d, 0x4b, 0x6f, 0xf9, 0x2b, 0xad, 0x40, 0xc1, 0xf3, 0x3b, 0xdf, 0xc2, 0x9c, 0x26, 0x9c, 0x02,
	0x8a, 0xc8, 0x23, 0x87, 0xd8, 0x75, 0x2a, 0x84, 0xe7, 0xa0, 0xdc, 0xb4, 0xf4, 0xd6, 0x9e, 0xd9,
	0xe0, 0xfb, 0x28, 0x79, 0xc3, 0xdd, 0x06, 0x3e, 0x0b, 0x25, 0xcb, 0x6e, 0x7a, 0xf3, 0x79, 0x3a,
	0x5f, 0xb4, 0xec, 0xe6, 0x6e, 0xc3, 0x93, 0x77, 0x89, 0xde, 0xf6, 0xe6, 0x0b, 0x4c, 0xde, 0x1b,
	0xee, 0x36, 0xd4, 0x6f, 0x10, 0xcc, 0xc5, 0x0c, 0xe2, 0xdb, 0xd8, 0x86, 0x42, 0x43, 0x77, 0x75,
	0x6e, 0xd1, 0x35, 0x2d, 0x7e, 0x2e, 0x35, 0x89, 0xaa, 0xb6, 0xad, 0xbb, 0x7a, 0x9d, 0x6a, 0x7b,
	0xfe, 0x36, 0xac, 0x06, 0xa1, 0x76, 0xe6, 0xeb, 0xf4, 0xd9, 0x73, 0x50, 0x9b, 0x38, 0x8e, 0xde,
	0x24, 0xdc, 0x4c, 0x7f, 0xb8, 0xf0, 0x0f, 0x28, 0x78, 0xba, 0xf8, 0x0f, 0x00, 0x74, 0x85, 0x3d,
	0x6f, 0x5f, 0xdc, 0x82, 0xf3, 0x49, 0x16, 0x04, 0x6b, 0x57, 0x5c, 0xff, 0x11, 0xcf, 0x40, 0xd1,
	0xb0, 0xba, 0x1d, 0x97, 0x2f, 0xca, 0x06, 0xea, 0x13, 0x05, 0x7e, 0xbd, 0x43, 0x5c, 0x4f, 0x62,
	0xcb, 0x9b, 0xf0, 0x3d, 0x3f, 0x07, 0x65, 0xcf, 0xa9, 0x9e, 0x73, 0xc6, 0x98, 0x73, 0xbc, 0x21,
	0xf3, 0x9a, 0xef, 0x65, 0x24, 0xf1, 0xb2, 0x22, 0xf1, 0x72, 0x3e, 0xec, 0x65, 0xcf, 0x9e, 0x96,
	0xd9, 0x36, 0x5d, 0xea, 0xfc, 0x7c, 0x9d, 0x0d, 0xf0, 0x2c, 0x94, 0xac, 0x83, 0x03, 0x87, 0xb8,
	0xd5, 0x22, 0x9d, 0xe6, 0x23, 0xcf, 0x63, 0x07, 0xb6, 0xd5, 0xae, 0x96, 0x98, 0xc7, 0xbc, 0x67,
	0x3c, 0x05, 0x8a, 0x6b, 0x55, 0xcb, 0x74, 0x46, 0x71, 0x2d, 0x7c, 0x05, 0xa6, 0x1c, 0xcb, 0x76,
	0xf7, 0x8e, 0x74, 0x5b, 0x6f, 0x13, 0x97, 0xd8, 0xd5, 0x0a, 0x5d, 0x71, 0xd2, 0x9b, 0xfd, 0xab,
	0x3f, 0xd9, 0x13, 0x6b, 0x98, 0x36, 0x31, 0x5c, 0xd3, 0xea, 0x54, 0x21, 0x10, 0xdb, 0xf6, 0x27,
	0xd5, 0xa7, 0x08, 0x66, 0x44, 0xcf, 0xf0, 0x23, 0xb0, 0x29, 0x1c, 0x81, 0xb5, 0x24, 0x00, 0x92,
	0xf4, 0xb2, 0xe3, 0x7f, 0x8e, 0xe3, 0xdf, 0x43, 0x10, 0x85, 0x11, 0xfc, 0xaf, 0x02, 0x67, 0xf9,
	0x7a, 0x77, 0x4d, 0xc7, 0xb5, 0xec, 0x93, 0x10, 0x86, 0xaf, 0x0f, 0x54, 0x63, 0xe9, 0xa0, 0xaa,
	0x24, 0x41, 0xf5, 0x39, 0x82, 0xd9, 0xa8, 0x0b, 0x38, 0x58, 0x5b, 0x02, 0x58, 0xb5, 0x3e, 0x60,
	0x45, 0x34, 0xb3, 0xc3, 0x75, 0x87, 0xc3, 0xf5, 0x47, 0x18, 0x0f, 0xc2, 0xd5, 0x63, 0xbd, 0xfc,
	0xe0, 0x78, 0x85, 0x5e, 0xbc, 0x3a, 0xea, 0x13, 0x04, 0xf3, 0x21, 0x2e, 0xd9, 0x62, 0xdf, 0x0e,
	0x99, 0xa8, 0xf1, 0x3c, 0x00, 0xff, 0x72, 0x09, 0x40, 0xaf, 0xf0, 0x99, 0x0c, 0x04, 0xf9, 0x13,
	0x82, 0x85, 0x24, 0xcb, 0xb8, 0xcf, 0x77, 0x04, 0x9f, 0x6f, 0x0c, 0xe0, 0xc8, 0x88, 0x76, 0x76,
	0xbf, 0x1b, 0xdc, 0xef, 0xb7, 0x61, 0x92, 0xf9, 0x9d, 0x6f, 0x90, 0xdb, 0x71, 0x49, 0xea, 0x79,
	0xdf, 0x82, 0x09, 0x37, 0x34, 0x92, 0xf0, 0xe5, 0x67, 0xec, 0xa8, 0x71, 0xa1, 0x74, 0x94, 0x29,
	0x7a, 0x1f, 0xc9, 0xbd, 0xff, 0x8a, 0xa2, 0x51, 0xfd, 0x08, 0xc1, 0x5c, 0x6c, 0x53, 0xe9, 0xbf,
	0xf0, 0x24, 0xaa, 0x2f, 0x8b, 0xf0, 0xde, 0x54, 0xa0, 0x1a, 0x2c, 0x19, 0xe1, 0xbc, 0xd3, 0xee,
	0xeb, 0x11, 0x33, 0xdf, 0x57, 0x08, 0xe6, 0x13, 0x7c, 0xc1, 0xb1, 0xbb, 0x23, 0x60, 0xb7, 0xde,
	0x1f, 0xbb, 0x91, 0xf1, 0xdf, 0x5f, 0x38, 0x7a, 0x3b, 0x30, 0x25, 0xc4, 0xa1, 0x4f, 0x81, 0x83,
	0x03, 0x71, 0x32, 0x1c, 0x88, 0x8e, 0xfa, 0x3e, 0x82, 0xc5, 0x30, 0x61, 0x1c, 0xea, 0xad, 0x16,
	0xe9, 0x34, 0x49, 0x26, 0x2a, 0xbc, 0x0c, 0x13, 0x86, 0xff, 0x82, 0xe0, 0x1c, 0x8c, 0xf7, 0xe6,
	0x32, 0xd0, 0xe1, 0xff, 0x14, 0x38, 0x97, 0x6c, 0x1f, 0xc7, 0x61, 0x57, 0xc0, 0xe1, 0xc6, 0x20,
	0x42, 0x8c, 0xea, 0x67, 0x87, 0xc2, 0xe4, 0x50, 0xfc, 0x19, 0xa6, 0x39, 0x14, 0xfe, 0xbb, 0xb9,
	0x2d, 0xaa, 0x1c, 0x8b, 0x9e, 0x15, 0x0c, 0xc5, 0xde, 0x58, 0x42, 0x8c, 0xcf, 0x11, 0x8b, 0x4a,
	0x5f, 0x2c, 0x1d, 0x35, 0x46, 0xd1, 0x40, 0xfd, 0xd0, 0x78, 0x55, 0xf4, 0xf8, 0x8c, 0x07, 0x59,
	0x64, 0x6b, 0xc3, 0x05, 0x59, 0xa2, 0xf2, 0xcb, 0xa2, 0xc8, 0xb7, 0x15, 0x58, 0x08, 0x2f, 0x1a,
	0x21, 0xc9, 0xd7, 0xc1, 0xeb, 0x23, 0x26, 0xca, 0xef, 0x10, 0x2c, 0x26, 0x7a, 0x84, 0xa3, 0x78,
	0x57, 0x40, 0xf1, 0xfa, 0x20, 0x14, 0x47, 0x46, 0x96, 0x8f, 0x38, 0x8e, 0xf7, 0xe1, 0x4c, 0x24,
	0x42, 0x7d, 0xba, 0x4c, 0x13, 0xa2, 0xd3, 0x62, 0x88, 0x3a, 0xea, 0x3b, 0xe2, 0x15, 0xf6, 0xae,
	0xbe, 0x6f, 0x66, 0xcb, 0x1c, 0xe7, 0x61, 0xec, 0xd0, 0x53, 0x0e, 0x4e, 0x42, 0x99, 0x8e, 0x33,
	0xd0, 0xe4, 0xf7, 0x08, 0xaa, 0x71, 0x9b, 0xb8, 0xff, 0x6f, 0x0b, 0xfe, 0xff, 0xed, 0x00, 0x8a,
	0x14, 0x74, 0xb3, 0x3b, 0xff, 0x9f, 0xdc, 0xf9, 0x37, 0xfd, 0x4c, 0x9d, 0x6e, 0x8d, 0xdb, 0x70,
	0x41, 0xea, 0x77, 0xb6, 0x3a, 0x4b, 0xd5, 0xe9, 0xb3, 0x84, 0x12, 0x3f, 0x65, 0x37, 0x48, 0x2a,
	0x92, 0x8e, 0x0e, 0xc3, 0xde, 0x46, 0x32, 0x6f, 0xbf, 0x2a, 0x1a, 0xfc, 0x10, 0xd1, 0x8b, 0x66,
	0x78, 0x3b, 0x1c, 0xbc, 0x5b, 0x02, 0x78, 0x9a, 0x24, 0x78, 0xe2, 0x8a, 0x2f, 0x8b, 0xfe, 0xfe,
	0xaf, 0xd0, 0x24, 0x9d, 0x2e, 0x18, 0xa1, 0xbe, 0xd3, 0xec, 0xe1, 0x11, 0x53, 0xde, 0x73, 0x96,
	0xd5, 0x8b, 0x5e, 0x18, 0x2a, 0xab, 0x4f, 0x52, 0xcd, 0x8e, 0xd9, 0x2e, 0xc7, 0x6c, 0x13, 0x26,
	0x42, 0xd1, 0xe6, 0xd3, 0xdc, 0xa0, 0x70, 0x1b, 0x0f, 0xc2, 0xcd, 0x51, 0x7f, 0x14, 0xa9, 0x44,
	0x2c, 0x4f, 0xae, 0x8a, 0x85, 0xcf, 0xd9, 0x58, 0xe1, 0xf3, 0xef, 0xde, 0x7f, 0xfb, 0x94, 0x3e,
	0xc3, 0xf1, 0x99, 0x17, 0xe2, 0x73, 0x11, 0x2a, 0x6d, 0xba, 0x56, 0xc0, 0x6e, 0x63, 0x6c, 0x42,
	0x38, 0x3f, 0xc5, 0xf0, 0xf9, 0xd9, 0xe5, 0x69, 0x30, 0xb1, 0xf7, 0xda, 0xc4, 0x3d, 0xb4, 0x1a,
	0xf4, 0x08, 0xc4, 0x78, 0x9d, 0x97, 0x73, 0x1f, 0x32, 0xd1, 0xfb, 0x54, 0x92, 0x27, 0xc2, 0xfe,
	0x50, 0x7d, 0x21, 0x56, 0x04, 0x22, 0x15, 0xd6, 0x14, 0x89, 0x88, 0x54, 0x39, 0x3b, 0xaa, 0x7f,
	0xe2, 0xa8, 0xde, 0xf2, 0x51, 0x65, 0xfe, 0xe0, 0x56, 0x5c, 0x94, 0xa2, 0xca, 0xd7, 0x67, 0xb0,
	0xb2, 0x81, 0x6a, 0x50, 0xbe, 0xbc, 0xa7, 0x3b, 0xae, 0x88, 0xa8, 0xe0, 0x76, 0x14, 0x71, 0x7b,
	0x08, 0x2c, 0x45, 0x00, 0x2b, 0xf9, 0xfb, 0x49, 0xfd, 0x84, 0xd1, 0x58, 0x78, 0x95, 0xa1, 0x68,
	0x2c, 0xae, 0x98, 0xdd, 0x79, 0xd7, 0xb9, 0xf3, 0x86, 0x3a, 0xb2, 0xea, 0x17, 0x2c, 0xb0, 0x99,
	0x11, 0x11, 0x7e, 0xeb, 0xeb, 0x2a, 0x9f, 0x83, 0x94, 0x18, 0x07, 0xe5, 0x7b, 0x1c, 0x14, 0xf0,
	0x57, 0x41, 0xe0, 0xaf, 0x1e, 0xdb, 0x15, 0xc3, 0x6c, 0x17, 0x67, 0xac, 0x52, 0x3a, 0xc6, 0x2a,
	0x27, 0x31, 0xd6, 0x0b, 0x76, 0x87, 0x88, 0x6c, 0x2c, 0x7d, 0x86, 0x20, 0xd3, 0xcd, 0x0e, 0xd0,
	0x3d, 0x0e, 0xd0, 0xb6, 0x5f, 0x53, 0x62, 0xbe, 0xf4, 0x49, 0x6b, 0xe0, 0xf1, 0x9e, 0x08, 0x1d,
	0x6f, 0x47, 0xfd, 0x18, 0xd1, 0xb4, 0x7c, 0xb3, 0xd5, 0x4a, 0xc4, 0xce, 0x87, 0x07, 0xc5, 0xe0,
	0x51, 0x12, 0xe0, 0xc9, 0x27, 0xc3, 0x53, 0xe8, 0x0f, 0x4f, 0x31, 0x1d, 0x3c, 0xa5, 0x24, 0x78,
	0xbe, 0x66, 0x39, 0x74, 0xdc, 0xfc, 0xa1, 0x72, 0x68, 0x99, 0xfa, 0x69, 0x01, 0xe9, 0x4b, 0x04,
	0x17, 0x76, 0x88, 0xbb, 0x4d, 0x0e, 0xf4, 0x6e, 0x2b, 0x39, 0xc8, 0x42, 0x94, 0x83, 0x04, 0xca,
	0x09, 0xd0, 0x51, 0x92, 0xd1, 0xc9, 0x87, 0xd1, 0xf1, 0xf1, 0x2e, 0xc4, 0xf0, 0x2e, 0xf6, 0x49,
	0x09, 0x7e, 0x49, 0x80, 0x7d, 0x8b, 0xe0, 0xa2, 0x74, 0x6f, 0x1c, 0xc5, 0x7b, 0x02, 0x8a, 0xbf,
	0x97, 0xa0, 0xd8, 0xef, 0x15, 0xa7, 0x05, 0xc9, 0xf7, 0x10, 0x54, 0x7a, 0xa5, 0xf5, 0xe1, 0xae,
	0x3d, 0x92, 0x5c, 0xf0, 0x1a, 0x14, 0x68, 0xef, 0x2d, 0x4f, 0xdf, 0x71, 0x4e, 0x7c, 0x47, 0xd0,
	0xf0, 0xa5, 0xa5, 0x7c, 0x2a, 0x49, 0x7b, 0xa5, 0xf4, 0x4b, 0xb7, 0xc1, 0x61, 0xf6, 0x87, 0xea,
	0x33, 0x04, 0x53, 0xe2, 0x35, 0x6e, 0x24, 0x26, 0xde, 0x84, 0x4a, 0x50, 0xe4, 0x61, 0x76, 0x5e,
	0x96, 0xd9, 0x19, 0x5c, 0x20, 0x03, 0x9d, 0x3e, 0x16, 0x7f, 0x80, 0x00, 0x82, 0x8c, 0x6c, 0x24,
	0xd6, 0x6e, 0x40, 0x91, 0xdd, 0xb9, 0xf2, 0x49, 0xdd, 0xcc, 0xc0, 0x52, 0x96, 0x03, 0x32, 0xd9,
	0x3e, 0x16, 0x3e, 0x45, 0x30, 0x11, 0xae, 0x24, 0x8e, 0xc4, 0xc6, 0xdf, 0x41, 0xd9, 0xef, 0x24,
	0x24, 0x5a, 0xe9, 0xb7, 0xed, 0xfd, 0xea, 0xa5, 0x2f, 0xdd, 0xc7, 0xce, 0x1f, 0x10, 0x8c, 0x87,
	0xce, 0xad, 0x17, 0xf5, 0x3d, 0x2e, 0x51, 0xcc, 0x46, 0xcf, 0x6c, 0x65, 0x38, 0xb3, 0xf3, 0xa2,
	0x6b, 0x4b, 0x3c, 0x15, 0x2b, 0xd0, 0xb7, 0x2c, 0x26, 0xe6, 0x9b, 0x3c, 0x70, 0xb8, 0x68, 0xd8,
	0xe4, 0xa2, 0x60, 0x72, 0x90, 0xa2, 0x94, 0x86, 0xc9, 0xaa, 0xcb, 0x41, 0x56, 0xbd, 0xfe, 0xee,
	0x19, 0x0e, 0xce, 0x03, 0x62, 0x1f, 0x9b, 0x06, 0xc1, 0x2d, 0x98, 0x8e, 0xf4, 0xca, 0xf1, 0x72,
	0xaa, 0x86, 0x3a, 0x65, 0xe1, 0x85, 0x95, 0x21, 0x9a, 0xef, 0x6a, 0x0e, 0x1b, 0x30, 0x11, 0x6e,
	0xcb, 0xe2, 0xdf, 0x0c, 0x6e, 0xdc, 0xb2, 0x75, 0x96, 0xd2, 0x76, 0x78, 0xd5, 0x1c, 0x36, 0x61,
	0x4a, 0x6c, 0x27, 0xe2, 0xab, 0x69, 0x5a, 0x8e, 0x6c, 0xa1, 0xe5, 0xf4, 0xdd, 0x49, 0x35, 0x87,
	0xff, 0x03, 0x33, 0x49, 0x45, 0x63, 0x5c, 0x4b, 0x5f, 0x5e, 0x66, 0xcb, 0x5e, 0x1b, 0xb6, 0x1e,
	0xad, 0xe6, 0xb0, 0x0d, 0xbf, 0x8a, 0x15, 0x35, 0xf1, 0x6a, 0xca, 0xda, 0x27, 0x5b, 0x76, 0x6d,
	0xa8, 0x4a, 0xa9, 0x9a, 0xc3, 0xff, 0xa6, 0xbf, 0x54, 0x88, 0x96, 0xe0, 0xb0, 0x96, 0xba, 0x56,
	0xc7, 0xd6, 0xad, 0x0d, 0x59, 0xdb, 0x53, 0x73, 0xd8, 0x82, 0x33, 0xd1, 0xe2, 0x13, 0x5e, 0x49,
	0x57, 0xa2, 0x62, 0x6b, 0xae, 0x0e, 0x53, 0xcf, 0x52, 0x73, 0xf8, 0x00, 0x26, 0x85, 0x82, 0x09,
	0x5e, 0x4a, 0x51, 0x53, 0x61, 0x4b, 0x5d, 0x4d, 0x5d, 0x7d, 0x51, 0x73, 0x5e, 0x04, 0x46, 0xae,
	0xf9, 0x78, 0x39, 0x55, 0x2d, 0xa0, 0x4f, 0x04, 0x4a, 0xea, 0x06, 0x6a, 0x0e, 0x77, 0x01, 0xc7,
	0xfb, 0xbe, 0x78, 0x2d, 0x6d, 0x7f, 0x98, 0xad, 0xa9, 0x0d, 0xd7, 0x4e, 0xee, 0x6d, 0x32, 0xdc,
	0xa1, 0x94, 0x6e, 0x32, 0xa1, 0xad, 0x2b, 0xdd, 0x64, 0x52, 0xcb, 0x33, 0x88, 0x0c, 0xa1, 0xa7,
	0x26, 0x8f, 0x8c, 0xa4, 0x1e, 0xa6, 0x3c, 0x32, 0x12, 0x1b, 0x75, 0x6c, 0xcd, 0xd8, 0xcd, 0x1e,
	0xaf, 0xa6, 0x2c, 0x00, 0xf4, 0x59, 0x53, 0x5a, 0x2e, 0xe8, 0x1d, 0xd1, 0xe0, 0x32, 0x2c, 0x3d,
	0xa2, 0xb1, 0xeb, 0xbc, 0xf4, 0x88, 0xc6, 0x6f, 0xd6, 0x2c, 0xf6, 0xa2, 0xd7, 0x3a, 0xbc, 0x92,
	0xee, 0xf2, 0xd7, 0x27, 0xf6, 0x64, 0x37, 0xc5, 0x1e, 0xcd, 0x44, 0x6f, 0x29, 0x52, 0x9a, 0x91,
	0x5c, 0xe6, 0xa4, 0x34, 0x23, 0xbb, 0xfe, 0xb0, 0x83, 0x1a, 0xfb, 0x11, 0x5f, 0xd2, 0x5b, 0x92,
	0x7f, 0x96, 0x97, 0x7c, 0x50, 0x25, 0x3f, 0xc7, 0x53, 0x73, 0xf8, 0x0d, 0x56, 0x45, 0x48, 0x4a,
	0xe4, 0xf1, 0xfa, 0x50, 0x59, 0x3f, 0x5b, 0x7e, 0x23, 0xc3, 0x4d, 0x41, 0xcd, 0xed, 0x97, 0x68,
	0x02, 0xb1, 0xf1, 0x73, 0x00, 0x00, 0x00, 0xff, 0xff, 0x0f, 0xad, 0x26, 0x82, 0x0c, 0x2a, 0x00,
	0x00,
}
