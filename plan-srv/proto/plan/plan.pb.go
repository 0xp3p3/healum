// Code generated by protoc-gen-go. DO NOT EDIT.
// source: server/plan-srv/proto/plan/plan.proto

/*
Package go_micro_srv_plan is a generated protocol buffer package.

It is generated from these files:
	server/plan-srv/proto/plan/plan.proto

It has these top-level messages:
	Data
	ArrData
	AllRequest
	AllResponse
	CreateRequest
	CreateResponse
	UpdateRequest
	UpdateResponse
	ReadRequest
	ReadResponse
	DeleteRequest
	DeleteResponse
	SearchRequest
	SearchResponse
	TemplatesRequest
	TemplatesResponse
	DraftsRequest
	DraftsResponse
	ByCreatorRequest
	ByCreatorResponse
	FiltersRequest
	FiltersResponse
	TopFiltersRequest
	TopFiltersResponse
	TimeFiltersRequest
	TimeFiltersResponse
	UseFiltersRequest
	UseFiltersResponse
	SuccessFiltersRequest
	SuccessFiltersResponse
	ConditionFiltersRequest
	ConditionFiltersResponse
	GoalFiltersRequest
	GoalFiltersResponse
	CreatePlanFilterRequest
	CreatePlanFilterResponse
	SharePlanRequest
	SharePlanResponse
	AutocompleteSearchRequest
	AutocompleteSearchResponse
	Plan
	PlanItem
	User
	PlanFilter
	SharePlanUser
	GetTopTagsRequest
	GetTopTagsResponse
	AutocompleteTagsRequest
	AutocompleteTagsResponse
	WarmupCacheRequest
	WarmupCacheResponse
*/
package go_micro_srv_plan

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import go_micro_srv_user "server/user-srv/proto/user"
import go_micro_srv_todo "server/todo-srv/proto/todo"
import go_micro_srv_behaviour "server/behaviour-srv/proto/behaviour"
import go_micro_srv_static "server/static-srv/proto/static"
import go_micro_srv_static2 "server/static-srv/proto/common"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type StatusEnum int32

const (
	StatusEnum_StatusEnum_NONE StatusEnum = 0
	StatusEnum_PUBLISH         StatusEnum = 1
	StatusEnum_DRAFT           StatusEnum = 2
)

var StatusEnum_name = map[int32]string{
	0: "StatusEnum_NONE",
	1: "PUBLISH",
	2: "DRAFT",
}
var StatusEnum_value = map[string]int32{
	"StatusEnum_NONE": 0,
	"PUBLISH":         1,
	"DRAFT":           2,
}

func (x StatusEnum) String() string {
	return proto.EnumName(StatusEnum_name, int32(x))
}
func (StatusEnum) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Data struct {
	Plan *Plan `protobuf:"bytes,1,opt,name=plan" json:"plan,omitempty"`
}

func (m *Data) Reset()                    { *m = Data{} }
func (m *Data) String() string            { return proto.CompactTextString(m) }
func (*Data) ProtoMessage()               {}
func (*Data) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Data) GetPlan() *Plan {
	if m != nil {
		return m.Plan
	}
	return nil
}

type ArrData struct {
	Plans []*Plan `protobuf:"bytes,1,rep,name=plans" json:"plans,omitempty"`
}

func (m *ArrData) Reset()                    { *m = ArrData{} }
func (m *ArrData) String() string            { return proto.CompactTextString(m) }
func (*ArrData) ProtoMessage()               {}
func (*ArrData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ArrData) GetPlans() []*Plan {
	if m != nil {
		return m.Plans
	}
	return nil
}

type AllRequest struct {
	OrgId         string `protobuf:"bytes,1,opt,name=org_id,json=orgId" json:"org_id,omitempty"`
	TeamId        string `protobuf:"bytes,2,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
	Limit         int64  `protobuf:"varint,3,opt,name=limit" json:"limit,omitempty"`
	Offset        int64  `protobuf:"varint,4,opt,name=offset" json:"offset,omitempty"`
	SortParameter string `protobuf:"bytes,5,opt,name=sort_parameter,json=sortParameter" json:"sort_parameter,omitempty"`
	SortDirection string `protobuf:"bytes,6,opt,name=sort_direction,json=sortDirection" json:"sort_direction,omitempty"`
}

func (m *AllRequest) Reset()                    { *m = AllRequest{} }
func (m *AllRequest) String() string            { return proto.CompactTextString(m) }
func (*AllRequest) ProtoMessage()               {}
func (*AllRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *AllRequest) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *AllRequest) GetTeamId() string {
	if m != nil {
		return m.TeamId
	}
	return ""
}

func (m *AllRequest) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *AllRequest) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *AllRequest) GetSortParameter() string {
	if m != nil {
		return m.SortParameter
	}
	return ""
}

func (m *AllRequest) GetSortDirection() string {
	if m != nil {
		return m.SortDirection
	}
	return ""
}

type AllResponse struct {
	Data    *ArrData `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	Code    int64    `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Message string   `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *AllResponse) Reset()                    { *m = AllResponse{} }
func (m *AllResponse) String() string            { return proto.CompactTextString(m) }
func (*AllResponse) ProtoMessage()               {}
func (*AllResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *AllResponse) GetData() *ArrData {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *AllResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *AllResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type CreateRequest struct {
	Plan   *Plan  `protobuf:"bytes,1,opt,name=plan" json:"plan,omitempty"`
	UserId string `protobuf:"bytes,2,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	OrgId  string `protobuf:"bytes,3,opt,name=org_id,json=orgId" json:"org_id,omitempty"`
	TeamId string `protobuf:"bytes,4,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
}

func (m *CreateRequest) Reset()                    { *m = CreateRequest{} }
func (m *CreateRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateRequest) ProtoMessage()               {}
func (*CreateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *CreateRequest) GetPlan() *Plan {
	if m != nil {
		return m.Plan
	}
	return nil
}

func (m *CreateRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *CreateRequest) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *CreateRequest) GetTeamId() string {
	if m != nil {
		return m.TeamId
	}
	return ""
}

type CreateResponse struct {
	Data    *Data  `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	Code    int64  `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Message string `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *CreateResponse) Reset()                    { *m = CreateResponse{} }
func (m *CreateResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateResponse) ProtoMessage()               {}
func (*CreateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *CreateResponse) GetData() *Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *CreateResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *CreateResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type UpdateRequest struct {
	Plan   *Plan  `protobuf:"bytes,1,opt,name=plan" json:"plan,omitempty"`
	UserId string `protobuf:"bytes,2,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	OrgId  string `protobuf:"bytes,3,opt,name=org_id,json=orgId" json:"org_id,omitempty"`
	TeamId string `protobuf:"bytes,4,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
}

func (m *UpdateRequest) Reset()                    { *m = UpdateRequest{} }
func (m *UpdateRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateRequest) ProtoMessage()               {}
func (*UpdateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *UpdateRequest) GetPlan() *Plan {
	if m != nil {
		return m.Plan
	}
	return nil
}

func (m *UpdateRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *UpdateRequest) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *UpdateRequest) GetTeamId() string {
	if m != nil {
		return m.TeamId
	}
	return ""
}

type UpdateResponse struct {
	Data    *Data  `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	Code    int64  `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Message string `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *UpdateResponse) Reset()                    { *m = UpdateResponse{} }
func (m *UpdateResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateResponse) ProtoMessage()               {}
func (*UpdateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *UpdateResponse) GetData() *Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *UpdateResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *UpdateResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type ReadRequest struct {
	Id     string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	OrgId  string `protobuf:"bytes,2,opt,name=org_id,json=orgId" json:"org_id,omitempty"`
	TeamId string `protobuf:"bytes,3,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
}

func (m *ReadRequest) Reset()                    { *m = ReadRequest{} }
func (m *ReadRequest) String() string            { return proto.CompactTextString(m) }
func (*ReadRequest) ProtoMessage()               {}
func (*ReadRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *ReadRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ReadRequest) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *ReadRequest) GetTeamId() string {
	if m != nil {
		return m.TeamId
	}
	return ""
}

type ReadResponse struct {
	Data    *Data  `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	Code    int64  `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Message string `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *ReadResponse) Reset()                    { *m = ReadResponse{} }
func (m *ReadResponse) String() string            { return proto.CompactTextString(m) }
func (*ReadResponse) ProtoMessage()               {}
func (*ReadResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *ReadResponse) GetData() *Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *ReadResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *ReadResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type DeleteRequest struct {
	Id     string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	OrgId  string `protobuf:"bytes,2,opt,name=org_id,json=orgId" json:"org_id,omitempty"`
	TeamId string `protobuf:"bytes,3,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
}

func (m *DeleteRequest) Reset()                    { *m = DeleteRequest{} }
func (m *DeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteRequest) ProtoMessage()               {}
func (*DeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *DeleteRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *DeleteRequest) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *DeleteRequest) GetTeamId() string {
	if m != nil {
		return m.TeamId
	}
	return ""
}

type DeleteResponse struct {
	Code    int64  `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Message string `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *DeleteResponse) Reset()                    { *m = DeleteResponse{} }
func (m *DeleteResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteResponse) ProtoMessage()               {}
func (*DeleteResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *DeleteResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *DeleteResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type SearchRequest struct {
	Name          string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	OrgId         string `protobuf:"bytes,2,opt,name=org_id,json=orgId" json:"org_id,omitempty"`
	TeamId        string `protobuf:"bytes,3,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
	Limit         int64  `protobuf:"varint,4,opt,name=limit" json:"limit,omitempty"`
	Offset        int64  `protobuf:"varint,5,opt,name=offset" json:"offset,omitempty"`
	From          int64  `protobuf:"varint,6,opt,name=from" json:"from,omitempty"`
	To            int64  `protobuf:"varint,7,opt,name=to" json:"to,omitempty"`
	SortParameter string `protobuf:"bytes,8,opt,name=sort_parameter,json=sortParameter" json:"sort_parameter,omitempty"`
	SortDirection string `protobuf:"bytes,9,opt,name=sort_direction,json=sortDirection" json:"sort_direction,omitempty"`
}

func (m *SearchRequest) Reset()                    { *m = SearchRequest{} }
func (m *SearchRequest) String() string            { return proto.CompactTextString(m) }
func (*SearchRequest) ProtoMessage()               {}
func (*SearchRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *SearchRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SearchRequest) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *SearchRequest) GetTeamId() string {
	if m != nil {
		return m.TeamId
	}
	return ""
}

func (m *SearchRequest) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *SearchRequest) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *SearchRequest) GetFrom() int64 {
	if m != nil {
		return m.From
	}
	return 0
}

func (m *SearchRequest) GetTo() int64 {
	if m != nil {
		return m.To
	}
	return 0
}

func (m *SearchRequest) GetSortParameter() string {
	if m != nil {
		return m.SortParameter
	}
	return ""
}

func (m *SearchRequest) GetSortDirection() string {
	if m != nil {
		return m.SortDirection
	}
	return ""
}

type SearchResponse struct {
	Data    *ArrData `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	Code    int64    `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Message string   `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *SearchResponse) Reset()                    { *m = SearchResponse{} }
func (m *SearchResponse) String() string            { return proto.CompactTextString(m) }
func (*SearchResponse) ProtoMessage()               {}
func (*SearchResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *SearchResponse) GetData() *ArrData {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *SearchResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *SearchResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type TemplatesRequest struct {
	OrgId         string `protobuf:"bytes,1,opt,name=org_id,json=orgId" json:"org_id,omitempty"`
	TeamId        string `protobuf:"bytes,2,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
	Limit         int64  `protobuf:"varint,3,opt,name=limit" json:"limit,omitempty"`
	Offset        int64  `protobuf:"varint,4,opt,name=offset" json:"offset,omitempty"`
	SortParameter string `protobuf:"bytes,5,opt,name=sort_parameter,json=sortParameter" json:"sort_parameter,omitempty"`
	SortDirection string `protobuf:"bytes,6,opt,name=sort_direction,json=sortDirection" json:"sort_direction,omitempty"`
}

func (m *TemplatesRequest) Reset()                    { *m = TemplatesRequest{} }
func (m *TemplatesRequest) String() string            { return proto.CompactTextString(m) }
func (*TemplatesRequest) ProtoMessage()               {}
func (*TemplatesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *TemplatesRequest) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *TemplatesRequest) GetTeamId() string {
	if m != nil {
		return m.TeamId
	}
	return ""
}

func (m *TemplatesRequest) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *TemplatesRequest) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *TemplatesRequest) GetSortParameter() string {
	if m != nil {
		return m.SortParameter
	}
	return ""
}

func (m *TemplatesRequest) GetSortDirection() string {
	if m != nil {
		return m.SortDirection
	}
	return ""
}

type TemplatesResponse struct {
	Data    *ArrData `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	Code    int64    `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Message string   `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *TemplatesResponse) Reset()                    { *m = TemplatesResponse{} }
func (m *TemplatesResponse) String() string            { return proto.CompactTextString(m) }
func (*TemplatesResponse) ProtoMessage()               {}
func (*TemplatesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *TemplatesResponse) GetData() *ArrData {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *TemplatesResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *TemplatesResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type DraftsRequest struct {
	OrgId         string `protobuf:"bytes,1,opt,name=org_id,json=orgId" json:"org_id,omitempty"`
	TeamId        string `protobuf:"bytes,2,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
	Limit         int64  `protobuf:"varint,3,opt,name=limit" json:"limit,omitempty"`
	Offset        int64  `protobuf:"varint,4,opt,name=offset" json:"offset,omitempty"`
	SortParameter string `protobuf:"bytes,5,opt,name=sort_parameter,json=sortParameter" json:"sort_parameter,omitempty"`
	SortDirection string `protobuf:"bytes,6,opt,name=sort_direction,json=sortDirection" json:"sort_direction,omitempty"`
}

func (m *DraftsRequest) Reset()                    { *m = DraftsRequest{} }
func (m *DraftsRequest) String() string            { return proto.CompactTextString(m) }
func (*DraftsRequest) ProtoMessage()               {}
func (*DraftsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *DraftsRequest) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *DraftsRequest) GetTeamId() string {
	if m != nil {
		return m.TeamId
	}
	return ""
}

func (m *DraftsRequest) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *DraftsRequest) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *DraftsRequest) GetSortParameter() string {
	if m != nil {
		return m.SortParameter
	}
	return ""
}

func (m *DraftsRequest) GetSortDirection() string {
	if m != nil {
		return m.SortDirection
	}
	return ""
}

type DraftsResponse struct {
	Data    *ArrData `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	Code    int64    `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Message string   `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *DraftsResponse) Reset()                    { *m = DraftsResponse{} }
func (m *DraftsResponse) String() string            { return proto.CompactTextString(m) }
func (*DraftsResponse) ProtoMessage()               {}
func (*DraftsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *DraftsResponse) GetData() *ArrData {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *DraftsResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *DraftsResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type ByCreatorRequest struct {
	UserId        string `protobuf:"bytes,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	OrgId         string `protobuf:"bytes,11,opt,name=org_id,json=orgId" json:"org_id,omitempty"`
	TeamId        string `protobuf:"bytes,12,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
	Limit         int64  `protobuf:"varint,13,opt,name=limit" json:"limit,omitempty"`
	Offset        int64  `protobuf:"varint,14,opt,name=offset" json:"offset,omitempty"`
	SortParameter string `protobuf:"bytes,5,opt,name=sort_parameter,json=sortParameter" json:"sort_parameter,omitempty"`
	SortDirection string `protobuf:"bytes,6,opt,name=sort_direction,json=sortDirection" json:"sort_direction,omitempty"`
}

func (m *ByCreatorRequest) Reset()                    { *m = ByCreatorRequest{} }
func (m *ByCreatorRequest) String() string            { return proto.CompactTextString(m) }
func (*ByCreatorRequest) ProtoMessage()               {}
func (*ByCreatorRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *ByCreatorRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *ByCreatorRequest) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *ByCreatorRequest) GetTeamId() string {
	if m != nil {
		return m.TeamId
	}
	return ""
}

func (m *ByCreatorRequest) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ByCreatorRequest) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *ByCreatorRequest) GetSortParameter() string {
	if m != nil {
		return m.SortParameter
	}
	return ""
}

func (m *ByCreatorRequest) GetSortDirection() string {
	if m != nil {
		return m.SortDirection
	}
	return ""
}

type ByCreatorResponse struct {
	Data    *ArrData `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	Code    int64    `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Message string   `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *ByCreatorResponse) Reset()                    { *m = ByCreatorResponse{} }
func (m *ByCreatorResponse) String() string            { return proto.CompactTextString(m) }
func (*ByCreatorResponse) ProtoMessage()               {}
func (*ByCreatorResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *ByCreatorResponse) GetData() *ArrData {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *ByCreatorResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *ByCreatorResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type FiltersRequest struct {
	Limit         int64  `protobuf:"varint,1,opt,name=limit" json:"limit,omitempty"`
	Offset        int64  `protobuf:"varint,2,opt,name=offset" json:"offset,omitempty"`
	SortParameter string `protobuf:"bytes,3,opt,name=sort_parameter,json=sortParameter" json:"sort_parameter,omitempty"`
	SortDirection string `protobuf:"bytes,4,opt,name=sort_direction,json=sortDirection" json:"sort_direction,omitempty"`
}

func (m *FiltersRequest) Reset()                    { *m = FiltersRequest{} }
func (m *FiltersRequest) String() string            { return proto.CompactTextString(m) }
func (*FiltersRequest) ProtoMessage()               {}
func (*FiltersRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *FiltersRequest) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *FiltersRequest) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *FiltersRequest) GetSortParameter() string {
	if m != nil {
		return m.SortParameter
	}
	return ""
}

func (m *FiltersRequest) GetSortDirection() string {
	if m != nil {
		return m.SortDirection
	}
	return ""
}

type FiltersResponse struct {
	Data    *FiltersResponse_Data `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	Code    int64                 `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Message string                `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *FiltersResponse) Reset()                    { *m = FiltersResponse{} }
func (m *FiltersResponse) String() string            { return proto.CompactTextString(m) }
func (*FiltersResponse) ProtoMessage()               {}
func (*FiltersResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *FiltersResponse) GetData() *FiltersResponse_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *FiltersResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *FiltersResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type FiltersResponse_Data struct {
	Filters []*PlanFilter `protobuf:"bytes,1,rep,name=filters" json:"filters,omitempty"`
}

func (m *FiltersResponse_Data) Reset()                    { *m = FiltersResponse_Data{} }
func (m *FiltersResponse_Data) String() string            { return proto.CompactTextString(m) }
func (*FiltersResponse_Data) ProtoMessage()               {}
func (*FiltersResponse_Data) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21, 0} }

func (m *FiltersResponse_Data) GetFilters() []*PlanFilter {
	if m != nil {
		return m.Filters
	}
	return nil
}

type TopFiltersRequest struct {
}

func (m *TopFiltersRequest) Reset()                    { *m = TopFiltersRequest{} }
func (m *TopFiltersRequest) String() string            { return proto.CompactTextString(m) }
func (*TopFiltersRequest) ProtoMessage()               {}
func (*TopFiltersRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

type TopFiltersResponse struct {
	Data    *ArrData `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	Code    int64    `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Message string   `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *TopFiltersResponse) Reset()                    { *m = TopFiltersResponse{} }
func (m *TopFiltersResponse) String() string            { return proto.CompactTextString(m) }
func (*TopFiltersResponse) ProtoMessage()               {}
func (*TopFiltersResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *TopFiltersResponse) GetData() *ArrData {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *TopFiltersResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *TopFiltersResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type TimeFiltersRequest struct {
	StartDate     int64  `protobuf:"varint,1,opt,name=start_date,json=startDate" json:"start_date,omitempty"`
	EndDate       int64  `protobuf:"varint,2,opt,name=end_date,json=endDate" json:"end_date,omitempty"`
	OrgId         string `protobuf:"bytes,3,opt,name=org_id,json=orgId" json:"org_id,omitempty"`
	TeamId        string `protobuf:"bytes,4,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
	Limit         int64  `protobuf:"varint,5,opt,name=limit" json:"limit,omitempty"`
	Offset        int64  `protobuf:"varint,6,opt,name=offset" json:"offset,omitempty"`
	SortParameter string `protobuf:"bytes,7,opt,name=sort_parameter,json=sortParameter" json:"sort_parameter,omitempty"`
	SortDirection string `protobuf:"bytes,8,opt,name=sort_direction,json=sortDirection" json:"sort_direction,omitempty"`
}

func (m *TimeFiltersRequest) Reset()                    { *m = TimeFiltersRequest{} }
func (m *TimeFiltersRequest) String() string            { return proto.CompactTextString(m) }
func (*TimeFiltersRequest) ProtoMessage()               {}
func (*TimeFiltersRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *TimeFiltersRequest) GetStartDate() int64 {
	if m != nil {
		return m.StartDate
	}
	return 0
}

func (m *TimeFiltersRequest) GetEndDate() int64 {
	if m != nil {
		return m.EndDate
	}
	return 0
}

func (m *TimeFiltersRequest) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *TimeFiltersRequest) GetTeamId() string {
	if m != nil {
		return m.TeamId
	}
	return ""
}

func (m *TimeFiltersRequest) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *TimeFiltersRequest) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *TimeFiltersRequest) GetSortParameter() string {
	if m != nil {
		return m.SortParameter
	}
	return ""
}

func (m *TimeFiltersRequest) GetSortDirection() string {
	if m != nil {
		return m.SortDirection
	}
	return ""
}

type TimeFiltersResponse struct {
	Data    *ArrData `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	Code    int64    `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Message string   `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *TimeFiltersResponse) Reset()                    { *m = TimeFiltersResponse{} }
func (m *TimeFiltersResponse) String() string            { return proto.CompactTextString(m) }
func (*TimeFiltersResponse) ProtoMessage()               {}
func (*TimeFiltersResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *TimeFiltersResponse) GetData() *ArrData {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *TimeFiltersResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *TimeFiltersResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type UseFiltersRequest struct {
}

func (m *UseFiltersRequest) Reset()                    { *m = UseFiltersRequest{} }
func (m *UseFiltersRequest) String() string            { return proto.CompactTextString(m) }
func (*UseFiltersRequest) ProtoMessage()               {}
func (*UseFiltersRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

type UseFiltersResponse struct {
	Data    *ArrData `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	Code    int64    `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Message string   `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *UseFiltersResponse) Reset()                    { *m = UseFiltersResponse{} }
func (m *UseFiltersResponse) String() string            { return proto.CompactTextString(m) }
func (*UseFiltersResponse) ProtoMessage()               {}
func (*UseFiltersResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *UseFiltersResponse) GetData() *ArrData {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *UseFiltersResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *UseFiltersResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type SuccessFiltersRequest struct {
}

func (m *SuccessFiltersRequest) Reset()                    { *m = SuccessFiltersRequest{} }
func (m *SuccessFiltersRequest) String() string            { return proto.CompactTextString(m) }
func (*SuccessFiltersRequest) ProtoMessage()               {}
func (*SuccessFiltersRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

type SuccessFiltersResponse struct {
	Data    *ArrData `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	Code    int64    `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Message string   `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *SuccessFiltersResponse) Reset()                    { *m = SuccessFiltersResponse{} }
func (m *SuccessFiltersResponse) String() string            { return proto.CompactTextString(m) }
func (*SuccessFiltersResponse) ProtoMessage()               {}
func (*SuccessFiltersResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

func (m *SuccessFiltersResponse) GetData() *ArrData {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *SuccessFiltersResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *SuccessFiltersResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type ConditionFiltersRequest struct {
}

func (m *ConditionFiltersRequest) Reset()                    { *m = ConditionFiltersRequest{} }
func (m *ConditionFiltersRequest) String() string            { return proto.CompactTextString(m) }
func (*ConditionFiltersRequest) ProtoMessage()               {}
func (*ConditionFiltersRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30} }

type ConditionFiltersResponse struct {
	Data    *ArrData `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	Code    int64    `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Message string   `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *ConditionFiltersResponse) Reset()                    { *m = ConditionFiltersResponse{} }
func (m *ConditionFiltersResponse) String() string            { return proto.CompactTextString(m) }
func (*ConditionFiltersResponse) ProtoMessage()               {}
func (*ConditionFiltersResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{31} }

func (m *ConditionFiltersResponse) GetData() *ArrData {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *ConditionFiltersResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *ConditionFiltersResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type GoalFiltersRequest struct {
	Goals         string `protobuf:"bytes,1,opt,name=goals" json:"goals,omitempty"`
	OrgId         string `protobuf:"bytes,11,opt,name=org_id,json=orgId" json:"org_id,omitempty"`
	TeamId        string `protobuf:"bytes,12,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
	Limit         int64  `protobuf:"varint,13,opt,name=limit" json:"limit,omitempty"`
	Offset        int64  `protobuf:"varint,14,opt,name=offset" json:"offset,omitempty"`
	SortParameter string `protobuf:"bytes,5,opt,name=sort_parameter,json=sortParameter" json:"sort_parameter,omitempty"`
	SortDirection string `protobuf:"bytes,6,opt,name=sort_direction,json=sortDirection" json:"sort_direction,omitempty"`
}

func (m *GoalFiltersRequest) Reset()                    { *m = GoalFiltersRequest{} }
func (m *GoalFiltersRequest) String() string            { return proto.CompactTextString(m) }
func (*GoalFiltersRequest) ProtoMessage()               {}
func (*GoalFiltersRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{32} }

func (m *GoalFiltersRequest) GetGoals() string {
	if m != nil {
		return m.Goals
	}
	return ""
}

func (m *GoalFiltersRequest) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *GoalFiltersRequest) GetTeamId() string {
	if m != nil {
		return m.TeamId
	}
	return ""
}

func (m *GoalFiltersRequest) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *GoalFiltersRequest) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *GoalFiltersRequest) GetSortParameter() string {
	if m != nil {
		return m.SortParameter
	}
	return ""
}

func (m *GoalFiltersRequest) GetSortDirection() string {
	if m != nil {
		return m.SortDirection
	}
	return ""
}

type GoalFiltersResponse struct {
	Data    *ArrData `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	Code    int64    `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Message string   `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *GoalFiltersResponse) Reset()                    { *m = GoalFiltersResponse{} }
func (m *GoalFiltersResponse) String() string            { return proto.CompactTextString(m) }
func (*GoalFiltersResponse) ProtoMessage()               {}
func (*GoalFiltersResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{33} }

func (m *GoalFiltersResponse) GetData() *ArrData {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *GoalFiltersResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *GoalFiltersResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type CreatePlanFilterRequest struct {
	Filter *PlanFilter `protobuf:"bytes,1,opt,name=filter" json:"filter,omitempty"`
	OrgId  string      `protobuf:"bytes,11,opt,name=org_id,json=orgId" json:"org_id,omitempty"`
	TeamId string      `protobuf:"bytes,12,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
	Limit  int64       `protobuf:"varint,13,opt,name=limit" json:"limit,omitempty"`
	Offset int64       `protobuf:"varint,14,opt,name=offset" json:"offset,omitempty"`
}

func (m *CreatePlanFilterRequest) Reset()                    { *m = CreatePlanFilterRequest{} }
func (m *CreatePlanFilterRequest) String() string            { return proto.CompactTextString(m) }
func (*CreatePlanFilterRequest) ProtoMessage()               {}
func (*CreatePlanFilterRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{34} }

func (m *CreatePlanFilterRequest) GetFilter() *PlanFilter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *CreatePlanFilterRequest) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *CreatePlanFilterRequest) GetTeamId() string {
	if m != nil {
		return m.TeamId
	}
	return ""
}

func (m *CreatePlanFilterRequest) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *CreatePlanFilterRequest) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

type CreatePlanFilterResponse struct {
	Filter  *PlanFilter `protobuf:"bytes,1,opt,name=filter" json:"filter,omitempty"`
	Code    int64       `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Message string      `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *CreatePlanFilterResponse) Reset()                    { *m = CreatePlanFilterResponse{} }
func (m *CreatePlanFilterResponse) String() string            { return proto.CompactTextString(m) }
func (*CreatePlanFilterResponse) ProtoMessage()               {}
func (*CreatePlanFilterResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{35} }

func (m *CreatePlanFilterResponse) GetFilter() *PlanFilter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *CreatePlanFilterResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *CreatePlanFilterResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type SharePlanRequest struct {
	Plans  []*Plan                   `protobuf:"bytes,1,rep,name=plans" json:"plans,omitempty"`
	Users  []*go_micro_srv_user.User `protobuf:"bytes,2,rep,name=users" json:"users,omitempty"`
	UserId string                    `protobuf:"bytes,3,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	OrgId  string                    `protobuf:"bytes,4,opt,name=org_id,json=orgId" json:"org_id,omitempty"`
	TeamId string                    `protobuf:"bytes,5,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
}

func (m *SharePlanRequest) Reset()                    { *m = SharePlanRequest{} }
func (m *SharePlanRequest) String() string            { return proto.CompactTextString(m) }
func (*SharePlanRequest) ProtoMessage()               {}
func (*SharePlanRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{36} }

func (m *SharePlanRequest) GetPlans() []*Plan {
	if m != nil {
		return m.Plans
	}
	return nil
}

func (m *SharePlanRequest) GetUsers() []*go_micro_srv_user.User {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *SharePlanRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *SharePlanRequest) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *SharePlanRequest) GetTeamId() string {
	if m != nil {
		return m.TeamId
	}
	return ""
}

type SharePlanResponse struct {
	Code    int64  `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
}

func (m *SharePlanResponse) Reset()                    { *m = SharePlanResponse{} }
func (m *SharePlanResponse) String() string            { return proto.CompactTextString(m) }
func (*SharePlanResponse) ProtoMessage()               {}
func (*SharePlanResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{37} }

func (m *SharePlanResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *SharePlanResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type AutocompleteSearchRequest struct {
	Title         string `protobuf:"bytes,1,opt,name=title" json:"title,omitempty"`
	SortParameter string `protobuf:"bytes,2,opt,name=sort_parameter,json=sortParameter" json:"sort_parameter,omitempty"`
	SortDirection string `protobuf:"bytes,3,opt,name=sort_direction,json=sortDirection" json:"sort_direction,omitempty"`
}

func (m *AutocompleteSearchRequest) Reset()                    { *m = AutocompleteSearchRequest{} }
func (m *AutocompleteSearchRequest) String() string            { return proto.CompactTextString(m) }
func (*AutocompleteSearchRequest) ProtoMessage()               {}
func (*AutocompleteSearchRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{38} }

func (m *AutocompleteSearchRequest) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *AutocompleteSearchRequest) GetSortParameter() string {
	if m != nil {
		return m.SortParameter
	}
	return ""
}

func (m *AutocompleteSearchRequest) GetSortDirection() string {
	if m != nil {
		return m.SortDirection
	}
	return ""
}

type AutocompleteSearchResponse struct {
	Data    *AutocompleteSearchResponse_Data `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	Code    int64                            `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Message string                           `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *AutocompleteSearchResponse) Reset()                    { *m = AutocompleteSearchResponse{} }
func (m *AutocompleteSearchResponse) String() string            { return proto.CompactTextString(m) }
func (*AutocompleteSearchResponse) ProtoMessage()               {}
func (*AutocompleteSearchResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{39} }

func (m *AutocompleteSearchResponse) GetData() *AutocompleteSearchResponse_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *AutocompleteSearchResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *AutocompleteSearchResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type AutocompleteSearchResponse_Data struct {
	Response []*go_micro_srv_static.AutocompleteResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *AutocompleteSearchResponse_Data) Reset()         { *m = AutocompleteSearchResponse_Data{} }
func (m *AutocompleteSearchResponse_Data) String() string { return proto.CompactTextString(m) }
func (*AutocompleteSearchResponse_Data) ProtoMessage()    {}
func (*AutocompleteSearchResponse_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{39, 0}
}

func (m *AutocompleteSearchResponse_Data) GetResponse() []*go_micro_srv_static.AutocompleteResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

type Plan struct {
	Id                 string                            `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Name               string                            `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	OrgId              string                            `protobuf:"bytes,30,opt,name=org_id,json=orgId" json:"org_id,omitempty"`
	Pic                string                            `protobuf:"bytes,3,opt,name=pic" json:"pic,omitempty"`
	Description        string                            `protobuf:"bytes,4,opt,name=description" json:"description,omitempty"`
	Created            int64                             `protobuf:"varint,5,opt,name=created" json:"created,omitempty"`
	Updated            int64                             `protobuf:"varint,6,opt,name=updated" json:"updated,omitempty"`
	Users              []*go_micro_srv_user.User         `protobuf:"bytes,7,rep,name=users" json:"users,omitempty"`
	Goals              []*go_micro_srv_behaviour.Goal    `protobuf:"bytes,8,rep,name=goals" json:"goals,omitempty"`
	Duration           string                            `protobuf:"bytes,9,opt,name=duration" json:"duration,omitempty"`
	Start              int64                             `protobuf:"varint,10,opt,name=start" json:"start,omitempty"`
	End                int64                             `protobuf:"varint,11,opt,name=end" json:"end,omitempty"`
	EndTimeUnspecified bool                              `protobuf:"varint,12,opt,name=endTimeUnspecified" json:"endTimeUnspecified,omitempty"`
	Recurrence         []*go_micro_srv_static.Recurrence `protobuf:"bytes,13,rep,name=recurrence" json:"recurrence,omitempty"`
	Creator            *go_micro_srv_user.User           `protobuf:"bytes,14,opt,name=creator" json:"creator,omitempty"`
	// a user that belongs to a team
	Collaborators []*go_micro_srv_user.User                 `protobuf:"bytes,15,rep,name=collaborators" json:"collaborators,omitempty"`
	Shares        []*go_micro_srv_user.User                 `protobuf:"bytes,16,rep,name=shares" json:"shares,omitempty"`
	Days          map[string]*go_micro_srv_static2.DayItems `protobuf:"bytes,17,rep,name=days" json:"days,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	ItemsCount    int64                                     `protobuf:"varint,18,opt,name=items_count,json=itemsCount" json:"items_count,omitempty"`
	IsTemplate    bool                                      `protobuf:"varint,19,opt,name=isTemplate" json:"isTemplate,omitempty"`
	TemplateId    string                                    `protobuf:"bytes,20,opt,name=templateId" json:"templateId,omitempty"`
	Status        StatusEnum                                `protobuf:"varint,21,opt,name=status,enum=go.micro.srv.plan.StatusEnum" json:"status,omitempty"`
	Setting       *go_micro_srv_static.Setting              `protobuf:"bytes,22,opt,name=setting" json:"setting,omitempty"`
	Tags          []string                                  `protobuf:"bytes,23,rep,name=tags" json:"tags,omitempty"`
	Summary       string                                    `protobuf:"bytes,24,opt,name=summary" json:"summary,omitempty"`
}

func (m *Plan) Reset()                    { *m = Plan{} }
func (m *Plan) String() string            { return proto.CompactTextString(m) }
func (*Plan) ProtoMessage()               {}
func (*Plan) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{40} }

func (m *Plan) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Plan) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Plan) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *Plan) GetPic() string {
	if m != nil {
		return m.Pic
	}
	return ""
}

func (m *Plan) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Plan) GetCreated() int64 {
	if m != nil {
		return m.Created
	}
	return 0
}

func (m *Plan) GetUpdated() int64 {
	if m != nil {
		return m.Updated
	}
	return 0
}

func (m *Plan) GetUsers() []*go_micro_srv_user.User {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *Plan) GetGoals() []*go_micro_srv_behaviour.Goal {
	if m != nil {
		return m.Goals
	}
	return nil
}

func (m *Plan) GetDuration() string {
	if m != nil {
		return m.Duration
	}
	return ""
}

func (m *Plan) GetStart() int64 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *Plan) GetEnd() int64 {
	if m != nil {
		return m.End
	}
	return 0
}

func (m *Plan) GetEndTimeUnspecified() bool {
	if m != nil {
		return m.EndTimeUnspecified
	}
	return false
}

func (m *Plan) GetRecurrence() []*go_micro_srv_static.Recurrence {
	if m != nil {
		return m.Recurrence
	}
	return nil
}

func (m *Plan) GetCreator() *go_micro_srv_user.User {
	if m != nil {
		return m.Creator
	}
	return nil
}

func (m *Plan) GetCollaborators() []*go_micro_srv_user.User {
	if m != nil {
		return m.Collaborators
	}
	return nil
}

func (m *Plan) GetShares() []*go_micro_srv_user.User {
	if m != nil {
		return m.Shares
	}
	return nil
}

func (m *Plan) GetDays() map[string]*go_micro_srv_static2.DayItems {
	if m != nil {
		return m.Days
	}
	return nil
}

func (m *Plan) GetItemsCount() int64 {
	if m != nil {
		return m.ItemsCount
	}
	return 0
}

func (m *Plan) GetIsTemplate() bool {
	if m != nil {
		return m.IsTemplate
	}
	return false
}

func (m *Plan) GetTemplateId() string {
	if m != nil {
		return m.TemplateId
	}
	return ""
}

func (m *Plan) GetStatus() StatusEnum {
	if m != nil {
		return m.Status
	}
	return StatusEnum_StatusEnum_NONE
}

func (m *Plan) GetSetting() *go_micro_srv_static.Setting {
	if m != nil {
		return m.Setting
	}
	return nil
}

func (m *Plan) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *Plan) GetSummary() string {
	if m != nil {
		return m.Summary
	}
	return ""
}

type PlanItem struct {
	Item *PlanItem_Item          `protobuf:"bytes,1,opt,name=item" json:"item,omitempty"`
	Todo *go_micro_srv_todo.Todo `protobuf:"bytes,2,opt,name=todo" json:"todo,omitempty"`
}

func (m *PlanItem) Reset()                    { *m = PlanItem{} }
func (m *PlanItem) String() string            { return proto.CompactTextString(m) }
func (*PlanItem) ProtoMessage()               {}
func (*PlanItem) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{41} }

func (m *PlanItem) GetItem() *PlanItem_Item {
	if m != nil {
		return m.Item
	}
	return nil
}

func (m *PlanItem) GetTodo() *go_micro_srv_todo.Todo {
	if m != nil {
		return m.Todo
	}
	return nil
}

type PlanItem_Item struct {
	Id     string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Title  string `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
	PicUrl string `protobuf:"bytes,3,opt,name=pic_url,json=picUrl" json:"pic_url,omitempty"`
}

func (m *PlanItem_Item) Reset()                    { *m = PlanItem_Item{} }
func (m *PlanItem_Item) String() string            { return proto.CompactTextString(m) }
func (*PlanItem_Item) ProtoMessage()               {}
func (*PlanItem_Item) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{41, 0} }

func (m *PlanItem_Item) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *PlanItem_Item) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *PlanItem_Item) GetPicUrl() string {
	if m != nil {
		return m.PicUrl
	}
	return ""
}

type User struct {
	Id      string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Name    string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Created int64  `protobuf:"varint,3,opt,name=created" json:"created,omitempty"`
	Updated int64  `protobuf:"varint,4,opt,name=updated" json:"updated,omitempty"`
}

func (m *User) Reset()                    { *m = User{} }
func (m *User) String() string            { return proto.CompactTextString(m) }
func (*User) ProtoMessage()               {}
func (*User) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{42} }

func (m *User) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *User) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *User) GetCreated() int64 {
	if m != nil {
		return m.Created
	}
	return 0
}

func (m *User) GetUpdated() int64 {
	if m != nil {
		return m.Updated
	}
	return 0
}

type PlanFilter struct {
	DisplayName string `protobuf:"bytes,1,opt,name=displayName" json:"displayName,omitempty"`
	FilterSlug  string `protobuf:"bytes,2,opt,name=filterSlug" json:"filterSlug,omitempty"`
}

func (m *PlanFilter) Reset()                    { *m = PlanFilter{} }
func (m *PlanFilter) String() string            { return proto.CompactTextString(m) }
func (*PlanFilter) ProtoMessage()               {}
func (*PlanFilter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{43} }

func (m *PlanFilter) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *PlanFilter) GetFilterSlug() string {
	if m != nil {
		return m.FilterSlug
	}
	return ""
}

type SharePlanUser struct {
	Id       string                          `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Plan     *Plan                           `protobuf:"bytes,2,opt,name=plan" json:"plan,omitempty"`
	User     *go_micro_srv_user.User         `protobuf:"bytes,3,opt,name=user" json:"user,omitempty"`
	Status   go_micro_srv_static.ShareStatus `protobuf:"varint,4,opt,name=status,enum=go.micro.srv.static.ShareStatus" json:"status,omitempty"`
	Updated  int64                           `protobuf:"varint,5,opt,name=updated" json:"updated,omitempty"`
	SharedBy *go_micro_srv_user.User         `protobuf:"bytes,6,opt,name=shared_by,json=sharedBy" json:"shared_by,omitempty"`
	Created  int64                           `protobuf:"varint,7,opt,name=created" json:"created,omitempty"`
}

func (m *SharePlanUser) Reset()                    { *m = SharePlanUser{} }
func (m *SharePlanUser) String() string            { return proto.CompactTextString(m) }
func (*SharePlanUser) ProtoMessage()               {}
func (*SharePlanUser) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{44} }

func (m *SharePlanUser) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *SharePlanUser) GetPlan() *Plan {
	if m != nil {
		return m.Plan
	}
	return nil
}

func (m *SharePlanUser) GetUser() *go_micro_srv_user.User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *SharePlanUser) GetStatus() go_micro_srv_static.ShareStatus {
	if m != nil {
		return m.Status
	}
	return go_micro_srv_static.ShareStatus_ShareStatus_NONE
}

func (m *SharePlanUser) GetUpdated() int64 {
	if m != nil {
		return m.Updated
	}
	return 0
}

func (m *SharePlanUser) GetSharedBy() *go_micro_srv_user.User {
	if m != nil {
		return m.SharedBy
	}
	return nil
}

func (m *SharePlanUser) GetCreated() int64 {
	if m != nil {
		return m.Created
	}
	return 0
}

type GetTopTagsRequest struct {
	OrgId string `protobuf:"bytes,1,opt,name=org_id,json=orgId" json:"org_id,omitempty"`
	N     int64  `protobuf:"varint,2,opt,name=n" json:"n,omitempty"`
}

func (m *GetTopTagsRequest) Reset()                    { *m = GetTopTagsRequest{} }
func (m *GetTopTagsRequest) String() string            { return proto.CompactTextString(m) }
func (*GetTopTagsRequest) ProtoMessage()               {}
func (*GetTopTagsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{45} }

func (m *GetTopTagsRequest) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *GetTopTagsRequest) GetN() int64 {
	if m != nil {
		return m.N
	}
	return 0
}

type GetTopTagsResponse struct {
	Data    *GetTopTagsResponse_Data `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	Code    int64                    `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Message string                   `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *GetTopTagsResponse) Reset()                    { *m = GetTopTagsResponse{} }
func (m *GetTopTagsResponse) String() string            { return proto.CompactTextString(m) }
func (*GetTopTagsResponse) ProtoMessage()               {}
func (*GetTopTagsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{46} }

func (m *GetTopTagsResponse) GetData() *GetTopTagsResponse_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *GetTopTagsResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *GetTopTagsResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type GetTopTagsResponse_Data struct {
	Tags []string `protobuf:"bytes,1,rep,name=tags" json:"tags,omitempty"`
}

func (m *GetTopTagsResponse_Data) Reset()                    { *m = GetTopTagsResponse_Data{} }
func (m *GetTopTagsResponse_Data) String() string            { return proto.CompactTextString(m) }
func (*GetTopTagsResponse_Data) ProtoMessage()               {}
func (*GetTopTagsResponse_Data) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{46, 0} }

func (m *GetTopTagsResponse_Data) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

type AutocompleteTagsRequest struct {
	OrgId string `protobuf:"bytes,1,opt,name=org_id,json=orgId" json:"org_id,omitempty"`
	Name  string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (m *AutocompleteTagsRequest) Reset()                    { *m = AutocompleteTagsRequest{} }
func (m *AutocompleteTagsRequest) String() string            { return proto.CompactTextString(m) }
func (*AutocompleteTagsRequest) ProtoMessage()               {}
func (*AutocompleteTagsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{47} }

func (m *AutocompleteTagsRequest) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *AutocompleteTagsRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type AutocompleteTagsResponse struct {
	Data    *AutocompleteTagsResponse_Data `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	Code    int64                          `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Message string                         `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *AutocompleteTagsResponse) Reset()                    { *m = AutocompleteTagsResponse{} }
func (m *AutocompleteTagsResponse) String() string            { return proto.CompactTextString(m) }
func (*AutocompleteTagsResponse) ProtoMessage()               {}
func (*AutocompleteTagsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{48} }

func (m *AutocompleteTagsResponse) GetData() *AutocompleteTagsResponse_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *AutocompleteTagsResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *AutocompleteTagsResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type AutocompleteTagsResponse_Data struct {
	Tags []string `protobuf:"bytes,1,rep,name=tags" json:"tags,omitempty"`
}

func (m *AutocompleteTagsResponse_Data) Reset()         { *m = AutocompleteTagsResponse_Data{} }
func (m *AutocompleteTagsResponse_Data) String() string { return proto.CompactTextString(m) }
func (*AutocompleteTagsResponse_Data) ProtoMessage()    {}
func (*AutocompleteTagsResponse_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{48, 0}
}

func (m *AutocompleteTagsResponse_Data) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

type WarmupCacheRequest struct {
}

func (m *WarmupCacheRequest) Reset()                    { *m = WarmupCacheRequest{} }
func (m *WarmupCacheRequest) String() string            { return proto.CompactTextString(m) }
func (*WarmupCacheRequest) ProtoMessage()               {}
func (*WarmupCacheRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{49} }

type WarmupCacheResponse struct {
}

func (m *WarmupCacheResponse) Reset()                    { *m = WarmupCacheResponse{} }
func (m *WarmupCacheResponse) String() string            { return proto.CompactTextString(m) }
func (*WarmupCacheResponse) ProtoMessage()               {}
func (*WarmupCacheResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{50} }

func init() {
	proto.RegisterType((*Data)(nil), "go.micro.srv.plan.Data")
	proto.RegisterType((*ArrData)(nil), "go.micro.srv.plan.ArrData")
	proto.RegisterType((*AllRequest)(nil), "go.micro.srv.plan.AllRequest")
	proto.RegisterType((*AllResponse)(nil), "go.micro.srv.plan.AllResponse")
	proto.RegisterType((*CreateRequest)(nil), "go.micro.srv.plan.CreateRequest")
	proto.RegisterType((*CreateResponse)(nil), "go.micro.srv.plan.CreateResponse")
	proto.RegisterType((*UpdateRequest)(nil), "go.micro.srv.plan.UpdateRequest")
	proto.RegisterType((*UpdateResponse)(nil), "go.micro.srv.plan.UpdateResponse")
	proto.RegisterType((*ReadRequest)(nil), "go.micro.srv.plan.ReadRequest")
	proto.RegisterType((*ReadResponse)(nil), "go.micro.srv.plan.ReadResponse")
	proto.RegisterType((*DeleteRequest)(nil), "go.micro.srv.plan.DeleteRequest")
	proto.RegisterType((*DeleteResponse)(nil), "go.micro.srv.plan.DeleteResponse")
	proto.RegisterType((*SearchRequest)(nil), "go.micro.srv.plan.SearchRequest")
	proto.RegisterType((*SearchResponse)(nil), "go.micro.srv.plan.SearchResponse")
	proto.RegisterType((*TemplatesRequest)(nil), "go.micro.srv.plan.TemplatesRequest")
	proto.RegisterType((*TemplatesResponse)(nil), "go.micro.srv.plan.TemplatesResponse")
	proto.RegisterType((*DraftsRequest)(nil), "go.micro.srv.plan.DraftsRequest")
	proto.RegisterType((*DraftsResponse)(nil), "go.micro.srv.plan.DraftsResponse")
	proto.RegisterType((*ByCreatorRequest)(nil), "go.micro.srv.plan.ByCreatorRequest")
	proto.RegisterType((*ByCreatorResponse)(nil), "go.micro.srv.plan.ByCreatorResponse")
	proto.RegisterType((*FiltersRequest)(nil), "go.micro.srv.plan.FiltersRequest")
	proto.RegisterType((*FiltersResponse)(nil), "go.micro.srv.plan.FiltersResponse")
	proto.RegisterType((*FiltersResponse_Data)(nil), "go.micro.srv.plan.FiltersResponse.Data")
	proto.RegisterType((*TopFiltersRequest)(nil), "go.micro.srv.plan.TopFiltersRequest")
	proto.RegisterType((*TopFiltersResponse)(nil), "go.micro.srv.plan.TopFiltersResponse")
	proto.RegisterType((*TimeFiltersRequest)(nil), "go.micro.srv.plan.TimeFiltersRequest")
	proto.RegisterType((*TimeFiltersResponse)(nil), "go.micro.srv.plan.TimeFiltersResponse")
	proto.RegisterType((*UseFiltersRequest)(nil), "go.micro.srv.plan.UseFiltersRequest")
	proto.RegisterType((*UseFiltersResponse)(nil), "go.micro.srv.plan.UseFiltersResponse")
	proto.RegisterType((*SuccessFiltersRequest)(nil), "go.micro.srv.plan.SuccessFiltersRequest")
	proto.RegisterType((*SuccessFiltersResponse)(nil), "go.micro.srv.plan.SuccessFiltersResponse")
	proto.RegisterType((*ConditionFiltersRequest)(nil), "go.micro.srv.plan.ConditionFiltersRequest")
	proto.RegisterType((*ConditionFiltersResponse)(nil), "go.micro.srv.plan.ConditionFiltersResponse")
	proto.RegisterType((*GoalFiltersRequest)(nil), "go.micro.srv.plan.GoalFiltersRequest")
	proto.RegisterType((*GoalFiltersResponse)(nil), "go.micro.srv.plan.GoalFiltersResponse")
	proto.RegisterType((*CreatePlanFilterRequest)(nil), "go.micro.srv.plan.CreatePlanFilterRequest")
	proto.RegisterType((*CreatePlanFilterResponse)(nil), "go.micro.srv.plan.CreatePlanFilterResponse")
	proto.RegisterType((*SharePlanRequest)(nil), "go.micro.srv.plan.SharePlanRequest")
	proto.RegisterType((*SharePlanResponse)(nil), "go.micro.srv.plan.SharePlanResponse")
	proto.RegisterType((*AutocompleteSearchRequest)(nil), "go.micro.srv.plan.AutocompleteSearchRequest")
	proto.RegisterType((*AutocompleteSearchResponse)(nil), "go.micro.srv.plan.AutocompleteSearchResponse")
	proto.RegisterType((*AutocompleteSearchResponse_Data)(nil), "go.micro.srv.plan.AutocompleteSearchResponse.Data")
	proto.RegisterType((*Plan)(nil), "go.micro.srv.plan.Plan")
	proto.RegisterType((*PlanItem)(nil), "go.micro.srv.plan.PlanItem")
	proto.RegisterType((*PlanItem_Item)(nil), "go.micro.srv.plan.PlanItem.Item")
	proto.RegisterType((*User)(nil), "go.micro.srv.plan.User")
	proto.RegisterType((*PlanFilter)(nil), "go.micro.srv.plan.PlanFilter")
	proto.RegisterType((*SharePlanUser)(nil), "go.micro.srv.plan.SharePlanUser")
	proto.RegisterType((*GetTopTagsRequest)(nil), "go.micro.srv.plan.GetTopTagsRequest")
	proto.RegisterType((*GetTopTagsResponse)(nil), "go.micro.srv.plan.GetTopTagsResponse")
	proto.RegisterType((*GetTopTagsResponse_Data)(nil), "go.micro.srv.plan.GetTopTagsResponse.Data")
	proto.RegisterType((*AutocompleteTagsRequest)(nil), "go.micro.srv.plan.AutocompleteTagsRequest")
	proto.RegisterType((*AutocompleteTagsResponse)(nil), "go.micro.srv.plan.AutocompleteTagsResponse")
	proto.RegisterType((*AutocompleteTagsResponse_Data)(nil), "go.micro.srv.plan.AutocompleteTagsResponse.Data")
	proto.RegisterType((*WarmupCacheRequest)(nil), "go.micro.srv.plan.WarmupCacheRequest")
	proto.RegisterType((*WarmupCacheResponse)(nil), "go.micro.srv.plan.WarmupCacheResponse")
	proto.RegisterEnum("go.micro.srv.plan.StatusEnum", StatusEnum_name, StatusEnum_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for PlanService service

type PlanServiceClient interface {
	All(ctx context.Context, in *AllRequest, opts ...client.CallOption) (*AllResponse, error)
	Create(ctx context.Context, in *CreateRequest, opts ...client.CallOption) (*CreateResponse, error)
	Update(ctx context.Context, in *UpdateRequest, opts ...client.CallOption) (*UpdateResponse, error)
	Read(ctx context.Context, in *ReadRequest, opts ...client.CallOption) (*ReadResponse, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...client.CallOption) (*DeleteResponse, error)
	Search(ctx context.Context, in *SearchRequest, opts ...client.CallOption) (*SearchResponse, error)
	Templates(ctx context.Context, in *TemplatesRequest, opts ...client.CallOption) (*TemplatesResponse, error)
	Drafts(ctx context.Context, in *DraftsRequest, opts ...client.CallOption) (*DraftsResponse, error)
	ByCreator(ctx context.Context, in *ByCreatorRequest, opts ...client.CallOption) (*ByCreatorResponse, error)
	Filters(ctx context.Context, in *FiltersRequest, opts ...client.CallOption) (*FiltersResponse, error)
	TopFilters(ctx context.Context, in *TopFiltersRequest, opts ...client.CallOption) (*TopFiltersResponse, error)
	TimeFilters(ctx context.Context, in *TimeFiltersRequest, opts ...client.CallOption) (*TimeFiltersResponse, error)
	UseFilters(ctx context.Context, in *UseFiltersRequest, opts ...client.CallOption) (*UseFiltersResponse, error)
	SuccessFilters(ctx context.Context, in *SuccessFiltersRequest, opts ...client.CallOption) (*SuccessFiltersResponse, error)
	ConditionFilters(ctx context.Context, in *ConditionFiltersRequest, opts ...client.CallOption) (*ConditionFiltersResponse, error)
	GoalFilters(ctx context.Context, in *GoalFiltersRequest, opts ...client.CallOption) (*GoalFiltersResponse, error)
	CreatePlanFilter(ctx context.Context, in *CreatePlanFilterRequest, opts ...client.CallOption) (*CreatePlanFilterResponse, error)
	SharePlan(ctx context.Context, in *SharePlanRequest, opts ...client.CallOption) (*SharePlanResponse, error)
	AutocompleteSearch(ctx context.Context, in *AutocompleteSearchRequest, opts ...client.CallOption) (*AutocompleteSearchResponse, error)
	GetTopTags(ctx context.Context, in *GetTopTagsRequest, opts ...client.CallOption) (*GetTopTagsResponse, error)
	AutocompleteTags(ctx context.Context, in *AutocompleteTagsRequest, opts ...client.CallOption) (*AutocompleteTagsResponse, error)
	WarmupCache(ctx context.Context, in *WarmupCacheRequest, opts ...client.CallOption) (*WarmupCacheResponse, error)
}

type planServiceClient struct {
	c           client.Client
	serviceName string
}

func NewPlanServiceClient(serviceName string, c client.Client) PlanServiceClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "go.micro.srv.plan"
	}
	return &planServiceClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *planServiceClient) All(ctx context.Context, in *AllRequest, opts ...client.CallOption) (*AllResponse, error) {
	req := c.c.NewRequest(c.serviceName, "PlanService.All", in)
	out := new(AllResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *planServiceClient) Create(ctx context.Context, in *CreateRequest, opts ...client.CallOption) (*CreateResponse, error) {
	req := c.c.NewRequest(c.serviceName, "PlanService.Create", in)
	out := new(CreateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *planServiceClient) Update(ctx context.Context, in *UpdateRequest, opts ...client.CallOption) (*UpdateResponse, error) {
	req := c.c.NewRequest(c.serviceName, "PlanService.Update", in)
	out := new(UpdateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *planServiceClient) Read(ctx context.Context, in *ReadRequest, opts ...client.CallOption) (*ReadResponse, error) {
	req := c.c.NewRequest(c.serviceName, "PlanService.Read", in)
	out := new(ReadResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *planServiceClient) Delete(ctx context.Context, in *DeleteRequest, opts ...client.CallOption) (*DeleteResponse, error) {
	req := c.c.NewRequest(c.serviceName, "PlanService.Delete", in)
	out := new(DeleteResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *planServiceClient) Search(ctx context.Context, in *SearchRequest, opts ...client.CallOption) (*SearchResponse, error) {
	req := c.c.NewRequest(c.serviceName, "PlanService.Search", in)
	out := new(SearchResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *planServiceClient) Templates(ctx context.Context, in *TemplatesRequest, opts ...client.CallOption) (*TemplatesResponse, error) {
	req := c.c.NewRequest(c.serviceName, "PlanService.Templates", in)
	out := new(TemplatesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *planServiceClient) Drafts(ctx context.Context, in *DraftsRequest, opts ...client.CallOption) (*DraftsResponse, error) {
	req := c.c.NewRequest(c.serviceName, "PlanService.Drafts", in)
	out := new(DraftsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *planServiceClient) ByCreator(ctx context.Context, in *ByCreatorRequest, opts ...client.CallOption) (*ByCreatorResponse, error) {
	req := c.c.NewRequest(c.serviceName, "PlanService.ByCreator", in)
	out := new(ByCreatorResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *planServiceClient) Filters(ctx context.Context, in *FiltersRequest, opts ...client.CallOption) (*FiltersResponse, error) {
	req := c.c.NewRequest(c.serviceName, "PlanService.Filters", in)
	out := new(FiltersResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *planServiceClient) TopFilters(ctx context.Context, in *TopFiltersRequest, opts ...client.CallOption) (*TopFiltersResponse, error) {
	req := c.c.NewRequest(c.serviceName, "PlanService.TopFilters", in)
	out := new(TopFiltersResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *planServiceClient) TimeFilters(ctx context.Context, in *TimeFiltersRequest, opts ...client.CallOption) (*TimeFiltersResponse, error) {
	req := c.c.NewRequest(c.serviceName, "PlanService.TimeFilters", in)
	out := new(TimeFiltersResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *planServiceClient) UseFilters(ctx context.Context, in *UseFiltersRequest, opts ...client.CallOption) (*UseFiltersResponse, error) {
	req := c.c.NewRequest(c.serviceName, "PlanService.UseFilters", in)
	out := new(UseFiltersResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *planServiceClient) SuccessFilters(ctx context.Context, in *SuccessFiltersRequest, opts ...client.CallOption) (*SuccessFiltersResponse, error) {
	req := c.c.NewRequest(c.serviceName, "PlanService.SuccessFilters", in)
	out := new(SuccessFiltersResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *planServiceClient) ConditionFilters(ctx context.Context, in *ConditionFiltersRequest, opts ...client.CallOption) (*ConditionFiltersResponse, error) {
	req := c.c.NewRequest(c.serviceName, "PlanService.ConditionFilters", in)
	out := new(ConditionFiltersResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *planServiceClient) GoalFilters(ctx context.Context, in *GoalFiltersRequest, opts ...client.CallOption) (*GoalFiltersResponse, error) {
	req := c.c.NewRequest(c.serviceName, "PlanService.GoalFilters", in)
	out := new(GoalFiltersResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *planServiceClient) CreatePlanFilter(ctx context.Context, in *CreatePlanFilterRequest, opts ...client.CallOption) (*CreatePlanFilterResponse, error) {
	req := c.c.NewRequest(c.serviceName, "PlanService.CreatePlanFilter", in)
	out := new(CreatePlanFilterResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *planServiceClient) SharePlan(ctx context.Context, in *SharePlanRequest, opts ...client.CallOption) (*SharePlanResponse, error) {
	req := c.c.NewRequest(c.serviceName, "PlanService.SharePlan", in)
	out := new(SharePlanResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *planServiceClient) AutocompleteSearch(ctx context.Context, in *AutocompleteSearchRequest, opts ...client.CallOption) (*AutocompleteSearchResponse, error) {
	req := c.c.NewRequest(c.serviceName, "PlanService.AutocompleteSearch", in)
	out := new(AutocompleteSearchResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *planServiceClient) GetTopTags(ctx context.Context, in *GetTopTagsRequest, opts ...client.CallOption) (*GetTopTagsResponse, error) {
	req := c.c.NewRequest(c.serviceName, "PlanService.GetTopTags", in)
	out := new(GetTopTagsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *planServiceClient) AutocompleteTags(ctx context.Context, in *AutocompleteTagsRequest, opts ...client.CallOption) (*AutocompleteTagsResponse, error) {
	req := c.c.NewRequest(c.serviceName, "PlanService.AutocompleteTags", in)
	out := new(AutocompleteTagsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *planServiceClient) WarmupCache(ctx context.Context, in *WarmupCacheRequest, opts ...client.CallOption) (*WarmupCacheResponse, error) {
	req := c.c.NewRequest(c.serviceName, "PlanService.WarmupCache", in)
	out := new(WarmupCacheResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PlanService service

type PlanServiceHandler interface {
	All(context.Context, *AllRequest, *AllResponse) error
	Create(context.Context, *CreateRequest, *CreateResponse) error
	Update(context.Context, *UpdateRequest, *UpdateResponse) error
	Read(context.Context, *ReadRequest, *ReadResponse) error
	Delete(context.Context, *DeleteRequest, *DeleteResponse) error
	Search(context.Context, *SearchRequest, *SearchResponse) error
	Templates(context.Context, *TemplatesRequest, *TemplatesResponse) error
	Drafts(context.Context, *DraftsRequest, *DraftsResponse) error
	ByCreator(context.Context, *ByCreatorRequest, *ByCreatorResponse) error
	Filters(context.Context, *FiltersRequest, *FiltersResponse) error
	TopFilters(context.Context, *TopFiltersRequest, *TopFiltersResponse) error
	TimeFilters(context.Context, *TimeFiltersRequest, *TimeFiltersResponse) error
	UseFilters(context.Context, *UseFiltersRequest, *UseFiltersResponse) error
	SuccessFilters(context.Context, *SuccessFiltersRequest, *SuccessFiltersResponse) error
	ConditionFilters(context.Context, *ConditionFiltersRequest, *ConditionFiltersResponse) error
	GoalFilters(context.Context, *GoalFiltersRequest, *GoalFiltersResponse) error
	CreatePlanFilter(context.Context, *CreatePlanFilterRequest, *CreatePlanFilterResponse) error
	SharePlan(context.Context, *SharePlanRequest, *SharePlanResponse) error
	AutocompleteSearch(context.Context, *AutocompleteSearchRequest, *AutocompleteSearchResponse) error
	GetTopTags(context.Context, *GetTopTagsRequest, *GetTopTagsResponse) error
	AutocompleteTags(context.Context, *AutocompleteTagsRequest, *AutocompleteTagsResponse) error
	WarmupCache(context.Context, *WarmupCacheRequest, *WarmupCacheResponse) error
}

func RegisterPlanServiceHandler(s server.Server, hdlr PlanServiceHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&PlanService{hdlr}, opts...))
}

type PlanService struct {
	PlanServiceHandler
}

func (h *PlanService) All(ctx context.Context, in *AllRequest, out *AllResponse) error {
	return h.PlanServiceHandler.All(ctx, in, out)
}

func (h *PlanService) Create(ctx context.Context, in *CreateRequest, out *CreateResponse) error {
	return h.PlanServiceHandler.Create(ctx, in, out)
}

func (h *PlanService) Update(ctx context.Context, in *UpdateRequest, out *UpdateResponse) error {
	return h.PlanServiceHandler.Update(ctx, in, out)
}

func (h *PlanService) Read(ctx context.Context, in *ReadRequest, out *ReadResponse) error {
	return h.PlanServiceHandler.Read(ctx, in, out)
}

func (h *PlanService) Delete(ctx context.Context, in *DeleteRequest, out *DeleteResponse) error {
	return h.PlanServiceHandler.Delete(ctx, in, out)
}

func (h *PlanService) Search(ctx context.Context, in *SearchRequest, out *SearchResponse) error {
	return h.PlanServiceHandler.Search(ctx, in, out)
}

func (h *PlanService) Templates(ctx context.Context, in *TemplatesRequest, out *TemplatesResponse) error {
	return h.PlanServiceHandler.Templates(ctx, in, out)
}

func (h *PlanService) Drafts(ctx context.Context, in *DraftsRequest, out *DraftsResponse) error {
	return h.PlanServiceHandler.Drafts(ctx, in, out)
}

func (h *PlanService) ByCreator(ctx context.Context, in *ByCreatorRequest, out *ByCreatorResponse) error {
	return h.PlanServiceHandler.ByCreator(ctx, in, out)
}

func (h *PlanService) Filters(ctx context.Context, in *FiltersRequest, out *FiltersResponse) error {
	return h.PlanServiceHandler.Filters(ctx, in, out)
}

func (h *PlanService) TopFilters(ctx context.Context, in *TopFiltersRequest, out *TopFiltersResponse) error {
	return h.PlanServiceHandler.TopFilters(ctx, in, out)
}

func (h *PlanService) TimeFilters(ctx context.Context, in *TimeFiltersRequest, out *TimeFiltersResponse) error {
	return h.PlanServiceHandler.TimeFilters(ctx, in, out)
}

func (h *PlanService) UseFilters(ctx context.Context, in *UseFiltersRequest, out *UseFiltersResponse) error {
	return h.PlanServiceHandler.UseFilters(ctx, in, out)
}

func (h *PlanService) SuccessFilters(ctx context.Context, in *SuccessFiltersRequest, out *SuccessFiltersResponse) error {
	return h.PlanServiceHandler.SuccessFilters(ctx, in, out)
}

func (h *PlanService) ConditionFilters(ctx context.Context, in *ConditionFiltersRequest, out *ConditionFiltersResponse) error {
	return h.PlanServiceHandler.ConditionFilters(ctx, in, out)
}

func (h *PlanService) GoalFilters(ctx context.Context, in *GoalFiltersRequest, out *GoalFiltersResponse) error {
	return h.PlanServiceHandler.GoalFilters(ctx, in, out)
}

func (h *PlanService) CreatePlanFilter(ctx context.Context, in *CreatePlanFilterRequest, out *CreatePlanFilterResponse) error {
	return h.PlanServiceHandler.CreatePlanFilter(ctx, in, out)
}

func (h *PlanService) SharePlan(ctx context.Context, in *SharePlanRequest, out *SharePlanResponse) error {
	return h.PlanServiceHandler.SharePlan(ctx, in, out)
}

func (h *PlanService) AutocompleteSearch(ctx context.Context, in *AutocompleteSearchRequest, out *AutocompleteSearchResponse) error {
	return h.PlanServiceHandler.AutocompleteSearch(ctx, in, out)
}

func (h *PlanService) GetTopTags(ctx context.Context, in *GetTopTagsRequest, out *GetTopTagsResponse) error {
	return h.PlanServiceHandler.GetTopTags(ctx, in, out)
}

func (h *PlanService) AutocompleteTags(ctx context.Context, in *AutocompleteTagsRequest, out *AutocompleteTagsResponse) error {
	return h.PlanServiceHandler.AutocompleteTags(ctx, in, out)
}

func (h *PlanService) WarmupCache(ctx context.Context, in *WarmupCacheRequest, out *WarmupCacheResponse) error {
	return h.PlanServiceHandler.WarmupCache(ctx, in, out)
}

func init() { proto.RegisterFile("server/plan-srv/proto/plan/plan.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 2130 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x5a, 0x4f, 0x6f, 0x1c, 0x49,
	0x15, 0x77, 0xcf, 0xf4, 0x78, 0xec, 0xe7, 0x78, 0x32, 0x2e, 0x27, 0x71, 0x67, 0xb4, 0x9b, 0x38,
	0x0d, 0x81, 0xec, 0x9a, 0x4c, 0x20, 0xc9, 0x42, 0x00, 0xb1, 0x2b, 0x27, 0x93, 0x2c, 0x96, 0xd8,
	0x24, 0x6a, 0xdb, 0x80, 0x84, 0xb4, 0x56, 0xa5, 0xbb, 0x3c, 0x69, 0xa5, 0xff, 0xcc, 0x56, 0xf5,
	0x58, 0xcc, 0x69, 0x4f, 0xdc, 0xf8, 0x0a, 0xf0, 0x01, 0x38, 0x70, 0xe2, 0x00, 0x42, 0xf0, 0x31,
	0xe0, 0xcc, 0x47, 0x40, 0x9c, 0xe0, 0x84, 0xea, 0x4f, 0xf7, 0x54, 0x4f, 0xd7, 0xfc, 0x71, 0x56,
	0x1e, 0x6d, 0x2e, 0xe3, 0xae, 0xea, 0x57, 0xd5, 0xbf, 0xf7, 0xab, 0xf7, 0x5e, 0xbd, 0x7a, 0x65,
	0xb8, 0xcd, 0x08, 0x3d, 0x23, 0xf4, 0xde, 0x20, 0xc2, 0xc9, 0x5d, 0x46, 0xcf, 0xee, 0x0d, 0x68,
	0x9a, 0xa5, 0xa2, 0x29, 0x7e, 0xba, 0xa2, 0x8d, 0xb6, 0xfa, 0x69, 0x37, 0x0e, 0x7d, 0x9a, 0x76,
	0x19, 0x3d, 0xeb, 0xf2, 0x17, 0x9d, 0x7c, 0xe4, 0x90, 0x11, 0xaa, 0x8d, 0xe4, 0x4d, 0xf1, 0x23,
	0x47, 0x16, 0x62, 0x59, 0x1a, 0xa4, 0x9a, 0x18, 0x6f, 0x8a, 0x1f, 0x25, 0xf6, 0x50, 0x89, 0xbd,
	0x22, 0xaf, 0xf1, 0x59, 0x98, 0x0e, 0xf5, 0x29, 0x8b, 0xbe, 0xf1, 0x93, 0x1a, 0xb5, 0xa7, 0x46,
	0xb1, 0x0c, 0x67, 0xa1, 0xaf, 0x0d, 0x91, 0x1d, 0xea, 0xcf, 0x3c, 0x61, 0x3f, 0x8d, 0xe3, 0x34,
	0x51, 0x7f, 0xa4, 0xb0, 0xfb, 0x00, 0xec, 0x1e, 0xce, 0x30, 0xda, 0x03, 0x9b, 0x6b, 0xeb, 0x58,
	0xbb, 0xd6, 0x9d, 0x8d, 0xfb, 0x3b, 0xdd, 0x0a, 0x0f, 0xdd, 0x97, 0x11, 0x4e, 0x3c, 0x21, 0xe4,
	0x3e, 0x82, 0xe6, 0x3e, 0xa5, 0x62, 0xdc, 0x5d, 0x68, 0xf0, 0x2e, 0xe6, 0x58, 0xbb, 0xf5, 0x59,
	0x03, 0xa5, 0x94, 0xfb, 0x67, 0x0b, 0x60, 0x3f, 0x8a, 0x3c, 0xf2, 0xc5, 0x90, 0xb0, 0x0c, 0x5d,
	0x85, 0xd5, 0x94, 0xf6, 0x4f, 0xc2, 0x40, 0x7c, 0x77, 0xdd, 0x6b, 0xa4, 0xb4, 0x7f, 0x10, 0xa0,
	0x1d, 0x68, 0x66, 0x04, 0xc7, 0xbc, 0xbf, 0x26, 0xfa, 0x57, 0x79, 0xf3, 0x20, 0x40, 0x57, 0xa0,
	0x11, 0x85, 0x71, 0x98, 0x39, 0xf5, 0x5d, 0xeb, 0x4e, 0xdd, 0x93, 0x0d, 0x74, 0x0d, 0x56, 0xd3,
	0xd3, 0x53, 0x46, 0x32, 0xc7, 0x16, 0xdd, 0xaa, 0x85, 0x6e, 0x43, 0x8b, 0xa5, 0x34, 0x3b, 0x19,
	0x60, 0x8a, 0x63, 0x92, 0x11, 0xea, 0x34, 0xc4, 0x6c, 0x9b, 0xbc, 0xf7, 0x65, 0xde, 0x59, 0x88,
	0x05, 0x21, 0x25, 0x7e, 0x16, 0xa6, 0x89, 0xb3, 0x3a, 0x16, 0xeb, 0xe5, 0x9d, 0xee, 0x1b, 0xd8,
	0x10, 0xc8, 0xd9, 0x20, 0x4d, 0x18, 0x41, 0x5d, 0xb0, 0x03, 0x9c, 0x61, 0x45, 0x58, 0xc7, 0xa0,
	0xb7, 0xa2, 0xc8, 0x13, 0x72, 0x08, 0x81, 0xed, 0xa7, 0x01, 0x11, 0x0a, 0xd5, 0x3d, 0xf1, 0x8c,
	0x1c, 0x68, 0xc6, 0x84, 0x31, 0xdc, 0x27, 0x42, 0xa1, 0x75, 0x2f, 0x6f, 0xba, 0xbf, 0xb1, 0x60,
	0xf3, 0x09, 0x25, 0x38, 0x23, 0x39, 0x55, 0xe7, 0x59, 0x20, 0x4e, 0x20, 0x37, 0x4d, 0x8d, 0x40,
	0xde, 0x3c, 0x08, 0x34, 0xc2, 0xeb, 0x53, 0x08, 0xb7, 0x75, 0xc2, 0xdd, 0x37, 0xd0, 0xca, 0x61,
	0x28, 0xbd, 0xf7, 0x4a, 0x7a, 0x9b, 0x70, 0x7c, 0x25, 0xa5, 0x8f, 0x07, 0xc1, 0xd7, 0x41, 0xe9,
	0x1c, 0xc6, 0xc5, 0x2b, 0xfd, 0x19, 0x6c, 0x78, 0x04, 0x07, 0xb9, 0xc6, 0x2d, 0xa8, 0x15, 0xde,
	0x50, 0x0b, 0x75, 0xec, 0xb5, 0x29, 0xd8, 0xeb, 0x25, 0xec, 0x21, 0x5c, 0x92, 0xd3, 0x5d, 0x3c,
	0xf2, 0x17, 0xb0, 0xd9, 0x23, 0x11, 0x19, 0xaf, 0xd6, 0x57, 0xc5, 0xfe, 0x31, 0xb4, 0xf2, 0x09,
	0x15, 0xfa, 0xf3, 0x01, 0xfa, 0x8f, 0x05, 0x9b, 0x87, 0x04, 0x53, 0xff, 0x75, 0x8e, 0x08, 0x81,
	0x9d, 0xe0, 0x98, 0x28, 0x4c, 0xe2, 0xf9, 0xbc, 0xa8, 0xc6, 0x31, 0xc7, 0x36, 0xc7, 0x9c, 0x46,
	0x29, 0xe6, 0x20, 0xb0, 0x4f, 0x69, 0x1a, 0x8b, 0x10, 0x52, 0xf7, 0xc4, 0x33, 0xe7, 0x25, 0x4b,
	0x9d, 0xa6, 0xe8, 0xa9, 0x65, 0xa9, 0x21, 0x2e, 0xad, 0x2d, 0x16, 0x97, 0xd6, 0x4d, 0x71, 0x29,
	0x81, 0x56, 0xae, 0xf4, 0x52, 0x42, 0xd3, 0xdf, 0x2d, 0x68, 0x1f, 0x91, 0x78, 0x10, 0xe1, 0x8c,
	0xb0, 0x77, 0x31, 0x90, 0x7f, 0x01, 0x5b, 0x1a, 0xfe, 0xa5, 0x70, 0xf6, 0x57, 0x0b, 0x36, 0x7b,
	0x14, 0x9f, 0x66, 0xef, 0x24, 0x61, 0x09, 0xb4, 0x72, 0xf0, 0x4b, 0x61, 0xeb, 0x9f, 0x16, 0xb4,
	0x1f, 0x8f, 0xc4, 0xbe, 0x93, 0xd2, 0x9c, 0x30, 0x2d, 0xba, 0x5b, 0x53, 0xa2, 0xfb, 0xc6, 0x14,
	0x26, 0x2f, 0x99, 0x99, 0xdc, 0x34, 0x33, 0xd9, 0xba, 0x58, 0xd3, 0xd3, 0x14, 0x5b, 0x0a, 0x99,
	0xbf, 0xb5, 0xa0, 0xf5, 0x2c, 0x8c, 0x32, 0x42, 0x0b, 0xdb, 0x2b, 0x18, 0xb0, 0xcc, 0x0c, 0xd4,
	0xe6, 0x30, 0x50, 0x5f, 0x8c, 0x01, 0xdb, 0xc4, 0xc0, 0xdf, 0x2c, 0xb8, 0x5c, 0xc0, 0x51, 0x04,
	0xfc, 0xb8, 0x44, 0xc0, 0xb7, 0x0d, 0x04, 0x4c, 0x8c, 0x78, 0xeb, 0x3d, 0xab, 0xf3, 0x89, 0x4a,
	0x77, 0x7f, 0x00, 0xcd, 0x53, 0x39, 0xa7, 0x4a, 0x5c, 0xdf, 0x9f, 0x92, 0x5b, 0xc8, 0x2f, 0x7b,
	0xb9, 0xb4, 0xbb, 0x0d, 0x5b, 0x47, 0xe9, 0xa0, 0x4c, 0xa8, 0x4b, 0x01, 0xe9, 0x9d, 0x4b, 0x59,
	0xd7, 0xff, 0x59, 0x80, 0x8e, 0xc2, 0x98, 0x4c, 0xac, 0xed, 0xfb, 0x00, 0x2c, 0xc3, 0x7c, 0x1d,
	0x70, 0x46, 0xd4, 0x02, 0xaf, 0x8b, 0x9e, 0x1e, 0xce, 0x08, 0xba, 0x0e, 0x6b, 0x24, 0x09, 0xe4,
	0x4b, 0xf9, 0x9d, 0x26, 0x49, 0x02, 0xf1, 0xea, 0x9c, 0x59, 0xd2, 0xd8, 0x8a, 0x1a, 0x66, 0x2b,
	0x5a, 0x9d, 0x63, 0x45, 0xcd, 0xc5, 0xac, 0x68, 0xcd, 0x64, 0x45, 0x0c, 0xb6, 0x4b, 0xba, 0x2f,
	0x85, 0xf1, 0x6d, 0xd8, 0x3a, 0x66, 0xa4, 0xba, 0xf4, 0x7a, 0xe7, 0x52, 0x80, 0xec, 0xc0, 0xd5,
	0xc3, 0xa1, 0xef, 0x13, 0xc6, 0x26, 0xc0, 0x9c, 0xc1, 0xb5, 0xc9, 0x17, 0x4b, 0x01, 0x74, 0x1d,
	0x76, 0x9e, 0xa4, 0x49, 0x10, 0xf2, 0xb5, 0x99, 0x80, 0xf4, 0x6b, 0x70, 0xaa, 0xaf, 0x96, 0x02,
	0xea, 0x1f, 0x16, 0xa0, 0x4f, 0x53, 0x1c, 0x55, 0x83, 0x5f, 0x3f, 0xc5, 0x11, 0xcb, 0xf7, 0x5d,
	0xd1, 0x78, 0xa7, 0x36, 0x11, 0x06, 0xdb, 0x25, 0xbd, 0x96, 0xc2, 0xe6, 0x1f, 0x2d, 0xd8, 0x91,
	0x27, 0x41, 0x2d, 0x2a, 0x2a, 0x4a, 0x3f, 0x82, 0x55, 0x19, 0x1e, 0xd5, 0xb7, 0xe7, 0xc4, 0x52,
	0x25, 0x7c, 0xb1, 0x9c, 0xbb, 0x5f, 0x82, 0x53, 0xc5, 0xab, 0xa8, 0x7a, 0x4b, 0xc0, 0xe7, 0x63,
	0xec, 0x2f, 0x16, 0xb4, 0x0f, 0x5f, 0x63, 0x2a, 0x00, 0xe4, 0x54, 0x9d, 0xaf, 0x5c, 0xc2, 0xc5,
	0x79, 0x96, 0xc3, 0x9c, 0x9a, 0x49, 0x5c, 0x54, 0x9f, 0x8e, 0x19, 0xa1, 0x9e, 0x94, 0xd2, 0x73,
	0xa4, 0xfa, 0x94, 0x1c, 0xc9, 0x9e, 0x42, 0x75, 0xa3, 0x74, 0x12, 0xdb, 0x87, 0x2d, 0x0d, 0xfa,
	0xc4, 0x61, 0xcc, 0x32, 0xab, 0x5f, 0x2b, 0xab, 0xff, 0x25, 0x5c, 0xdf, 0x1f, 0x66, 0xa9, 0x9f,
	0xc6, 0x03, 0x7e, 0xa4, 0x2b, 0x9f, 0xcb, 0xae, 0x40, 0x23, 0x0b, 0xb3, 0x28, 0x3f, 0x98, 0xc9,
	0x86, 0xc1, 0x4d, 0x6a, 0x8b, 0xb9, 0x49, 0xdd, 0xe4, 0x26, 0xff, 0xb2, 0xa0, 0x63, 0x42, 0xa0,
	0xb4, 0x79, 0x56, 0x72, 0x97, 0xfb, 0x26, 0x77, 0x99, 0x3a, 0xf8, 0xed, 0xf3, 0x8f, 0xcf, 0x54,
	0xfe, 0xf1, 0x14, 0xd6, 0xa8, 0x9a, 0x4c, 0x99, 0xc2, 0x07, 0x65, 0x04, 0xaa, 0xa2, 0xa7, 0x63,
	0xc8, 0xbf, 0xee, 0x15, 0x43, 0xdd, 0x7f, 0x37, 0xc1, 0xe6, 0x6b, 0x54, 0x39, 0x7a, 0xe7, 0x07,
	0xdf, 0x9a, 0xf1, 0xe0, 0x7b, 0x43, 0x37, 0x82, 0x36, 0xd4, 0x07, 0xa1, 0xaf, 0x80, 0xf2, 0x47,
	0xb4, 0x0b, 0x1b, 0x01, 0x61, 0x3e, 0x0d, 0x07, 0x5a, 0x1e, 0xa7, 0x77, 0x71, 0x05, 0x7d, 0xe1,
	0x5c, 0x81, 0xda, 0xfd, 0xf3, 0x26, 0x7f, 0x33, 0x14, 0xb5, 0x93, 0x40, 0x25, 0x00, 0x79, 0x73,
	0x6c, 0xcb, 0xcd, 0x85, 0x6c, 0xf9, 0x7e, 0x1e, 0xa7, 0xd7, 0x84, 0xf8, 0x7b, 0x65, 0xf1, 0x71,
	0x81, 0x94, 0x87, 0xc2, 0x3c, 0x8a, 0x77, 0x60, 0x2d, 0x18, 0x52, 0xac, 0x9d, 0x95, 0x8b, 0x36,
	0x37, 0x39, 0x91, 0x06, 0x39, 0x20, 0xa3, 0x87, 0x68, 0x70, 0xe5, 0x49, 0x22, 0x03, 0x50, 0xdd,
	0xe3, 0x8f, 0xa8, 0x0b, 0x88, 0x24, 0x01, 0xcf, 0x2e, 0x8e, 0x13, 0x36, 0x20, 0x7e, 0x78, 0x1a,
	0x12, 0x19, 0x89, 0xd6, 0x3c, 0xc3, 0x1b, 0xf4, 0x09, 0x00, 0x25, 0xfe, 0x90, 0x52, 0x92, 0xf8,
	0xc4, 0xd9, 0x14, 0x60, 0x6f, 0x1a, 0xd7, 0xd2, 0x2b, 0xc4, 0x3c, 0x6d, 0x08, 0xfa, 0x9e, 0xe2,
	0x32, 0xa5, 0x22, 0x82, 0xcd, 0x60, 0x26, 0x97, 0x43, 0x3f, 0x81, 0x4d, 0x3f, 0x8d, 0x22, 0xfc,
	0x2a, 0xa5, 0xbc, 0xcd, 0x9c, 0xcb, 0xb3, 0x29, 0x2d, 0x4b, 0xa3, 0x7b, 0xb0, 0xca, 0xb8, 0x77,
	0x33, 0xa7, 0x3d, 0x7b, 0x9c, 0x12, 0x43, 0x1f, 0x71, 0x5f, 0x19, 0x31, 0x67, 0x4b, 0x88, 0xdf,
	0x9a, 0x12, 0xb4, 0xba, 0x3d, 0x3c, 0x62, 0x4f, 0x93, 0x8c, 0x8e, 0x3c, 0x21, 0x8e, 0x6e, 0xc2,
	0x46, 0x98, 0x91, 0x98, 0x9d, 0xf8, 0xe9, 0x30, 0xc9, 0x1c, 0x24, 0x48, 0x06, 0xd1, 0xf5, 0x84,
	0xf7, 0xa0, 0x1b, 0x00, 0x21, 0xcb, 0xcf, 0xe2, 0xce, 0xb6, 0xe0, 0x58, 0xeb, 0xe1, 0xef, 0x33,
	0xf5, 0x7c, 0x10, 0x38, 0x57, 0xc4, 0x8a, 0x6a, 0x3d, 0x3c, 0x8e, 0x73, 0x6e, 0x87, 0xcc, 0xb9,
	0xba, 0x6b, 0xdd, 0x69, 0x19, 0xe3, 0xf8, 0xa1, 0x10, 0x78, 0x9a, 0x0c, 0x63, 0x4f, 0x09, 0xa3,
	0xef, 0x43, 0x93, 0x91, 0x2c, 0x0b, 0x93, 0xbe, 0x73, 0x4d, 0x30, 0xfe, 0x9e, 0x71, 0xbd, 0x0e,
	0xa5, 0x8c, 0x97, 0x0b, 0x73, 0xa7, 0xca, 0x70, 0x9f, 0x39, 0x3b, 0xbb, 0x75, 0xee, 0x54, 0xfc,
	0x99, 0xdb, 0x3b, 0x1b, 0xc6, 0x31, 0xa6, 0x23, 0xc7, 0x91, 0xae, 0xae, 0x9a, 0x9d, 0x9f, 0xc3,
	0x7a, 0x41, 0x08, 0xb7, 0xb3, 0x37, 0x64, 0xa4, 0x1c, 0x94, 0x3f, 0xa2, 0x07, 0xd0, 0x38, 0xc3,
	0xd1, 0x50, 0xba, 0x68, 0x65, 0x0b, 0x52, 0x10, 0x7a, 0x78, 0x74, 0xc0, 0xe9, 0xf2, 0xa4, 0xec,
	0x8f, 0x6a, 0x8f, 0x2c, 0xf7, 0x4f, 0x16, 0xac, 0x71, 0xba, 0xf9, 0x0b, 0xf4, 0x10, 0x6c, 0xce,
	0xa7, 0x8a, 0x62, 0xbb, 0x53, 0x56, 0x86, 0x8b, 0x76, 0xf9, 0x8f, 0x27, 0xa4, 0xd1, 0x1e, 0xd8,
	0x59, 0x1a, 0xa4, 0xea, 0xd3, 0x13, 0xcb, 0x2f, 0x2e, 0x2b, 0x8e, 0xd2, 0x20, 0xf5, 0x84, 0x50,
	0xe7, 0x29, 0xd8, 0xe2, 0x53, 0x93, 0x21, 0xa6, 0x88, 0xe1, 0x35, 0x3d, 0x86, 0xef, 0x40, 0x73,
	0x10, 0xfa, 0x27, 0x43, 0x1a, 0xe5, 0x5b, 0xd0, 0x20, 0xf4, 0x8f, 0x69, 0xe4, 0x7e, 0x0e, 0x36,
	0xb7, 0xa9, 0x85, 0x22, 0x95, 0x16, 0x5e, 0xea, 0x53, 0xc3, 0x8b, 0x5d, 0x0a, 0x2f, 0xee, 0x73,
	0x80, 0xf1, 0x96, 0x2d, 0x42, 0x58, 0xc8, 0x06, 0x11, 0x1e, 0x3d, 0x1f, 0xd7, 0xff, 0xf4, 0x2e,
	0x6e, 0x5b, 0x72, 0x5b, 0x3f, 0x8c, 0x86, 0x7d, 0xf5, 0x75, 0xad, 0xc7, 0xfd, 0x5d, 0x0d, 0x36,
	0x8b, 0x3d, 0xd0, 0x88, 0x3c, 0x2f, 0x4e, 0xd7, 0x16, 0x29, 0x4e, 0xef, 0x81, 0xcd, 0xfd, 0x4a,
	0xe8, 0x33, 0xc3, 0xe3, 0x84, 0x10, 0x7a, 0x54, 0xd8, 0xb5, 0x2d, 0xec, 0x7a, 0xd7, 0x6c, 0x9f,
	0x1c, 0x9d, 0x34, 0xef, 0xc2, 0xb4, 0x35, 0x7e, 0x1a, 0xe5, 0xf0, 0xfb, 0x10, 0xd6, 0x85, 0x37,
	0x07, 0x27, 0xaf, 0x46, 0x22, 0x34, 0xcf, 0x40, 0xb1, 0x26, 0x25, 0x1f, 0x8f, 0xf4, 0x95, 0x68,
	0x96, 0x56, 0xc2, 0x7d, 0x04, 0x5b, 0x9f, 0x92, 0xec, 0x28, 0x1d, 0x1c, 0xe1, 0xfe, 0xbc, 0xaa,
	0xd6, 0x25, 0xb0, 0x12, 0xb5, 0x41, 0x5a, 0x89, 0xfb, 0x7b, 0x9e, 0x98, 0x6b, 0x43, 0xd5, 0x86,
	0xfc, 0x71, 0x69, 0x43, 0xfe, 0xd0, 0x40, 0x67, 0x75, 0xd0, 0xdb, 0x6f, 0xc4, 0x1d, 0xb5, 0x11,
	0xe7, 0x3e, 0x6d, 0x8d, 0x7d, 0xda, 0xed, 0xc1, 0x8e, 0xbe, 0xef, 0x2e, 0xa0, 0xa0, 0xc1, 0x88,
	0xdd, 0x3f, 0x58, 0xe0, 0x54, 0xa7, 0x51, 0xca, 0xf6, 0x4a, 0xca, 0x7e, 0x77, 0x4e, 0xf6, 0x71,
	0xf1, 0x2a, 0x5f, 0x01, 0xf4, 0x0b, 0x4c, 0xe3, 0xe1, 0xe0, 0x09, 0xf6, 0x5f, 0xe7, 0x05, 0x7d,
	0xf7, 0x2a, 0x6c, 0x97, 0x7a, 0x25, 0x82, 0x0f, 0x7f, 0x08, 0x30, 0x8e, 0xaa, 0x68, 0x1b, 0x2e,
	0x8f, 0x5b, 0x27, 0xcf, 0x5f, 0x3c, 0x7f, 0xda, 0x5e, 0x41, 0x1b, 0xd0, 0x7c, 0x79, 0xfc, 0xf8,
	0x67, 0x07, 0x87, 0x3f, 0x6d, 0x5b, 0x68, 0x1d, 0x1a, 0x3d, 0x6f, 0xff, 0xd9, 0x51, 0xbb, 0x76,
	0xff, 0xbf, 0x97, 0x61, 0x83, 0x7b, 0xc5, 0x21, 0xa1, 0x67, 0xa1, 0xcf, 0xb3, 0xb0, 0xfa, 0x7e,
	0x14, 0x21, 0x53, 0xe0, 0x1e, 0x5f, 0x13, 0x76, 0x6e, 0x4c, 0x7b, 0xad, 0xd2, 0xa0, 0x15, 0xf4,
	0x02, 0x56, 0x65, 0xb6, 0x8f, 0x4c, 0x31, 0xb0, 0x74, 0x93, 0xd6, 0xb9, 0x35, 0x43, 0x42, 0x9f,
	0x50, 0xde, 0x01, 0x19, 0x27, 0x2c, 0xdd, 0x52, 0x19, 0x27, 0x2c, 0x5f, 0x20, 0xb9, 0x2b, 0xe8,
	0x00, 0x6c, 0x8f, 0xe0, 0x00, 0x99, 0x74, 0xd1, 0x2e, 0x80, 0x3a, 0x37, 0xa7, 0xbe, 0xd7, 0xb1,
	0xc9, 0x7b, 0x12, 0x23, 0xb6, 0xd2, 0x9d, 0x8c, 0x11, 0x5b, 0xf9, 0x92, 0x45, 0x4e, 0x28, 0x13,
	0x5c, 0xe3, 0x84, 0xa5, 0xd4, 0xdd, 0x38, 0x61, 0x39, 0x3b, 0x76, 0x57, 0xd0, 0x2f, 0x61, 0xbd,
	0x28, 0xb1, 0xa3, 0x6f, 0x18, 0x46, 0x4c, 0x5e, 0x20, 0x74, 0xbe, 0x39, 0x5b, 0xa8, 0xa4, 0xbb,
	0xa8, 0x45, 0x9b, 0x75, 0xd7, 0x6b, 0xec, 0x66, 0xdd, 0x4b, 0x85, 0x6c, 0x09, 0xb5, 0x28, 0xc9,
	0x1a, 0xa1, 0x4e, 0x56, 0xa2, 0x8d, 0x50, 0x2b, 0x55, 0x5d, 0x77, 0x05, 0x79, 0xd0, 0x54, 0x67,
	0x74, 0x74, 0x6b, 0x56, 0x4d, 0x53, 0xce, 0xea, 0xce, 0x2f, 0x7b, 0xba, 0x2b, 0xe8, 0x57, 0x00,
	0xe3, 0x4a, 0x23, 0x32, 0x92, 0x36, 0x59, 0x9d, 0xec, 0xdc, 0x9e, 0x23, 0x55, 0x4c, 0xfe, 0x39,
	0x6c, 0x68, 0x55, 0x35, 0x64, 0x1c, 0x57, 0xa9, 0x38, 0x76, 0xbe, 0x35, 0x4f, 0x4c, 0x07, 0x3f,
	0xae, 0x95, 0x19, 0xc1, 0x57, 0xea, 0x6b, 0x46, 0xf0, 0xd5, 0x82, 0x9b, 0xbb, 0x82, 0xfa, 0xd0,
	0x2a, 0xd7, 0xbe, 0xd0, 0x1d, 0x93, 0xa5, 0x9a, 0xea, 0x66, 0x9d, 0x0f, 0x16, 0x90, 0x2c, 0x3e,
	0x14, 0x43, 0x7b, 0xb2, 0xa2, 0x85, 0x4c, 0xbb, 0xd5, 0x94, 0x8a, 0x58, 0x67, 0x6f, 0x21, 0x59,
	0x7d, 0x51, 0xb4, 0x6a, 0x8f, 0x71, 0x51, 0xaa, 0x55, 0x2e, 0xe3, 0xa2, 0x18, 0x8a, 0x46, 0x4a,
	0x9d, 0x89, 0x3a, 0x89, 0x59, 0x1d, 0x73, 0xf1, 0xc7, 0xac, 0xce, 0x94, 0xc2, 0x8b, 0x74, 0xb7,
	0x22, 0xab, 0x32, 0xba, 0xdb, 0x64, 0xc9, 0xc4, 0xe8, 0x6e, 0x95, 0xe2, 0x84, 0xbb, 0x82, 0x18,
	0xa0, 0xea, 0x89, 0x1d, 0x7d, 0x67, 0xc1, 0x83, 0xbd, 0xfc, 0xd6, 0xdd, 0x73, 0x95, 0x01, 0xa4,
	0x49, 0x8f, 0xb3, 0x12, 0xa3, 0x49, 0x57, 0x92, 0x24, 0xa3, 0x49, 0x57, 0x53, 0x1b, 0xb9, 0x34,
	0x93, 0x59, 0x80, 0x71, 0x69, 0xa6, 0x24, 0x2b, 0xc6, 0xa5, 0x99, 0x96, 0x56, 0x48, 0x4b, 0xd3,
	0x76, 0x7b, 0xa3, 0xa5, 0x55, 0x73, 0x04, 0xa3, 0xa5, 0x19, 0x92, 0x06, 0x77, 0xe5, 0xd5, 0xaa,
	0xf8, 0x8f, 0xa3, 0x07, 0xff, 0x0f, 0x00, 0x00, 0xff, 0xff, 0x66, 0xa5, 0xa8, 0x1d, 0x8b, 0x25,
	0x00, 0x00,
}
