// Code generated by protoc-gen-go. DO NOT EDIT.
// source: server/sms-srv/proto/sms/sms.proto

/*
Package go_micro_srv_sms is a generated protocol buffer package.

It is generated from these files:
	server/sms-srv/proto/sms/sms.proto

It has these top-level messages:
	Subscribe
	SendRequest
	SendResponse
*/
package go_micro_srv_sms

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import go_micro_srv_static "server/static-srv/proto/pubsub"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Subscribe struct {
	// string user_id = 1;
	Phone   string `protobuf:"bytes,1,opt,name=phone" json:"phone,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
}

func (m *Subscribe) Reset()                    { *m = Subscribe{} }
func (m *Subscribe) String() string            { return proto.CompactTextString(m) }
func (*Subscribe) ProtoMessage()               {}
func (*Subscribe) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Subscribe) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *Subscribe) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type SendRequest struct {
	Phone   string `protobuf:"bytes,1,opt,name=phone" json:"phone,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
}

func (m *SendRequest) Reset()                    { *m = SendRequest{} }
func (m *SendRequest) String() string            { return proto.CompactTextString(m) }
func (*SendRequest) ProtoMessage()               {}
func (*SendRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *SendRequest) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *SendRequest) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type SendResponse struct {
	Code    int64  `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
}

func (m *SendResponse) Reset()                    { *m = SendResponse{} }
func (m *SendResponse) String() string            { return proto.CompactTextString(m) }
func (*SendResponse) ProtoMessage()               {}
func (*SendResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *SendResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *SendResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*Subscribe)(nil), "go.micro.srv.sms.Subscribe")
	proto.RegisterType((*SendRequest)(nil), "go.micro.srv.sms.SendRequest")
	proto.RegisterType((*SendResponse)(nil), "go.micro.srv.sms.SendResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for SmsService service

type SmsServiceClient interface {
	Subscribe(ctx context.Context, in *go_micro_srv_static.SubscribeRequest, opts ...client.CallOption) (*go_micro_srv_static.SubscribeResponse, error)
	Send(ctx context.Context, in *SendRequest, opts ...client.CallOption) (*SendResponse, error)
}

type smsServiceClient struct {
	c           client.Client
	serviceName string
}

func NewSmsServiceClient(serviceName string, c client.Client) SmsServiceClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "go.micro.srv.sms"
	}
	return &smsServiceClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *smsServiceClient) Subscribe(ctx context.Context, in *go_micro_srv_static.SubscribeRequest, opts ...client.CallOption) (*go_micro_srv_static.SubscribeResponse, error) {
	req := c.c.NewRequest(c.serviceName, "SmsService.Subscribe", in)
	out := new(go_micro_srv_static.SubscribeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smsServiceClient) Send(ctx context.Context, in *SendRequest, opts ...client.CallOption) (*SendResponse, error) {
	req := c.c.NewRequest(c.serviceName, "SmsService.Send", in)
	out := new(SendResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SmsService service

type SmsServiceHandler interface {
	Subscribe(context.Context, *go_micro_srv_static.SubscribeRequest, *go_micro_srv_static.SubscribeResponse) error
	Send(context.Context, *SendRequest, *SendResponse) error
}

func RegisterSmsServiceHandler(s server.Server, hdlr SmsServiceHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&SmsService{hdlr}, opts...))
}

type SmsService struct {
	SmsServiceHandler
}

func (h *SmsService) Subscribe(ctx context.Context, in *go_micro_srv_static.SubscribeRequest, out *go_micro_srv_static.SubscribeResponse) error {
	return h.SmsServiceHandler.Subscribe(ctx, in, out)
}

func (h *SmsService) Send(ctx context.Context, in *SendRequest, out *SendResponse) error {
	return h.SmsServiceHandler.Send(ctx, in, out)
}

func init() { proto.RegisterFile("server/sms-srv/proto/sms/sms.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 242 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x90, 0xc1, 0x4a, 0xc4, 0x30,
	0x10, 0x86, 0xad, 0xae, 0xca, 0x8e, 0x1e, 0x64, 0xf0, 0x50, 0x0a, 0x8a, 0x14, 0x14, 0x41, 0x9c,
	0x05, 0x3d, 0xaa, 0x67, 0xef, 0xed, 0xd5, 0xcb, 0x26, 0x3b, 0xac, 0x3d, 0xa4, 0xa9, 0x33, 0x6d,
	0x5f, 0xcc, 0x17, 0x94, 0x26, 0x5b, 0xa9, 0x42, 0x11, 0x0f, 0xa5, 0xf9, 0x33, 0xf9, 0xc2, 0x9f,
	0x0f, 0x72, 0x65, 0xe9, 0x59, 0x56, 0xea, 0xf4, 0x5e, 0xa5, 0x5f, 0x35, 0xe2, 0x5b, 0x3f, 0xa4,
	0xe1, 0xa3, 0x90, 0xf0, 0x6c, 0xeb, 0xc9, 0x55, 0x56, 0x3c, 0xa9, 0xf4, 0xa4, 0x4e, 0xb3, 0xbb,
	0x91, 0x6a, 0xd7, 0x6d, 0x65, 0x27, 0x60, 0xd3, 0x19, 0xed, 0xcc, 0xee, 0x17, 0xf1, 0xfc, 0x09,
	0x96, 0x65, 0x67, 0xd4, 0x4a, 0x65, 0x18, 0xcf, 0xe1, 0xb0, 0x79, 0xf7, 0x35, 0xa7, 0xc9, 0x55,
	0x72, 0xbb, 0x2c, 0x62, 0xc0, 0x14, 0x8e, 0x1d, 0xab, 0xae, 0xb7, 0x9c, 0xee, 0x87, 0xfd, 0x31,
	0xe6, 0x2f, 0x70, 0x52, 0x72, 0xbd, 0x29, 0xf8, 0xa3, 0x63, 0x6d, 0xff, 0x8d, 0x3f, 0xc3, 0x69,
	0xc4, 0xb5, 0xf1, 0xb5, 0x32, 0x22, 0x2c, 0xac, 0xdf, 0x44, 0xfc, 0xa0, 0x08, 0xeb, 0x79, 0xfa,
	0xe1, 0x33, 0x01, 0x28, 0x9d, 0x96, 0x2c, 0x7d, 0x65, 0x19, 0xdf, 0xa6, 0x0f, 0xb9, 0xa6, 0x9f,
	0x56, 0x82, 0x09, 0xfa, 0x9e, 0xef, 0x0a, 0x67, 0x37, 0x7f, 0x1d, 0x8b, 0xc5, 0xf2, 0x3d, 0x7c,
	0x85, 0xc5, 0x50, 0x15, 0x2f, 0xe8, 0xb7, 0x6e, 0x9a, 0x18, 0xc8, 0x2e, 0xe7, 0xc6, 0xe3, 0x45,
	0xe6, 0x28, 0x68, 0x7f, 0xfc, 0x0a, 0x00, 0x00, 0xff, 0xff, 0x89, 0x4d, 0x86, 0x0b, 0xdb, 0x01,
	0x00, 0x00,
}
