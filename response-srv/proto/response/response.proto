syntax = "proto3";

import "google/protobuf/any.proto";
import "google/protobuf/wrappers.proto";
import "server/user-srv/proto/user/user.proto";
import "server/survey-srv/proto/survey/survey.proto";

package go.micro.srv.response;

service ResponseService {
  rpc Check(CheckRequest) returns (CheckResponse) {}
  // these RPCs are not used
  // rpc AllQuestion(AllQuestionRequest) returns (AllQuestionResponse) {}
  // rpc ReadQuestion(ReadQuestionRequest) returns (ReadQuestionResponse) {}
  // rpc OpenAllQuestion(OpenAllQuestionRequest) returns
  // (OpenAllQuestionResponse) {}  rpc OpenReadQuestion(OpenReadQuestionRequest)
  // returns (OpenReadQuestionResponse) {}
  rpc All(AllRequest) returns (AllResponse) {}
  rpc Create(CreateRequest) returns (CreateResponse) {}
  rpc Update(UpdateRequest) returns (UpdateResponse) {}
  rpc UpdateState(UpdateStateRequest) returns (UpdateStateResponse) {}
  rpc AllState(AllStateRequest) returns (AllStateResponse) {}
  rpc AllAggQuestion(AllAggQuestionRequest) returns (AllAggQuestionResponse) {}
  rpc TimeFilter(TimeFilterRequest) returns (TimeFilterResponse) {}
  rpc ReadStats(ReadStatsRequest) returns (ReadStatsResponse) {}
  rpc ByUser(ByUserRequest) returns (ByUserResponse) {}
  rpc ByAnyUser(ByAnyUserRequest) returns (ByAnyUserResponse) {}
}

message Data { SubmitSurveyResponse response = 1; }

message ArrData { repeated SubmitSurveyResponse responses = 1; }

message CheckRequest {
  string short_hash = 1;
  string org_id = 2;
  string team_id = 3;
}

message CheckResponse {
  message Data {
    message Survey {
      string id = 1;
      bool authenticationRequired = 7;
    }
    Survey survey = 1;
  }
  Data data = 1;
  int64 code = 2;
  string message = 3;
}

message AllQuestionRequest {
  string survey_id = 1;
  string org_id = 2;
  string team_id = 3;
  int64 offset = 4;
  int64 limit = 5;
  string sort_parameter = 6;
  string sort_direction = 7;
}

message AllQuestionResponse {
  message Data { repeated go.micro.srv.survey.Question questions = 1; }
  Data data = 1;
  int64 code = 2;
  string message = 3;
}

message ReadQuestionRequest {
  string survey_id = 1;
  string question_id = 2;
  string org_id = 3;
  string team_id = 4;
}

message ReadQuestionResponse {
  message Data { go.micro.srv.survey.Question question = 1; }
  Data data = 1;
  int64 code = 2;
  string message = 3;
}

message OpenAllQuestionRequest { string survey_id = 1; }

message OpenAllQuestionResponse {
  message Data { repeated go.micro.srv.survey.Question questions = 1; }
  Data data = 1;
  int64 code = 2;
  string message = 3;
}

message OpenReadQuestionRequest {
  string survey_id = 1;
  string question_id = 2;
}

message OpenReadQuestionResponse {
  message Data { go.micro.srv.survey.Question question = 1; }
  Data data = 1;
  int64 code = 2;
  string message = 3;
}

message AllRequest {
  string survey_id = 5;
  string org_id = 1;
  string team_id = 2;
  int64 limit = 3;
  int64 offset = 4;
  string sort_parameter = 6;
  string sort_direction = 7;
}

message AllResponse {
  ArrData data = 1;
  int64 code = 2;
  string message = 3;
}

message CreateRequest {
  string survey_id = 4;
  SubmitSurveyResponse response = 1;
  string org_id = 2;
  string team_id = 3;
}

message CreateResponse {
  Data data = 1;
  int64 code = 2;
  string message = 3;
}

message UpdateRequest {
  string survey_id = 4;
  SubmitSurveyResponse response = 1;
  string org_id = 2;
  string team_id = 3;
}

message UpdateResponse {
  Data data = 1;
  int64 code = 2;
  string message = 3;
}


message UpdateStateRequest {
  message Response {
    string response_id = 1;
    ResponseState state = 2;
  }
  string survey_id = 1;
  Response response = 2;
  string org_id = 4;
  string team_id = 5;
}

message UpdateStateResponse {
  string response_id = 1;
  int64 code = 2;
  string message = 3;
}

message AllStateRequest {
  string survey_id = 1;
  ResponseState state = 2;
  string org_id = 3;
  string team_id = 4;
  int64 offset = 5;
  int64 limit = 6;
  string sort_parameter = 7;
  string sort_direction = 8;
}

message AllStateResponse {
  ArrData data = 1;
  int32 code = 2;
  string message = 3;
}

message AllAggQuestionRequest {
  string survey_id = 1;
  string org_id = 2;
  string team_id = 3;
  int64 offset = 4;
  int64 limit = 5;
}

message AllAggQuestionResponse {
  GroupByQuestionResponses data = 1;
  int64 code = 2;
  string message = 3;
}

message TimeFilterRequest {
  string survey_id = 1;
  int64 from = 2;
  int64 to = 3;
  string org_id = 4;
  string team_id = 5;
  int64 offset = 6;
  int64 limit = 7;
  string sort_parameter = 8;
  string sort_direction = 9;
}

message TimeFilterResponse {
  ArrData data = 1;
  int64 code = 2;
  string message = 3;
}

message ReadStatsRequest {
  string survey_id = 1;
  string org_id = 2;
  string team_id = 3;
}

message ReadStatsResponse {
  message Data {
    message Stats {
      int64 responses = 1;
      int64 drops = 2;
    }
    Stats stats = 1;
  }
  Data data = 1;
  int64 code = 2;
  string message = 3;
}

message ByUserRequest {
  string survey_id = 1;
  string user_id = 2;
  string org_id = 3;
  string team_id = 4;
  int64 offset = 5;
  int64 limit = 6;
  string sort_parameter = 7;
  string sort_direction = 8;
}

message ByUserResponse {
  ArrData data = 1;
  int64 code = 2;
  string message = 3;
}

message ByAnyUserRequest {
  string survey_id = 1;
  string org_id = 2;
  string team_id = 3;
  int64 offset = 4;
  int64 limit = 5;
  string sort_parameter = 6;
  string sort_direction = 7;
}

message ByAnyUserResponse {
  ArrData data = 1;
  int64 code = 2;
  string message = 3;
}

message SubmitSurveyResponse {
  string id = 1;
  string org_id = 2;
  string survey_id = 3;
  string response_session = 4;
  message Metadata {
    string user_agent = 1;
    go.micro.srv.survey.RenderTarget platform = 2;
    string referrer = 3;
    string browser = 4;
    string app = 5;
    string os = 6;
  }
  Metadata metadata = 5;
  go.micro.srv.user.User responder = 6; // can be null
  repeated Answer answers = 7;
  ResponseStatus status = 8;
  int64 created = 9;
  int64 updated = 10;
}

message GroupByQuestionResponses {
  string org_id = 1;
  string survey_id = 2;
  repeated GroupByQuestionResponse responses = 3;
}

message GroupByQuestionResponse {
  int64 response_count = 1; // count for how users many responded to this question
  int64 skipped_count = 2; // how users many skipped this question
  string question_ref = 3;
  go.micro.srv.survey.QuestionType type = 4;
  repeated Answer answers = 5;
}

message SurveyResponseStats {
  int64 responded = 1;
  int64 not_resposned = 2;
  int64 drop_out = 3;
  int64 question_count = 4;
}

message Answer {
  string question_ref = 1; // unique question id generated for the question in the survey
  go.micro.srv.user.User responder = 2;
  string org_id = 3;
  go.micro.srv.survey.QuestionType type = 4;
  google.protobuf.Any data = 5;
  string user_id = 6;
  int64 created = 7;
}

message ResponseStatus {
  ResponseState state = 1;
  int64 timestamp = 2;
}

enum ResponseState {
  ResponseState_NONE = 0;
  OPENED = 1;
  STARTED = 2;
  IN_PROGRESS = 3;
  ABANDONED = 4;
  SUBMITTED = 5;
}

message TextAnswer { string value = 1; }

message MultipleChoiceAnswer { repeated string choices = 1; }

message GetContactAnswer {
  string first_name = 1;
  string last_name = 2;
  string contact_number = 3;
  string email = 4;
  string address = 5;
}

message LegalAnswer {
  bool choice = 1; // true means accepted
}

message DropdownAnswer { repeated string choices = 1; }

message GetFileAnswer { string file_url = 1; }

message RangeSelectAnswer { int64 selected_range = 1; }

message YesNoAnswer {
  google.protobuf.BoolValue choice = 1; // true means accepted
}