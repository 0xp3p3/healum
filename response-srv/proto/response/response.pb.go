// Code generated by protoc-gen-go. DO NOT EDIT.
// source: server/response-srv/proto/response/response.proto

/*
Package go_micro_srv_response is a generated protocol buffer package.

It is generated from these files:
	server/response-srv/proto/response/response.proto

It has these top-level messages:
	Data
	ArrData
	CheckRequest
	CheckResponse
	AllQuestionRequest
	AllQuestionResponse
	ReadQuestionRequest
	ReadQuestionResponse
	OpenAllQuestionRequest
	OpenAllQuestionResponse
	OpenReadQuestionRequest
	OpenReadQuestionResponse
	AllRequest
	AllResponse
	CreateRequest
	CreateResponse
	UpdateRequest
	UpdateResponse
	UpdateStateRequest
	UpdateStateResponse
	AllStateRequest
	AllStateResponse
	AllAggQuestionRequest
	AllAggQuestionResponse
	TimeFilterRequest
	TimeFilterResponse
	ReadStatsRequest
	ReadStatsResponse
	ByUserRequest
	ByUserResponse
	ByAnyUserRequest
	ByAnyUserResponse
	SubmitSurveyResponse
	GroupByQuestionResponses
	GroupByQuestionResponse
	SurveyResponseStats
	Answer
	ResponseStatus
	TextAnswer
	MultipleChoiceAnswer
	GetContactAnswer
	LegalAnswer
	DropdownAnswer
	GetFileAnswer
	RangeSelectAnswer
	YesNoAnswer
*/
package go_micro_srv_response

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/any"
import google_protobuf1 "github.com/golang/protobuf/ptypes/wrappers"
import go_micro_srv_user "server/user-srv/proto/user"
import go_micro_srv_survey "server/survey-srv/proto/survey"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ResponseState int32

const (
	ResponseState_ResponseState_NONE ResponseState = 0
	ResponseState_OPENED             ResponseState = 1
	ResponseState_STARTED            ResponseState = 2
	ResponseState_IN_PROGRESS        ResponseState = 3
	ResponseState_ABANDONED          ResponseState = 4
	ResponseState_SUBMITTED          ResponseState = 5
)

var ResponseState_name = map[int32]string{
	0: "ResponseState_NONE",
	1: "OPENED",
	2: "STARTED",
	3: "IN_PROGRESS",
	4: "ABANDONED",
	5: "SUBMITTED",
}
var ResponseState_value = map[string]int32{
	"ResponseState_NONE": 0,
	"OPENED":             1,
	"STARTED":            2,
	"IN_PROGRESS":        3,
	"ABANDONED":          4,
	"SUBMITTED":          5,
}

func (x ResponseState) String() string {
	return proto.EnumName(ResponseState_name, int32(x))
}
func (ResponseState) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Data struct {
	Response *SubmitSurveyResponse `protobuf:"bytes,1,opt,name=response" json:"response,omitempty"`
}

func (m *Data) Reset()                    { *m = Data{} }
func (m *Data) String() string            { return proto.CompactTextString(m) }
func (*Data) ProtoMessage()               {}
func (*Data) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Data) GetResponse() *SubmitSurveyResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

type ArrData struct {
	Responses []*SubmitSurveyResponse `protobuf:"bytes,1,rep,name=responses" json:"responses,omitempty"`
}

func (m *ArrData) Reset()                    { *m = ArrData{} }
func (m *ArrData) String() string            { return proto.CompactTextString(m) }
func (*ArrData) ProtoMessage()               {}
func (*ArrData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ArrData) GetResponses() []*SubmitSurveyResponse {
	if m != nil {
		return m.Responses
	}
	return nil
}

type CheckRequest struct {
	ShortHash string `protobuf:"bytes,1,opt,name=short_hash,json=shortHash" json:"short_hash,omitempty"`
	OrgId     string `protobuf:"bytes,2,opt,name=org_id,json=orgId" json:"org_id,omitempty"`
	TeamId    string `protobuf:"bytes,3,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
}

func (m *CheckRequest) Reset()                    { *m = CheckRequest{} }
func (m *CheckRequest) String() string            { return proto.CompactTextString(m) }
func (*CheckRequest) ProtoMessage()               {}
func (*CheckRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *CheckRequest) GetShortHash() string {
	if m != nil {
		return m.ShortHash
	}
	return ""
}

func (m *CheckRequest) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *CheckRequest) GetTeamId() string {
	if m != nil {
		return m.TeamId
	}
	return ""
}

type CheckResponse struct {
	Data    *CheckResponse_Data `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	Code    int64               `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Message string              `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *CheckResponse) Reset()                    { *m = CheckResponse{} }
func (m *CheckResponse) String() string            { return proto.CompactTextString(m) }
func (*CheckResponse) ProtoMessage()               {}
func (*CheckResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *CheckResponse) GetData() *CheckResponse_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *CheckResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *CheckResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type CheckResponse_Data struct {
	Survey *CheckResponse_Data_Survey `protobuf:"bytes,1,opt,name=survey" json:"survey,omitempty"`
}

func (m *CheckResponse_Data) Reset()                    { *m = CheckResponse_Data{} }
func (m *CheckResponse_Data) String() string            { return proto.CompactTextString(m) }
func (*CheckResponse_Data) ProtoMessage()               {}
func (*CheckResponse_Data) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3, 0} }

func (m *CheckResponse_Data) GetSurvey() *CheckResponse_Data_Survey {
	if m != nil {
		return m.Survey
	}
	return nil
}

type CheckResponse_Data_Survey struct {
	Id                     string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	AuthenticationRequired bool   `protobuf:"varint,7,opt,name=authenticationRequired" json:"authenticationRequired,omitempty"`
}

func (m *CheckResponse_Data_Survey) Reset()                    { *m = CheckResponse_Data_Survey{} }
func (m *CheckResponse_Data_Survey) String() string            { return proto.CompactTextString(m) }
func (*CheckResponse_Data_Survey) ProtoMessage()               {}
func (*CheckResponse_Data_Survey) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3, 0, 0} }

func (m *CheckResponse_Data_Survey) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *CheckResponse_Data_Survey) GetAuthenticationRequired() bool {
	if m != nil {
		return m.AuthenticationRequired
	}
	return false
}

type AllQuestionRequest struct {
	SurveyId      string `protobuf:"bytes,1,opt,name=survey_id,json=surveyId" json:"survey_id,omitempty"`
	OrgId         string `protobuf:"bytes,2,opt,name=org_id,json=orgId" json:"org_id,omitempty"`
	TeamId        string `protobuf:"bytes,3,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
	Offset        int64  `protobuf:"varint,4,opt,name=offset" json:"offset,omitempty"`
	Limit         int64  `protobuf:"varint,5,opt,name=limit" json:"limit,omitempty"`
	SortParameter string `protobuf:"bytes,6,opt,name=sort_parameter,json=sortParameter" json:"sort_parameter,omitempty"`
	SortDirection string `protobuf:"bytes,7,opt,name=sort_direction,json=sortDirection" json:"sort_direction,omitempty"`
}

func (m *AllQuestionRequest) Reset()                    { *m = AllQuestionRequest{} }
func (m *AllQuestionRequest) String() string            { return proto.CompactTextString(m) }
func (*AllQuestionRequest) ProtoMessage()               {}
func (*AllQuestionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *AllQuestionRequest) GetSurveyId() string {
	if m != nil {
		return m.SurveyId
	}
	return ""
}

func (m *AllQuestionRequest) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *AllQuestionRequest) GetTeamId() string {
	if m != nil {
		return m.TeamId
	}
	return ""
}

func (m *AllQuestionRequest) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *AllQuestionRequest) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *AllQuestionRequest) GetSortParameter() string {
	if m != nil {
		return m.SortParameter
	}
	return ""
}

func (m *AllQuestionRequest) GetSortDirection() string {
	if m != nil {
		return m.SortDirection
	}
	return ""
}

type AllQuestionResponse struct {
	Data    *AllQuestionResponse_Data `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	Code    int64                     `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Message string                    `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *AllQuestionResponse) Reset()                    { *m = AllQuestionResponse{} }
func (m *AllQuestionResponse) String() string            { return proto.CompactTextString(m) }
func (*AllQuestionResponse) ProtoMessage()               {}
func (*AllQuestionResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *AllQuestionResponse) GetData() *AllQuestionResponse_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *AllQuestionResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *AllQuestionResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type AllQuestionResponse_Data struct {
	Questions []*go_micro_srv_survey.Question `protobuf:"bytes,1,rep,name=questions" json:"questions,omitempty"`
}

func (m *AllQuestionResponse_Data) Reset()                    { *m = AllQuestionResponse_Data{} }
func (m *AllQuestionResponse_Data) String() string            { return proto.CompactTextString(m) }
func (*AllQuestionResponse_Data) ProtoMessage()               {}
func (*AllQuestionResponse_Data) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5, 0} }

func (m *AllQuestionResponse_Data) GetQuestions() []*go_micro_srv_survey.Question {
	if m != nil {
		return m.Questions
	}
	return nil
}

type ReadQuestionRequest struct {
	SurveyId   string `protobuf:"bytes,1,opt,name=survey_id,json=surveyId" json:"survey_id,omitempty"`
	QuestionId string `protobuf:"bytes,2,opt,name=question_id,json=questionId" json:"question_id,omitempty"`
	OrgId      string `protobuf:"bytes,3,opt,name=org_id,json=orgId" json:"org_id,omitempty"`
	TeamId     string `protobuf:"bytes,4,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
}

func (m *ReadQuestionRequest) Reset()                    { *m = ReadQuestionRequest{} }
func (m *ReadQuestionRequest) String() string            { return proto.CompactTextString(m) }
func (*ReadQuestionRequest) ProtoMessage()               {}
func (*ReadQuestionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *ReadQuestionRequest) GetSurveyId() string {
	if m != nil {
		return m.SurveyId
	}
	return ""
}

func (m *ReadQuestionRequest) GetQuestionId() string {
	if m != nil {
		return m.QuestionId
	}
	return ""
}

func (m *ReadQuestionRequest) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *ReadQuestionRequest) GetTeamId() string {
	if m != nil {
		return m.TeamId
	}
	return ""
}

type ReadQuestionResponse struct {
	Data    *ReadQuestionResponse_Data `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	Code    int64                      `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Message string                     `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *ReadQuestionResponse) Reset()                    { *m = ReadQuestionResponse{} }
func (m *ReadQuestionResponse) String() string            { return proto.CompactTextString(m) }
func (*ReadQuestionResponse) ProtoMessage()               {}
func (*ReadQuestionResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *ReadQuestionResponse) GetData() *ReadQuestionResponse_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *ReadQuestionResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *ReadQuestionResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type ReadQuestionResponse_Data struct {
	Question *go_micro_srv_survey.Question `protobuf:"bytes,1,opt,name=question" json:"question,omitempty"`
}

func (m *ReadQuestionResponse_Data) Reset()                    { *m = ReadQuestionResponse_Data{} }
func (m *ReadQuestionResponse_Data) String() string            { return proto.CompactTextString(m) }
func (*ReadQuestionResponse_Data) ProtoMessage()               {}
func (*ReadQuestionResponse_Data) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7, 0} }

func (m *ReadQuestionResponse_Data) GetQuestion() *go_micro_srv_survey.Question {
	if m != nil {
		return m.Question
	}
	return nil
}

type OpenAllQuestionRequest struct {
	SurveyId string `protobuf:"bytes,1,opt,name=survey_id,json=surveyId" json:"survey_id,omitempty"`
}

func (m *OpenAllQuestionRequest) Reset()                    { *m = OpenAllQuestionRequest{} }
func (m *OpenAllQuestionRequest) String() string            { return proto.CompactTextString(m) }
func (*OpenAllQuestionRequest) ProtoMessage()               {}
func (*OpenAllQuestionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *OpenAllQuestionRequest) GetSurveyId() string {
	if m != nil {
		return m.SurveyId
	}
	return ""
}

type OpenAllQuestionResponse struct {
	Data    *OpenAllQuestionResponse_Data `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	Code    int64                         `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Message string                        `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *OpenAllQuestionResponse) Reset()                    { *m = OpenAllQuestionResponse{} }
func (m *OpenAllQuestionResponse) String() string            { return proto.CompactTextString(m) }
func (*OpenAllQuestionResponse) ProtoMessage()               {}
func (*OpenAllQuestionResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *OpenAllQuestionResponse) GetData() *OpenAllQuestionResponse_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *OpenAllQuestionResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *OpenAllQuestionResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type OpenAllQuestionResponse_Data struct {
	Questions []*go_micro_srv_survey.Question `protobuf:"bytes,1,rep,name=questions" json:"questions,omitempty"`
}

func (m *OpenAllQuestionResponse_Data) Reset()                    { *m = OpenAllQuestionResponse_Data{} }
func (m *OpenAllQuestionResponse_Data) String() string            { return proto.CompactTextString(m) }
func (*OpenAllQuestionResponse_Data) ProtoMessage()               {}
func (*OpenAllQuestionResponse_Data) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9, 0} }

func (m *OpenAllQuestionResponse_Data) GetQuestions() []*go_micro_srv_survey.Question {
	if m != nil {
		return m.Questions
	}
	return nil
}

type OpenReadQuestionRequest struct {
	SurveyId   string `protobuf:"bytes,1,opt,name=survey_id,json=surveyId" json:"survey_id,omitempty"`
	QuestionId string `protobuf:"bytes,2,opt,name=question_id,json=questionId" json:"question_id,omitempty"`
}

func (m *OpenReadQuestionRequest) Reset()                    { *m = OpenReadQuestionRequest{} }
func (m *OpenReadQuestionRequest) String() string            { return proto.CompactTextString(m) }
func (*OpenReadQuestionRequest) ProtoMessage()               {}
func (*OpenReadQuestionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *OpenReadQuestionRequest) GetSurveyId() string {
	if m != nil {
		return m.SurveyId
	}
	return ""
}

func (m *OpenReadQuestionRequest) GetQuestionId() string {
	if m != nil {
		return m.QuestionId
	}
	return ""
}

type OpenReadQuestionResponse struct {
	Data    *OpenReadQuestionResponse_Data `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	Code    int64                          `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Message string                         `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *OpenReadQuestionResponse) Reset()                    { *m = OpenReadQuestionResponse{} }
func (m *OpenReadQuestionResponse) String() string            { return proto.CompactTextString(m) }
func (*OpenReadQuestionResponse) ProtoMessage()               {}
func (*OpenReadQuestionResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *OpenReadQuestionResponse) GetData() *OpenReadQuestionResponse_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *OpenReadQuestionResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *OpenReadQuestionResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type OpenReadQuestionResponse_Data struct {
	Question *go_micro_srv_survey.Question `protobuf:"bytes,1,opt,name=question" json:"question,omitempty"`
}

func (m *OpenReadQuestionResponse_Data) Reset()         { *m = OpenReadQuestionResponse_Data{} }
func (m *OpenReadQuestionResponse_Data) String() string { return proto.CompactTextString(m) }
func (*OpenReadQuestionResponse_Data) ProtoMessage()    {}
func (*OpenReadQuestionResponse_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{11, 0}
}

func (m *OpenReadQuestionResponse_Data) GetQuestion() *go_micro_srv_survey.Question {
	if m != nil {
		return m.Question
	}
	return nil
}

type AllRequest struct {
	SurveyId      string `protobuf:"bytes,5,opt,name=survey_id,json=surveyId" json:"survey_id,omitempty"`
	OrgId         string `protobuf:"bytes,1,opt,name=org_id,json=orgId" json:"org_id,omitempty"`
	TeamId        string `protobuf:"bytes,2,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
	Limit         int64  `protobuf:"varint,3,opt,name=limit" json:"limit,omitempty"`
	Offset        int64  `protobuf:"varint,4,opt,name=offset" json:"offset,omitempty"`
	SortParameter string `protobuf:"bytes,6,opt,name=sort_parameter,json=sortParameter" json:"sort_parameter,omitempty"`
	SortDirection string `protobuf:"bytes,7,opt,name=sort_direction,json=sortDirection" json:"sort_direction,omitempty"`
}

func (m *AllRequest) Reset()                    { *m = AllRequest{} }
func (m *AllRequest) String() string            { return proto.CompactTextString(m) }
func (*AllRequest) ProtoMessage()               {}
func (*AllRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *AllRequest) GetSurveyId() string {
	if m != nil {
		return m.SurveyId
	}
	return ""
}

func (m *AllRequest) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *AllRequest) GetTeamId() string {
	if m != nil {
		return m.TeamId
	}
	return ""
}

func (m *AllRequest) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *AllRequest) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *AllRequest) GetSortParameter() string {
	if m != nil {
		return m.SortParameter
	}
	return ""
}

func (m *AllRequest) GetSortDirection() string {
	if m != nil {
		return m.SortDirection
	}
	return ""
}

type AllResponse struct {
	Data    *ArrData `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	Code    int64    `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Message string   `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *AllResponse) Reset()                    { *m = AllResponse{} }
func (m *AllResponse) String() string            { return proto.CompactTextString(m) }
func (*AllResponse) ProtoMessage()               {}
func (*AllResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *AllResponse) GetData() *ArrData {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *AllResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *AllResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type CreateRequest struct {
	SurveyId string                `protobuf:"bytes,4,opt,name=survey_id,json=surveyId" json:"survey_id,omitempty"`
	Response *SubmitSurveyResponse `protobuf:"bytes,1,opt,name=response" json:"response,omitempty"`
	OrgId    string                `protobuf:"bytes,2,opt,name=org_id,json=orgId" json:"org_id,omitempty"`
	TeamId   string                `protobuf:"bytes,3,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
}

func (m *CreateRequest) Reset()                    { *m = CreateRequest{} }
func (m *CreateRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateRequest) ProtoMessage()               {}
func (*CreateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *CreateRequest) GetSurveyId() string {
	if m != nil {
		return m.SurveyId
	}
	return ""
}

func (m *CreateRequest) GetResponse() *SubmitSurveyResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

func (m *CreateRequest) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *CreateRequest) GetTeamId() string {
	if m != nil {
		return m.TeamId
	}
	return ""
}

type CreateResponse struct {
	Data    *Data  `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	Code    int64  `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Message string `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *CreateResponse) Reset()                    { *m = CreateResponse{} }
func (m *CreateResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateResponse) ProtoMessage()               {}
func (*CreateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *CreateResponse) GetData() *Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *CreateResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *CreateResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type UpdateRequest struct {
	SurveyId string                `protobuf:"bytes,4,opt,name=survey_id,json=surveyId" json:"survey_id,omitempty"`
	Response *SubmitSurveyResponse `protobuf:"bytes,1,opt,name=response" json:"response,omitempty"`
	OrgId    string                `protobuf:"bytes,2,opt,name=org_id,json=orgId" json:"org_id,omitempty"`
	TeamId   string                `protobuf:"bytes,3,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
}

func (m *UpdateRequest) Reset()                    { *m = UpdateRequest{} }
func (m *UpdateRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateRequest) ProtoMessage()               {}
func (*UpdateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *UpdateRequest) GetSurveyId() string {
	if m != nil {
		return m.SurveyId
	}
	return ""
}

func (m *UpdateRequest) GetResponse() *SubmitSurveyResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

func (m *UpdateRequest) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *UpdateRequest) GetTeamId() string {
	if m != nil {
		return m.TeamId
	}
	return ""
}

type UpdateResponse struct {
	Data    *Data  `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	Code    int64  `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Message string `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *UpdateResponse) Reset()                    { *m = UpdateResponse{} }
func (m *UpdateResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateResponse) ProtoMessage()               {}
func (*UpdateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *UpdateResponse) GetData() *Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *UpdateResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *UpdateResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type UpdateStateRequest struct {
	SurveyId string                       `protobuf:"bytes,1,opt,name=survey_id,json=surveyId" json:"survey_id,omitempty"`
	Response *UpdateStateRequest_Response `protobuf:"bytes,2,opt,name=response" json:"response,omitempty"`
	OrgId    string                       `protobuf:"bytes,4,opt,name=org_id,json=orgId" json:"org_id,omitempty"`
	TeamId   string                       `protobuf:"bytes,5,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
}

func (m *UpdateStateRequest) Reset()                    { *m = UpdateStateRequest{} }
func (m *UpdateStateRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateStateRequest) ProtoMessage()               {}
func (*UpdateStateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *UpdateStateRequest) GetSurveyId() string {
	if m != nil {
		return m.SurveyId
	}
	return ""
}

func (m *UpdateStateRequest) GetResponse() *UpdateStateRequest_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (m *UpdateStateRequest) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *UpdateStateRequest) GetTeamId() string {
	if m != nil {
		return m.TeamId
	}
	return ""
}

type UpdateStateRequest_Response struct {
	ResponseId string        `protobuf:"bytes,1,opt,name=response_id,json=responseId" json:"response_id,omitempty"`
	State      ResponseState `protobuf:"varint,2,opt,name=state,enum=go.micro.srv.response.ResponseState" json:"state,omitempty"`
}

func (m *UpdateStateRequest_Response) Reset()                    { *m = UpdateStateRequest_Response{} }
func (m *UpdateStateRequest_Response) String() string            { return proto.CompactTextString(m) }
func (*UpdateStateRequest_Response) ProtoMessage()               {}
func (*UpdateStateRequest_Response) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18, 0} }

func (m *UpdateStateRequest_Response) GetResponseId() string {
	if m != nil {
		return m.ResponseId
	}
	return ""
}

func (m *UpdateStateRequest_Response) GetState() ResponseState {
	if m != nil {
		return m.State
	}
	return ResponseState_ResponseState_NONE
}

type UpdateStateResponse struct {
	ResponseId string `protobuf:"bytes,1,opt,name=response_id,json=responseId" json:"response_id,omitempty"`
	Code       int64  `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Message    string `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *UpdateStateResponse) Reset()                    { *m = UpdateStateResponse{} }
func (m *UpdateStateResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateStateResponse) ProtoMessage()               {}
func (*UpdateStateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *UpdateStateResponse) GetResponseId() string {
	if m != nil {
		return m.ResponseId
	}
	return ""
}

func (m *UpdateStateResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *UpdateStateResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type AllStateRequest struct {
	SurveyId      string        `protobuf:"bytes,1,opt,name=survey_id,json=surveyId" json:"survey_id,omitempty"`
	State         ResponseState `protobuf:"varint,2,opt,name=state,enum=go.micro.srv.response.ResponseState" json:"state,omitempty"`
	OrgId         string        `protobuf:"bytes,3,opt,name=org_id,json=orgId" json:"org_id,omitempty"`
	TeamId        string        `protobuf:"bytes,4,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
	Offset        int64         `protobuf:"varint,5,opt,name=offset" json:"offset,omitempty"`
	Limit         int64         `protobuf:"varint,6,opt,name=limit" json:"limit,omitempty"`
	SortParameter string        `protobuf:"bytes,7,opt,name=sort_parameter,json=sortParameter" json:"sort_parameter,omitempty"`
	SortDirection string        `protobuf:"bytes,8,opt,name=sort_direction,json=sortDirection" json:"sort_direction,omitempty"`
}

func (m *AllStateRequest) Reset()                    { *m = AllStateRequest{} }
func (m *AllStateRequest) String() string            { return proto.CompactTextString(m) }
func (*AllStateRequest) ProtoMessage()               {}
func (*AllStateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *AllStateRequest) GetSurveyId() string {
	if m != nil {
		return m.SurveyId
	}
	return ""
}

func (m *AllStateRequest) GetState() ResponseState {
	if m != nil {
		return m.State
	}
	return ResponseState_ResponseState_NONE
}

func (m *AllStateRequest) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *AllStateRequest) GetTeamId() string {
	if m != nil {
		return m.TeamId
	}
	return ""
}

func (m *AllStateRequest) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *AllStateRequest) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *AllStateRequest) GetSortParameter() string {
	if m != nil {
		return m.SortParameter
	}
	return ""
}

func (m *AllStateRequest) GetSortDirection() string {
	if m != nil {
		return m.SortDirection
	}
	return ""
}

type AllStateResponse struct {
	Data    *ArrData `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	Code    int32    `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Message string   `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *AllStateResponse) Reset()                    { *m = AllStateResponse{} }
func (m *AllStateResponse) String() string            { return proto.CompactTextString(m) }
func (*AllStateResponse) ProtoMessage()               {}
func (*AllStateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *AllStateResponse) GetData() *ArrData {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *AllStateResponse) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *AllStateResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type AllAggQuestionRequest struct {
	SurveyId string `protobuf:"bytes,1,opt,name=survey_id,json=surveyId" json:"survey_id,omitempty"`
	OrgId    string `protobuf:"bytes,2,opt,name=org_id,json=orgId" json:"org_id,omitempty"`
	TeamId   string `protobuf:"bytes,3,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
	Offset   int64  `protobuf:"varint,4,opt,name=offset" json:"offset,omitempty"`
	Limit    int64  `protobuf:"varint,5,opt,name=limit" json:"limit,omitempty"`
}

func (m *AllAggQuestionRequest) Reset()                    { *m = AllAggQuestionRequest{} }
func (m *AllAggQuestionRequest) String() string            { return proto.CompactTextString(m) }
func (*AllAggQuestionRequest) ProtoMessage()               {}
func (*AllAggQuestionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *AllAggQuestionRequest) GetSurveyId() string {
	if m != nil {
		return m.SurveyId
	}
	return ""
}

func (m *AllAggQuestionRequest) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *AllAggQuestionRequest) GetTeamId() string {
	if m != nil {
		return m.TeamId
	}
	return ""
}

func (m *AllAggQuestionRequest) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *AllAggQuestionRequest) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type AllAggQuestionResponse struct {
	Data    *GroupByQuestionResponses `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	Code    int64                     `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Message string                    `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *AllAggQuestionResponse) Reset()                    { *m = AllAggQuestionResponse{} }
func (m *AllAggQuestionResponse) String() string            { return proto.CompactTextString(m) }
func (*AllAggQuestionResponse) ProtoMessage()               {}
func (*AllAggQuestionResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *AllAggQuestionResponse) GetData() *GroupByQuestionResponses {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *AllAggQuestionResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *AllAggQuestionResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type TimeFilterRequest struct {
	SurveyId      string `protobuf:"bytes,1,opt,name=survey_id,json=surveyId" json:"survey_id,omitempty"`
	From          int64  `protobuf:"varint,2,opt,name=from" json:"from,omitempty"`
	To            int64  `protobuf:"varint,3,opt,name=to" json:"to,omitempty"`
	OrgId         string `protobuf:"bytes,4,opt,name=org_id,json=orgId" json:"org_id,omitempty"`
	TeamId        string `protobuf:"bytes,5,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
	Offset        int64  `protobuf:"varint,6,opt,name=offset" json:"offset,omitempty"`
	Limit         int64  `protobuf:"varint,7,opt,name=limit" json:"limit,omitempty"`
	SortParameter string `protobuf:"bytes,8,opt,name=sort_parameter,json=sortParameter" json:"sort_parameter,omitempty"`
	SortDirection string `protobuf:"bytes,9,opt,name=sort_direction,json=sortDirection" json:"sort_direction,omitempty"`
}

func (m *TimeFilterRequest) Reset()                    { *m = TimeFilterRequest{} }
func (m *TimeFilterRequest) String() string            { return proto.CompactTextString(m) }
func (*TimeFilterRequest) ProtoMessage()               {}
func (*TimeFilterRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *TimeFilterRequest) GetSurveyId() string {
	if m != nil {
		return m.SurveyId
	}
	return ""
}

func (m *TimeFilterRequest) GetFrom() int64 {
	if m != nil {
		return m.From
	}
	return 0
}

func (m *TimeFilterRequest) GetTo() int64 {
	if m != nil {
		return m.To
	}
	return 0
}

func (m *TimeFilterRequest) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *TimeFilterRequest) GetTeamId() string {
	if m != nil {
		return m.TeamId
	}
	return ""
}

func (m *TimeFilterRequest) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *TimeFilterRequest) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *TimeFilterRequest) GetSortParameter() string {
	if m != nil {
		return m.SortParameter
	}
	return ""
}

func (m *TimeFilterRequest) GetSortDirection() string {
	if m != nil {
		return m.SortDirection
	}
	return ""
}

type TimeFilterResponse struct {
	Data    *ArrData `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	Code    int64    `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Message string   `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *TimeFilterResponse) Reset()                    { *m = TimeFilterResponse{} }
func (m *TimeFilterResponse) String() string            { return proto.CompactTextString(m) }
func (*TimeFilterResponse) ProtoMessage()               {}
func (*TimeFilterResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *TimeFilterResponse) GetData() *ArrData {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *TimeFilterResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *TimeFilterResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type ReadStatsRequest struct {
	SurveyId string `protobuf:"bytes,1,opt,name=survey_id,json=surveyId" json:"survey_id,omitempty"`
	OrgId    string `protobuf:"bytes,2,opt,name=org_id,json=orgId" json:"org_id,omitempty"`
	TeamId   string `protobuf:"bytes,3,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
}

func (m *ReadStatsRequest) Reset()                    { *m = ReadStatsRequest{} }
func (m *ReadStatsRequest) String() string            { return proto.CompactTextString(m) }
func (*ReadStatsRequest) ProtoMessage()               {}
func (*ReadStatsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *ReadStatsRequest) GetSurveyId() string {
	if m != nil {
		return m.SurveyId
	}
	return ""
}

func (m *ReadStatsRequest) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *ReadStatsRequest) GetTeamId() string {
	if m != nil {
		return m.TeamId
	}
	return ""
}

type ReadStatsResponse struct {
	Data    *ReadStatsResponse_Data `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	Code    int64                   `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Message string                  `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *ReadStatsResponse) Reset()                    { *m = ReadStatsResponse{} }
func (m *ReadStatsResponse) String() string            { return proto.CompactTextString(m) }
func (*ReadStatsResponse) ProtoMessage()               {}
func (*ReadStatsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *ReadStatsResponse) GetData() *ReadStatsResponse_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *ReadStatsResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *ReadStatsResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type ReadStatsResponse_Data struct {
	Stats *ReadStatsResponse_Data_Stats `protobuf:"bytes,1,opt,name=stats" json:"stats,omitempty"`
}

func (m *ReadStatsResponse_Data) Reset()                    { *m = ReadStatsResponse_Data{} }
func (m *ReadStatsResponse_Data) String() string            { return proto.CompactTextString(m) }
func (*ReadStatsResponse_Data) ProtoMessage()               {}
func (*ReadStatsResponse_Data) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27, 0} }

func (m *ReadStatsResponse_Data) GetStats() *ReadStatsResponse_Data_Stats {
	if m != nil {
		return m.Stats
	}
	return nil
}

type ReadStatsResponse_Data_Stats struct {
	Responses int64 `protobuf:"varint,1,opt,name=responses" json:"responses,omitempty"`
	Drops     int64 `protobuf:"varint,2,opt,name=drops" json:"drops,omitempty"`
}

func (m *ReadStatsResponse_Data_Stats) Reset()         { *m = ReadStatsResponse_Data_Stats{} }
func (m *ReadStatsResponse_Data_Stats) String() string { return proto.CompactTextString(m) }
func (*ReadStatsResponse_Data_Stats) ProtoMessage()    {}
func (*ReadStatsResponse_Data_Stats) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{27, 0, 0}
}

func (m *ReadStatsResponse_Data_Stats) GetResponses() int64 {
	if m != nil {
		return m.Responses
	}
	return 0
}

func (m *ReadStatsResponse_Data_Stats) GetDrops() int64 {
	if m != nil {
		return m.Drops
	}
	return 0
}

type ByUserRequest struct {
	SurveyId      string `protobuf:"bytes,1,opt,name=survey_id,json=surveyId" json:"survey_id,omitempty"`
	UserId        string `protobuf:"bytes,2,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	OrgId         string `protobuf:"bytes,3,opt,name=org_id,json=orgId" json:"org_id,omitempty"`
	TeamId        string `protobuf:"bytes,4,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
	Offset        int64  `protobuf:"varint,5,opt,name=offset" json:"offset,omitempty"`
	Limit         int64  `protobuf:"varint,6,opt,name=limit" json:"limit,omitempty"`
	SortParameter string `protobuf:"bytes,7,opt,name=sort_parameter,json=sortParameter" json:"sort_parameter,omitempty"`
	SortDirection string `protobuf:"bytes,8,opt,name=sort_direction,json=sortDirection" json:"sort_direction,omitempty"`
}

func (m *ByUserRequest) Reset()                    { *m = ByUserRequest{} }
func (m *ByUserRequest) String() string            { return proto.CompactTextString(m) }
func (*ByUserRequest) ProtoMessage()               {}
func (*ByUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func (m *ByUserRequest) GetSurveyId() string {
	if m != nil {
		return m.SurveyId
	}
	return ""
}

func (m *ByUserRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *ByUserRequest) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *ByUserRequest) GetTeamId() string {
	if m != nil {
		return m.TeamId
	}
	return ""
}

func (m *ByUserRequest) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *ByUserRequest) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ByUserRequest) GetSortParameter() string {
	if m != nil {
		return m.SortParameter
	}
	return ""
}

func (m *ByUserRequest) GetSortDirection() string {
	if m != nil {
		return m.SortDirection
	}
	return ""
}

type ByUserResponse struct {
	Data    *ArrData `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	Code    int64    `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Message string   `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *ByUserResponse) Reset()                    { *m = ByUserResponse{} }
func (m *ByUserResponse) String() string            { return proto.CompactTextString(m) }
func (*ByUserResponse) ProtoMessage()               {}
func (*ByUserResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

func (m *ByUserResponse) GetData() *ArrData {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *ByUserResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *ByUserResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type ByAnyUserRequest struct {
	SurveyId      string `protobuf:"bytes,1,opt,name=survey_id,json=surveyId" json:"survey_id,omitempty"`
	OrgId         string `protobuf:"bytes,2,opt,name=org_id,json=orgId" json:"org_id,omitempty"`
	TeamId        string `protobuf:"bytes,3,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
	Offset        int64  `protobuf:"varint,4,opt,name=offset" json:"offset,omitempty"`
	Limit         int64  `protobuf:"varint,5,opt,name=limit" json:"limit,omitempty"`
	SortParameter string `protobuf:"bytes,6,opt,name=sort_parameter,json=sortParameter" json:"sort_parameter,omitempty"`
	SortDirection string `protobuf:"bytes,7,opt,name=sort_direction,json=sortDirection" json:"sort_direction,omitempty"`
}

func (m *ByAnyUserRequest) Reset()                    { *m = ByAnyUserRequest{} }
func (m *ByAnyUserRequest) String() string            { return proto.CompactTextString(m) }
func (*ByAnyUserRequest) ProtoMessage()               {}
func (*ByAnyUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30} }

func (m *ByAnyUserRequest) GetSurveyId() string {
	if m != nil {
		return m.SurveyId
	}
	return ""
}

func (m *ByAnyUserRequest) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *ByAnyUserRequest) GetTeamId() string {
	if m != nil {
		return m.TeamId
	}
	return ""
}

func (m *ByAnyUserRequest) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *ByAnyUserRequest) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ByAnyUserRequest) GetSortParameter() string {
	if m != nil {
		return m.SortParameter
	}
	return ""
}

func (m *ByAnyUserRequest) GetSortDirection() string {
	if m != nil {
		return m.SortDirection
	}
	return ""
}

type ByAnyUserResponse struct {
	Data    *ArrData `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	Code    int64    `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Message string   `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *ByAnyUserResponse) Reset()                    { *m = ByAnyUserResponse{} }
func (m *ByAnyUserResponse) String() string            { return proto.CompactTextString(m) }
func (*ByAnyUserResponse) ProtoMessage()               {}
func (*ByAnyUserResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{31} }

func (m *ByAnyUserResponse) GetData() *ArrData {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *ByAnyUserResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *ByAnyUserResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type SubmitSurveyResponse struct {
	Id              string                         `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	OrgId           string                         `protobuf:"bytes,2,opt,name=org_id,json=orgId" json:"org_id,omitempty"`
	SurveyId        string                         `protobuf:"bytes,3,opt,name=survey_id,json=surveyId" json:"survey_id,omitempty"`
	ResponseSession string                         `protobuf:"bytes,4,opt,name=response_session,json=responseSession" json:"response_session,omitempty"`
	Metadata        *SubmitSurveyResponse_Metadata `protobuf:"bytes,5,opt,name=metadata" json:"metadata,omitempty"`
	Responder       *go_micro_srv_user.User        `protobuf:"bytes,6,opt,name=responder" json:"responder,omitempty"`
	Answers         []*Answer                      `protobuf:"bytes,7,rep,name=answers" json:"answers,omitempty"`
	Status          *ResponseStatus                `protobuf:"bytes,8,opt,name=status" json:"status,omitempty"`
	Created         int64                          `protobuf:"varint,9,opt,name=created" json:"created,omitempty"`
	Updated         int64                          `protobuf:"varint,10,opt,name=updated" json:"updated,omitempty"`
}

func (m *SubmitSurveyResponse) Reset()                    { *m = SubmitSurveyResponse{} }
func (m *SubmitSurveyResponse) String() string            { return proto.CompactTextString(m) }
func (*SubmitSurveyResponse) ProtoMessage()               {}
func (*SubmitSurveyResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{32} }

func (m *SubmitSurveyResponse) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *SubmitSurveyResponse) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *SubmitSurveyResponse) GetSurveyId() string {
	if m != nil {
		return m.SurveyId
	}
	return ""
}

func (m *SubmitSurveyResponse) GetResponseSession() string {
	if m != nil {
		return m.ResponseSession
	}
	return ""
}

func (m *SubmitSurveyResponse) GetMetadata() *SubmitSurveyResponse_Metadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *SubmitSurveyResponse) GetResponder() *go_micro_srv_user.User {
	if m != nil {
		return m.Responder
	}
	return nil
}

func (m *SubmitSurveyResponse) GetAnswers() []*Answer {
	if m != nil {
		return m.Answers
	}
	return nil
}

func (m *SubmitSurveyResponse) GetStatus() *ResponseStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *SubmitSurveyResponse) GetCreated() int64 {
	if m != nil {
		return m.Created
	}
	return 0
}

func (m *SubmitSurveyResponse) GetUpdated() int64 {
	if m != nil {
		return m.Updated
	}
	return 0
}

type SubmitSurveyResponse_Metadata struct {
	UserAgent string                           `protobuf:"bytes,1,opt,name=user_agent,json=userAgent" json:"user_agent,omitempty"`
	Platform  go_micro_srv_survey.RenderTarget `protobuf:"varint,2,opt,name=platform,enum=go.micro.srv.survey.RenderTarget" json:"platform,omitempty"`
	Referrer  string                           `protobuf:"bytes,3,opt,name=referrer" json:"referrer,omitempty"`
	Browser   string                           `protobuf:"bytes,4,opt,name=browser" json:"browser,omitempty"`
	App       string                           `protobuf:"bytes,5,opt,name=app" json:"app,omitempty"`
	Os        string                           `protobuf:"bytes,6,opt,name=os" json:"os,omitempty"`
}

func (m *SubmitSurveyResponse_Metadata) Reset()         { *m = SubmitSurveyResponse_Metadata{} }
func (m *SubmitSurveyResponse_Metadata) String() string { return proto.CompactTextString(m) }
func (*SubmitSurveyResponse_Metadata) ProtoMessage()    {}
func (*SubmitSurveyResponse_Metadata) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{32, 0}
}

func (m *SubmitSurveyResponse_Metadata) GetUserAgent() string {
	if m != nil {
		return m.UserAgent
	}
	return ""
}

func (m *SubmitSurveyResponse_Metadata) GetPlatform() go_micro_srv_survey.RenderTarget {
	if m != nil {
		return m.Platform
	}
	return go_micro_srv_survey.RenderTarget_RenderTarget_NONE
}

func (m *SubmitSurveyResponse_Metadata) GetReferrer() string {
	if m != nil {
		return m.Referrer
	}
	return ""
}

func (m *SubmitSurveyResponse_Metadata) GetBrowser() string {
	if m != nil {
		return m.Browser
	}
	return ""
}

func (m *SubmitSurveyResponse_Metadata) GetApp() string {
	if m != nil {
		return m.App
	}
	return ""
}

func (m *SubmitSurveyResponse_Metadata) GetOs() string {
	if m != nil {
		return m.Os
	}
	return ""
}

type GroupByQuestionResponses struct {
	OrgId     string                     `protobuf:"bytes,1,opt,name=org_id,json=orgId" json:"org_id,omitempty"`
	SurveyId  string                     `protobuf:"bytes,2,opt,name=survey_id,json=surveyId" json:"survey_id,omitempty"`
	Responses []*GroupByQuestionResponse `protobuf:"bytes,3,rep,name=responses" json:"responses,omitempty"`
}

func (m *GroupByQuestionResponses) Reset()                    { *m = GroupByQuestionResponses{} }
func (m *GroupByQuestionResponses) String() string            { return proto.CompactTextString(m) }
func (*GroupByQuestionResponses) ProtoMessage()               {}
func (*GroupByQuestionResponses) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{33} }

func (m *GroupByQuestionResponses) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *GroupByQuestionResponses) GetSurveyId() string {
	if m != nil {
		return m.SurveyId
	}
	return ""
}

func (m *GroupByQuestionResponses) GetResponses() []*GroupByQuestionResponse {
	if m != nil {
		return m.Responses
	}
	return nil
}

type GroupByQuestionResponse struct {
	ResponseCount int64                            `protobuf:"varint,1,opt,name=response_count,json=responseCount" json:"response_count,omitempty"`
	SkippedCount  int64                            `protobuf:"varint,2,opt,name=skipped_count,json=skippedCount" json:"skipped_count,omitempty"`
	QuestionRef   string                           `protobuf:"bytes,3,opt,name=question_ref,json=questionRef" json:"question_ref,omitempty"`
	Type          go_micro_srv_survey.QuestionType `protobuf:"varint,4,opt,name=type,enum=go.micro.srv.survey.QuestionType" json:"type,omitempty"`
	Answers       []*Answer                        `protobuf:"bytes,5,rep,name=answers" json:"answers,omitempty"`
}

func (m *GroupByQuestionResponse) Reset()                    { *m = GroupByQuestionResponse{} }
func (m *GroupByQuestionResponse) String() string            { return proto.CompactTextString(m) }
func (*GroupByQuestionResponse) ProtoMessage()               {}
func (*GroupByQuestionResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{34} }

func (m *GroupByQuestionResponse) GetResponseCount() int64 {
	if m != nil {
		return m.ResponseCount
	}
	return 0
}

func (m *GroupByQuestionResponse) GetSkippedCount() int64 {
	if m != nil {
		return m.SkippedCount
	}
	return 0
}

func (m *GroupByQuestionResponse) GetQuestionRef() string {
	if m != nil {
		return m.QuestionRef
	}
	return ""
}

func (m *GroupByQuestionResponse) GetType() go_micro_srv_survey.QuestionType {
	if m != nil {
		return m.Type
	}
	return go_micro_srv_survey.QuestionType_QuestionType_NONE
}

func (m *GroupByQuestionResponse) GetAnswers() []*Answer {
	if m != nil {
		return m.Answers
	}
	return nil
}

type SurveyResponseStats struct {
	Responded     int64 `protobuf:"varint,1,opt,name=responded" json:"responded,omitempty"`
	NotResposned  int64 `protobuf:"varint,2,opt,name=not_resposned,json=notResposned" json:"not_resposned,omitempty"`
	DropOut       int64 `protobuf:"varint,3,opt,name=drop_out,json=dropOut" json:"drop_out,omitempty"`
	QuestionCount int64 `protobuf:"varint,4,opt,name=question_count,json=questionCount" json:"question_count,omitempty"`
}

func (m *SurveyResponseStats) Reset()                    { *m = SurveyResponseStats{} }
func (m *SurveyResponseStats) String() string            { return proto.CompactTextString(m) }
func (*SurveyResponseStats) ProtoMessage()               {}
func (*SurveyResponseStats) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{35} }

func (m *SurveyResponseStats) GetResponded() int64 {
	if m != nil {
		return m.Responded
	}
	return 0
}

func (m *SurveyResponseStats) GetNotResposned() int64 {
	if m != nil {
		return m.NotResposned
	}
	return 0
}

func (m *SurveyResponseStats) GetDropOut() int64 {
	if m != nil {
		return m.DropOut
	}
	return 0
}

func (m *SurveyResponseStats) GetQuestionCount() int64 {
	if m != nil {
		return m.QuestionCount
	}
	return 0
}

type Answer struct {
	QuestionRef string                           `protobuf:"bytes,1,opt,name=question_ref,json=questionRef" json:"question_ref,omitempty"`
	Responder   *go_micro_srv_user.User          `protobuf:"bytes,2,opt,name=responder" json:"responder,omitempty"`
	OrgId       string                           `protobuf:"bytes,3,opt,name=org_id,json=orgId" json:"org_id,omitempty"`
	Type        go_micro_srv_survey.QuestionType `protobuf:"varint,4,opt,name=type,enum=go.micro.srv.survey.QuestionType" json:"type,omitempty"`
	Data        *google_protobuf.Any             `protobuf:"bytes,5,opt,name=data" json:"data,omitempty"`
	UserId      string                           `protobuf:"bytes,6,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	Created     int64                            `protobuf:"varint,7,opt,name=created" json:"created,omitempty"`
}

func (m *Answer) Reset()                    { *m = Answer{} }
func (m *Answer) String() string            { return proto.CompactTextString(m) }
func (*Answer) ProtoMessage()               {}
func (*Answer) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{36} }

func (m *Answer) GetQuestionRef() string {
	if m != nil {
		return m.QuestionRef
	}
	return ""
}

func (m *Answer) GetResponder() *go_micro_srv_user.User {
	if m != nil {
		return m.Responder
	}
	return nil
}

func (m *Answer) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *Answer) GetType() go_micro_srv_survey.QuestionType {
	if m != nil {
		return m.Type
	}
	return go_micro_srv_survey.QuestionType_QuestionType_NONE
}

func (m *Answer) GetData() *google_protobuf.Any {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Answer) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *Answer) GetCreated() int64 {
	if m != nil {
		return m.Created
	}
	return 0
}

type ResponseStatus struct {
	State     ResponseState `protobuf:"varint,1,opt,name=state,enum=go.micro.srv.response.ResponseState" json:"state,omitempty"`
	Timestamp int64         `protobuf:"varint,2,opt,name=timestamp" json:"timestamp,omitempty"`
}

func (m *ResponseStatus) Reset()                    { *m = ResponseStatus{} }
func (m *ResponseStatus) String() string            { return proto.CompactTextString(m) }
func (*ResponseStatus) ProtoMessage()               {}
func (*ResponseStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{37} }

func (m *ResponseStatus) GetState() ResponseState {
	if m != nil {
		return m.State
	}
	return ResponseState_ResponseState_NONE
}

func (m *ResponseStatus) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

type TextAnswer struct {
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *TextAnswer) Reset()                    { *m = TextAnswer{} }
func (m *TextAnswer) String() string            { return proto.CompactTextString(m) }
func (*TextAnswer) ProtoMessage()               {}
func (*TextAnswer) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{38} }

func (m *TextAnswer) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type MultipleChoiceAnswer struct {
	Choices []string `protobuf:"bytes,1,rep,name=choices" json:"choices,omitempty"`
}

func (m *MultipleChoiceAnswer) Reset()                    { *m = MultipleChoiceAnswer{} }
func (m *MultipleChoiceAnswer) String() string            { return proto.CompactTextString(m) }
func (*MultipleChoiceAnswer) ProtoMessage()               {}
func (*MultipleChoiceAnswer) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{39} }

func (m *MultipleChoiceAnswer) GetChoices() []string {
	if m != nil {
		return m.Choices
	}
	return nil
}

type GetContactAnswer struct {
	FirstName     string `protobuf:"bytes,1,opt,name=first_name,json=firstName" json:"first_name,omitempty"`
	LastName      string `protobuf:"bytes,2,opt,name=last_name,json=lastName" json:"last_name,omitempty"`
	ContactNumber string `protobuf:"bytes,3,opt,name=contact_number,json=contactNumber" json:"contact_number,omitempty"`
	Email         string `protobuf:"bytes,4,opt,name=email" json:"email,omitempty"`
	Address       string `protobuf:"bytes,5,opt,name=address" json:"address,omitempty"`
}

func (m *GetContactAnswer) Reset()                    { *m = GetContactAnswer{} }
func (m *GetContactAnswer) String() string            { return proto.CompactTextString(m) }
func (*GetContactAnswer) ProtoMessage()               {}
func (*GetContactAnswer) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{40} }

func (m *GetContactAnswer) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *GetContactAnswer) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

func (m *GetContactAnswer) GetContactNumber() string {
	if m != nil {
		return m.ContactNumber
	}
	return ""
}

func (m *GetContactAnswer) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *GetContactAnswer) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type LegalAnswer struct {
	Choice bool `protobuf:"varint,1,opt,name=choice" json:"choice,omitempty"`
}

func (m *LegalAnswer) Reset()                    { *m = LegalAnswer{} }
func (m *LegalAnswer) String() string            { return proto.CompactTextString(m) }
func (*LegalAnswer) ProtoMessage()               {}
func (*LegalAnswer) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{41} }

func (m *LegalAnswer) GetChoice() bool {
	if m != nil {
		return m.Choice
	}
	return false
}

type DropdownAnswer struct {
	Choices []string `protobuf:"bytes,1,rep,name=choices" json:"choices,omitempty"`
}

func (m *DropdownAnswer) Reset()                    { *m = DropdownAnswer{} }
func (m *DropdownAnswer) String() string            { return proto.CompactTextString(m) }
func (*DropdownAnswer) ProtoMessage()               {}
func (*DropdownAnswer) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{42} }

func (m *DropdownAnswer) GetChoices() []string {
	if m != nil {
		return m.Choices
	}
	return nil
}

type GetFileAnswer struct {
	FileUrl string `protobuf:"bytes,1,opt,name=file_url,json=fileUrl" json:"file_url,omitempty"`
}

func (m *GetFileAnswer) Reset()                    { *m = GetFileAnswer{} }
func (m *GetFileAnswer) String() string            { return proto.CompactTextString(m) }
func (*GetFileAnswer) ProtoMessage()               {}
func (*GetFileAnswer) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{43} }

func (m *GetFileAnswer) GetFileUrl() string {
	if m != nil {
		return m.FileUrl
	}
	return ""
}

type RangeSelectAnswer struct {
	SelectedRange int64 `protobuf:"varint,1,opt,name=selected_range,json=selectedRange" json:"selected_range,omitempty"`
}

func (m *RangeSelectAnswer) Reset()                    { *m = RangeSelectAnswer{} }
func (m *RangeSelectAnswer) String() string            { return proto.CompactTextString(m) }
func (*RangeSelectAnswer) ProtoMessage()               {}
func (*RangeSelectAnswer) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{44} }

func (m *RangeSelectAnswer) GetSelectedRange() int64 {
	if m != nil {
		return m.SelectedRange
	}
	return 0
}

type YesNoAnswer struct {
	Choice *google_protobuf1.BoolValue `protobuf:"bytes,1,opt,name=choice" json:"choice,omitempty"`
}

func (m *YesNoAnswer) Reset()                    { *m = YesNoAnswer{} }
func (m *YesNoAnswer) String() string            { return proto.CompactTextString(m) }
func (*YesNoAnswer) ProtoMessage()               {}
func (*YesNoAnswer) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{45} }

func (m *YesNoAnswer) GetChoice() *google_protobuf1.BoolValue {
	if m != nil {
		return m.Choice
	}
	return nil
}

func init() {
	proto.RegisterType((*Data)(nil), "go.micro.srv.response.Data")
	proto.RegisterType((*ArrData)(nil), "go.micro.srv.response.ArrData")
	proto.RegisterType((*CheckRequest)(nil), "go.micro.srv.response.CheckRequest")
	proto.RegisterType((*CheckResponse)(nil), "go.micro.srv.response.CheckResponse")
	proto.RegisterType((*CheckResponse_Data)(nil), "go.micro.srv.response.CheckResponse.Data")
	proto.RegisterType((*CheckResponse_Data_Survey)(nil), "go.micro.srv.response.CheckResponse.Data.Survey")
	proto.RegisterType((*AllQuestionRequest)(nil), "go.micro.srv.response.AllQuestionRequest")
	proto.RegisterType((*AllQuestionResponse)(nil), "go.micro.srv.response.AllQuestionResponse")
	proto.RegisterType((*AllQuestionResponse_Data)(nil), "go.micro.srv.response.AllQuestionResponse.Data")
	proto.RegisterType((*ReadQuestionRequest)(nil), "go.micro.srv.response.ReadQuestionRequest")
	proto.RegisterType((*ReadQuestionResponse)(nil), "go.micro.srv.response.ReadQuestionResponse")
	proto.RegisterType((*ReadQuestionResponse_Data)(nil), "go.micro.srv.response.ReadQuestionResponse.Data")
	proto.RegisterType((*OpenAllQuestionRequest)(nil), "go.micro.srv.response.OpenAllQuestionRequest")
	proto.RegisterType((*OpenAllQuestionResponse)(nil), "go.micro.srv.response.OpenAllQuestionResponse")
	proto.RegisterType((*OpenAllQuestionResponse_Data)(nil), "go.micro.srv.response.OpenAllQuestionResponse.Data")
	proto.RegisterType((*OpenReadQuestionRequest)(nil), "go.micro.srv.response.OpenReadQuestionRequest")
	proto.RegisterType((*OpenReadQuestionResponse)(nil), "go.micro.srv.response.OpenReadQuestionResponse")
	proto.RegisterType((*OpenReadQuestionResponse_Data)(nil), "go.micro.srv.response.OpenReadQuestionResponse.Data")
	proto.RegisterType((*AllRequest)(nil), "go.micro.srv.response.AllRequest")
	proto.RegisterType((*AllResponse)(nil), "go.micro.srv.response.AllResponse")
	proto.RegisterType((*CreateRequest)(nil), "go.micro.srv.response.CreateRequest")
	proto.RegisterType((*CreateResponse)(nil), "go.micro.srv.response.CreateResponse")
	proto.RegisterType((*UpdateRequest)(nil), "go.micro.srv.response.UpdateRequest")
	proto.RegisterType((*UpdateResponse)(nil), "go.micro.srv.response.UpdateResponse")
	proto.RegisterType((*UpdateStateRequest)(nil), "go.micro.srv.response.UpdateStateRequest")
	proto.RegisterType((*UpdateStateRequest_Response)(nil), "go.micro.srv.response.UpdateStateRequest.Response")
	proto.RegisterType((*UpdateStateResponse)(nil), "go.micro.srv.response.UpdateStateResponse")
	proto.RegisterType((*AllStateRequest)(nil), "go.micro.srv.response.AllStateRequest")
	proto.RegisterType((*AllStateResponse)(nil), "go.micro.srv.response.AllStateResponse")
	proto.RegisterType((*AllAggQuestionRequest)(nil), "go.micro.srv.response.AllAggQuestionRequest")
	proto.RegisterType((*AllAggQuestionResponse)(nil), "go.micro.srv.response.AllAggQuestionResponse")
	proto.RegisterType((*TimeFilterRequest)(nil), "go.micro.srv.response.TimeFilterRequest")
	proto.RegisterType((*TimeFilterResponse)(nil), "go.micro.srv.response.TimeFilterResponse")
	proto.RegisterType((*ReadStatsRequest)(nil), "go.micro.srv.response.ReadStatsRequest")
	proto.RegisterType((*ReadStatsResponse)(nil), "go.micro.srv.response.ReadStatsResponse")
	proto.RegisterType((*ReadStatsResponse_Data)(nil), "go.micro.srv.response.ReadStatsResponse.Data")
	proto.RegisterType((*ReadStatsResponse_Data_Stats)(nil), "go.micro.srv.response.ReadStatsResponse.Data.Stats")
	proto.RegisterType((*ByUserRequest)(nil), "go.micro.srv.response.ByUserRequest")
	proto.RegisterType((*ByUserResponse)(nil), "go.micro.srv.response.ByUserResponse")
	proto.RegisterType((*ByAnyUserRequest)(nil), "go.micro.srv.response.ByAnyUserRequest")
	proto.RegisterType((*ByAnyUserResponse)(nil), "go.micro.srv.response.ByAnyUserResponse")
	proto.RegisterType((*SubmitSurveyResponse)(nil), "go.micro.srv.response.SubmitSurveyResponse")
	proto.RegisterType((*SubmitSurveyResponse_Metadata)(nil), "go.micro.srv.response.SubmitSurveyResponse.Metadata")
	proto.RegisterType((*GroupByQuestionResponses)(nil), "go.micro.srv.response.GroupByQuestionResponses")
	proto.RegisterType((*GroupByQuestionResponse)(nil), "go.micro.srv.response.GroupByQuestionResponse")
	proto.RegisterType((*SurveyResponseStats)(nil), "go.micro.srv.response.SurveyResponseStats")
	proto.RegisterType((*Answer)(nil), "go.micro.srv.response.Answer")
	proto.RegisterType((*ResponseStatus)(nil), "go.micro.srv.response.ResponseStatus")
	proto.RegisterType((*TextAnswer)(nil), "go.micro.srv.response.TextAnswer")
	proto.RegisterType((*MultipleChoiceAnswer)(nil), "go.micro.srv.response.MultipleChoiceAnswer")
	proto.RegisterType((*GetContactAnswer)(nil), "go.micro.srv.response.GetContactAnswer")
	proto.RegisterType((*LegalAnswer)(nil), "go.micro.srv.response.LegalAnswer")
	proto.RegisterType((*DropdownAnswer)(nil), "go.micro.srv.response.DropdownAnswer")
	proto.RegisterType((*GetFileAnswer)(nil), "go.micro.srv.response.GetFileAnswer")
	proto.RegisterType((*RangeSelectAnswer)(nil), "go.micro.srv.response.RangeSelectAnswer")
	proto.RegisterType((*YesNoAnswer)(nil), "go.micro.srv.response.YesNoAnswer")
	proto.RegisterEnum("go.micro.srv.response.ResponseState", ResponseState_name, ResponseState_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for ResponseService service

type ResponseServiceClient interface {
	Check(ctx context.Context, in *CheckRequest, opts ...client.CallOption) (*CheckResponse, error)
	// these RPCs are not used
	// rpc AllQuestion(AllQuestionRequest) returns (AllQuestionResponse) {}
	// rpc ReadQuestion(ReadQuestionRequest) returns (ReadQuestionResponse) {}
	// rpc OpenAllQuestion(OpenAllQuestionRequest) returns
	// (OpenAllQuestionResponse) {}  rpc OpenReadQuestion(OpenReadQuestionRequest)
	// returns (OpenReadQuestionResponse) {}
	All(ctx context.Context, in *AllRequest, opts ...client.CallOption) (*AllResponse, error)
	Create(ctx context.Context, in *CreateRequest, opts ...client.CallOption) (*CreateResponse, error)
	Update(ctx context.Context, in *UpdateRequest, opts ...client.CallOption) (*UpdateResponse, error)
	UpdateState(ctx context.Context, in *UpdateStateRequest, opts ...client.CallOption) (*UpdateStateResponse, error)
	AllState(ctx context.Context, in *AllStateRequest, opts ...client.CallOption) (*AllStateResponse, error)
	AllAggQuestion(ctx context.Context, in *AllAggQuestionRequest, opts ...client.CallOption) (*AllAggQuestionResponse, error)
	TimeFilter(ctx context.Context, in *TimeFilterRequest, opts ...client.CallOption) (*TimeFilterResponse, error)
	ReadStats(ctx context.Context, in *ReadStatsRequest, opts ...client.CallOption) (*ReadStatsResponse, error)
	ByUser(ctx context.Context, in *ByUserRequest, opts ...client.CallOption) (*ByUserResponse, error)
	ByAnyUser(ctx context.Context, in *ByAnyUserRequest, opts ...client.CallOption) (*ByAnyUserResponse, error)
}

type responseServiceClient struct {
	c           client.Client
	serviceName string
}

func NewResponseServiceClient(serviceName string, c client.Client) ResponseServiceClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "go.micro.srv.response"
	}
	return &responseServiceClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *responseServiceClient) Check(ctx context.Context, in *CheckRequest, opts ...client.CallOption) (*CheckResponse, error) {
	req := c.c.NewRequest(c.serviceName, "ResponseService.Check", in)
	out := new(CheckResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *responseServiceClient) All(ctx context.Context, in *AllRequest, opts ...client.CallOption) (*AllResponse, error) {
	req := c.c.NewRequest(c.serviceName, "ResponseService.All", in)
	out := new(AllResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *responseServiceClient) Create(ctx context.Context, in *CreateRequest, opts ...client.CallOption) (*CreateResponse, error) {
	req := c.c.NewRequest(c.serviceName, "ResponseService.Create", in)
	out := new(CreateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *responseServiceClient) Update(ctx context.Context, in *UpdateRequest, opts ...client.CallOption) (*UpdateResponse, error) {
	req := c.c.NewRequest(c.serviceName, "ResponseService.Update", in)
	out := new(UpdateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *responseServiceClient) UpdateState(ctx context.Context, in *UpdateStateRequest, opts ...client.CallOption) (*UpdateStateResponse, error) {
	req := c.c.NewRequest(c.serviceName, "ResponseService.UpdateState", in)
	out := new(UpdateStateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *responseServiceClient) AllState(ctx context.Context, in *AllStateRequest, opts ...client.CallOption) (*AllStateResponse, error) {
	req := c.c.NewRequest(c.serviceName, "ResponseService.AllState", in)
	out := new(AllStateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *responseServiceClient) AllAggQuestion(ctx context.Context, in *AllAggQuestionRequest, opts ...client.CallOption) (*AllAggQuestionResponse, error) {
	req := c.c.NewRequest(c.serviceName, "ResponseService.AllAggQuestion", in)
	out := new(AllAggQuestionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *responseServiceClient) TimeFilter(ctx context.Context, in *TimeFilterRequest, opts ...client.CallOption) (*TimeFilterResponse, error) {
	req := c.c.NewRequest(c.serviceName, "ResponseService.TimeFilter", in)
	out := new(TimeFilterResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *responseServiceClient) ReadStats(ctx context.Context, in *ReadStatsRequest, opts ...client.CallOption) (*ReadStatsResponse, error) {
	req := c.c.NewRequest(c.serviceName, "ResponseService.ReadStats", in)
	out := new(ReadStatsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *responseServiceClient) ByUser(ctx context.Context, in *ByUserRequest, opts ...client.CallOption) (*ByUserResponse, error) {
	req := c.c.NewRequest(c.serviceName, "ResponseService.ByUser", in)
	out := new(ByUserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *responseServiceClient) ByAnyUser(ctx context.Context, in *ByAnyUserRequest, opts ...client.CallOption) (*ByAnyUserResponse, error) {
	req := c.c.NewRequest(c.serviceName, "ResponseService.ByAnyUser", in)
	out := new(ByAnyUserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ResponseService service

type ResponseServiceHandler interface {
	Check(context.Context, *CheckRequest, *CheckResponse) error
	// these RPCs are not used
	// rpc AllQuestion(AllQuestionRequest) returns (AllQuestionResponse) {}
	// rpc ReadQuestion(ReadQuestionRequest) returns (ReadQuestionResponse) {}
	// rpc OpenAllQuestion(OpenAllQuestionRequest) returns
	// (OpenAllQuestionResponse) {}  rpc OpenReadQuestion(OpenReadQuestionRequest)
	// returns (OpenReadQuestionResponse) {}
	All(context.Context, *AllRequest, *AllResponse) error
	Create(context.Context, *CreateRequest, *CreateResponse) error
	Update(context.Context, *UpdateRequest, *UpdateResponse) error
	UpdateState(context.Context, *UpdateStateRequest, *UpdateStateResponse) error
	AllState(context.Context, *AllStateRequest, *AllStateResponse) error
	AllAggQuestion(context.Context, *AllAggQuestionRequest, *AllAggQuestionResponse) error
	TimeFilter(context.Context, *TimeFilterRequest, *TimeFilterResponse) error
	ReadStats(context.Context, *ReadStatsRequest, *ReadStatsResponse) error
	ByUser(context.Context, *ByUserRequest, *ByUserResponse) error
	ByAnyUser(context.Context, *ByAnyUserRequest, *ByAnyUserResponse) error
}

func RegisterResponseServiceHandler(s server.Server, hdlr ResponseServiceHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&ResponseService{hdlr}, opts...))
}

type ResponseService struct {
	ResponseServiceHandler
}

func (h *ResponseService) Check(ctx context.Context, in *CheckRequest, out *CheckResponse) error {
	return h.ResponseServiceHandler.Check(ctx, in, out)
}

func (h *ResponseService) All(ctx context.Context, in *AllRequest, out *AllResponse) error {
	return h.ResponseServiceHandler.All(ctx, in, out)
}

func (h *ResponseService) Create(ctx context.Context, in *CreateRequest, out *CreateResponse) error {
	return h.ResponseServiceHandler.Create(ctx, in, out)
}

func (h *ResponseService) Update(ctx context.Context, in *UpdateRequest, out *UpdateResponse) error {
	return h.ResponseServiceHandler.Update(ctx, in, out)
}

func (h *ResponseService) UpdateState(ctx context.Context, in *UpdateStateRequest, out *UpdateStateResponse) error {
	return h.ResponseServiceHandler.UpdateState(ctx, in, out)
}

func (h *ResponseService) AllState(ctx context.Context, in *AllStateRequest, out *AllStateResponse) error {
	return h.ResponseServiceHandler.AllState(ctx, in, out)
}

func (h *ResponseService) AllAggQuestion(ctx context.Context, in *AllAggQuestionRequest, out *AllAggQuestionResponse) error {
	return h.ResponseServiceHandler.AllAggQuestion(ctx, in, out)
}

func (h *ResponseService) TimeFilter(ctx context.Context, in *TimeFilterRequest, out *TimeFilterResponse) error {
	return h.ResponseServiceHandler.TimeFilter(ctx, in, out)
}

func (h *ResponseService) ReadStats(ctx context.Context, in *ReadStatsRequest, out *ReadStatsResponse) error {
	return h.ResponseServiceHandler.ReadStats(ctx, in, out)
}

func (h *ResponseService) ByUser(ctx context.Context, in *ByUserRequest, out *ByUserResponse) error {
	return h.ResponseServiceHandler.ByUser(ctx, in, out)
}

func (h *ResponseService) ByAnyUser(ctx context.Context, in *ByAnyUserRequest, out *ByAnyUserResponse) error {
	return h.ResponseServiceHandler.ByAnyUser(ctx, in, out)
}

func init() { proto.RegisterFile("server/response-srv/proto/response/response.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 2083 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x59, 0x4b, 0x73, 0x1b, 0xc7,
	0xf1, 0xd7, 0xe2, 0x8d, 0x86, 0x40, 0x41, 0x23, 0x8a, 0x84, 0x60, 0xcb, 0x96, 0xd6, 0xe6, 0xdf,
	0x94, 0xfc, 0x17, 0xe8, 0xd0, 0x51, 0x52, 0xb1, 0x4b, 0x07, 0xf0, 0x61, 0x8a, 0x55, 0x16, 0xc8,
	0x2c, 0xa0, 0xb8, 0x72, 0x70, 0x21, 0x4b, 0xec, 0x00, 0xdc, 0x78, 0x81, 0x59, 0xcf, 0xec, 0x52,
	0xe1, 0x2d, 0x55, 0x39, 0xa6, 0x92, 0x43, 0xaa, 0x92, 0x83, 0x2b, 0x97, 0x24, 0xe5, 0xef, 0x91,
	0x2f, 0xe0, 0xa3, 0x4f, 0xa9, 0x7c, 0x88, 0xdc, 0x72, 0x49, 0x55, 0x6a, 0x5e, 0x8b, 0x5d, 0x00,
	0x4b, 0x02, 0xb4, 0x22, 0xdb, 0x17, 0x12, 0xd3, 0xdb, 0xd3, 0x8f, 0x5f, 0xf7, 0xf4, 0x76, 0xcf,
	0xc2, 0x0f, 0x18, 0xa6, 0x67, 0x98, 0x6e, 0x51, 0xcc, 0x7c, 0x32, 0x66, 0xf8, 0x11, 0xa3, 0x67,
	0x5b, 0x3e, 0x25, 0x01, 0x89, 0x48, 0xd1, 0x8f, 0xa6, 0xa0, 0xa3, 0xdb, 0x43, 0xd2, 0x1c, 0xb9,
	0x7d, 0x4a, 0x9a, 0x8c, 0x9e, 0x35, 0xf5, 0xc3, 0xc6, 0x9d, 0x21, 0x21, 0x43, 0x0f, 0xcb, 0xcd,
	0x27, 0xe1, 0x60, 0xcb, 0x1e, 0x9f, 0xcb, 0x1d, 0x8d, 0x37, 0xa6, 0x1f, 0xbd, 0xa0, 0xb6, 0xef,
	0x63, 0xca, 0xd4, 0xf3, 0x0d, 0x65, 0x44, 0xc8, 0x30, 0x8d, 0x19, 0xc0, 0x97, 0xe2, 0x8f, 0x62,
	0x7b, 0x57, 0xb1, 0xb1, 0x90, 0x9e, 0xe1, 0xf3, 0x18, 0xa3, 0x24, 0xa8, 0x7f, 0x92, 0xd9, 0x3c,
	0x82, 0xdc, 0x9e, 0x1d, 0xd8, 0xe8, 0x00, 0x4a, 0xda, 0xc4, 0xba, 0x71, 0xcf, 0xd8, 0xac, 0x6c,
	0xbf, 0xdb, 0x9c, 0xeb, 0x40, 0xb3, 0x13, 0x9e, 0x8c, 0xdc, 0xa0, 0x23, 0x84, 0x58, 0x8a, 0x68,
	0x45, 0x9b, 0xcd, 0x2e, 0x14, 0x5b, 0x94, 0x0a, 0x99, 0x87, 0x50, 0xd6, 0x64, 0x56, 0x37, 0xee,
	0x65, 0x97, 0x15, 0x3a, 0xd9, 0x6d, 0x7e, 0x0a, 0xd7, 0x77, 0x4f, 0x71, 0xff, 0x33, 0x0b, 0x7f,
	0x1e, 0x62, 0x16, 0xa0, 0xbb, 0x00, 0xec, 0x94, 0xd0, 0xa0, 0x77, 0x6a, 0xb3, 0x53, 0x61, 0x70,
	0xd9, 0x2a, 0x0b, 0xca, 0x53, 0x9b, 0x9d, 0xa2, 0xdb, 0x50, 0x20, 0x74, 0xd8, 0x73, 0x9d, 0x7a,
	0x46, 0x3c, 0xca, 0x13, 0x3a, 0x3c, 0x74, 0xd0, 0x3a, 0x14, 0x03, 0x6c, 0x8f, 0x38, 0x3d, 0x2b,
	0xe8, 0x05, 0xbe, 0x3c, 0x74, 0xcc, 0xbf, 0x64, 0xa0, 0xaa, 0xe4, 0x4b, 0x8d, 0xe8, 0x09, 0xe4,
	0x1c, 0x3b, 0xb0, 0x15, 0x16, 0x0f, 0x52, 0xcc, 0x4e, 0xec, 0x69, 0x72, 0xa7, 0x2d, 0xb1, 0x0d,
	0x21, 0xc8, 0xf5, 0x89, 0x83, 0x85, 0xfa, 0xac, 0x25, 0x7e, 0xa3, 0x3a, 0x14, 0x47, 0x98, 0x31,
	0x7b, 0x88, 0x95, 0x76, 0xbd, 0x6c, 0xfc, 0xd5, 0x50, 0x51, 0x78, 0x0a, 0x05, 0x19, 0x1d, 0xa5,
	0xf7, 0xbd, 0x85, 0xf5, 0x36, 0x15, 0x76, 0x6a, 0x7f, 0xe3, 0x18, 0x0a, 0x92, 0x82, 0x56, 0x20,
	0xe3, 0x3a, 0x0a, 0xa2, 0x8c, 0xeb, 0xa0, 0x1f, 0xc1, 0x9a, 0x1d, 0x06, 0xa7, 0x78, 0x1c, 0xb8,
	0x7d, 0x3b, 0x70, 0xc9, 0x98, 0x63, 0xea, 0x52, 0xec, 0xd4, 0x8b, 0xf7, 0x8c, 0xcd, 0x92, 0x95,
	0xf2, 0xd4, 0xfc, 0xa7, 0x01, 0xa8, 0xe5, 0x79, 0x3f, 0xe5, 0xf8, 0x2b, 0x3a, 0x8f, 0xc4, 0x6b,
	0x50, 0x96, 0x2a, 0x7b, 0x91, 0x96, 0x92, 0x24, 0x1c, 0x3a, 0xcb, 0xc6, 0x01, 0xad, 0x41, 0x81,
	0x0c, 0x06, 0x0c, 0x07, 0xf5, 0x9c, 0x00, 0x4e, 0xad, 0xd0, 0x2a, 0xe4, 0x3d, 0x77, 0xe4, 0x06,
	0xf5, 0xbc, 0x20, 0xcb, 0x05, 0xda, 0x80, 0x15, 0xc6, 0x73, 0xc0, 0xb7, 0xa9, 0x3d, 0xc2, 0x01,
	0xa6, 0xf5, 0x82, 0x90, 0x56, 0xe5, 0xd4, 0x63, 0x4d, 0x8c, 0xd8, 0x1c, 0x97, 0xe2, 0x3e, 0x37,
	0x5d, 0x38, 0xaa, 0xd8, 0xf6, 0x34, 0xd1, 0xfc, 0xca, 0x80, 0x5b, 0x09, 0xff, 0x54, 0x26, 0xec,
	0x26, 0x32, 0x61, 0x2b, 0x25, 0x22, 0x73, 0x76, 0x5e, 0x3d, 0x1f, 0x76, 0x55, 0x3a, 0x7c, 0x08,
	0xe5, 0xcf, 0x95, 0x50, 0x7d, 0x80, 0xee, 0x26, 0xf5, 0xab, 0xb3, 0x1c, 0xa9, 0x9e, 0xf0, 0x9b,
	0xbf, 0x31, 0xe0, 0x96, 0x85, 0x6d, 0x67, 0xa9, 0x80, 0xbd, 0x09, 0x15, 0x2d, 0x61, 0x12, 0x35,
	0xd0, 0xa4, 0x44, 0x44, 0xb3, 0x29, 0x11, 0xcd, 0x25, 0x4e, 0xd6, 0x57, 0x06, 0xac, 0x26, 0xad,
	0x50, 0xb0, 0xee, 0x25, 0x60, 0x4d, 0x4b, 0xf4, 0x79, 0x5b, 0xaf, 0x8e, 0x6b, 0x4b, 0xe1, 0xfa,
	0x13, 0x28, 0x69, 0x97, 0x94, 0xfe, 0x4b, 0x60, 0x8d, 0xd8, 0xcd, 0xc7, 0xb0, 0x76, 0xe4, 0xe3,
	0xf1, 0x92, 0x07, 0xc1, 0xfc, 0xda, 0x80, 0xf5, 0x99, 0x7d, 0x0a, 0x89, 0x83, 0x04, 0x12, 0xef,
	0xa7, 0x20, 0x91, 0xb2, 0xfb, 0x5b, 0x4e, 0xb2, 0x4f, 0xa4, 0x5b, 0x2f, 0x3d, 0xcf, 0x38, 0x60,
	0xf5, 0x59, 0xc9, 0x0a, 0xb1, 0xa7, 0x09, 0xc4, 0x7e, 0x78, 0x01, 0x62, 0xdf, 0xb9, 0xfc, 0xf9,
	0xda, 0x00, 0x68, 0x79, 0xde, 0x5c, 0x90, 0xf2, 0xa9, 0xd5, 0xd3, 0x48, 0x39, 0x6b, 0x99, 0x44,
	0xf5, 0x8c, 0xaa, 0x64, 0x36, 0x5e, 0x25, 0xd3, 0x6a, 0xea, 0xcb, 0xad, 0x9e, 0x04, 0x2a, 0xc2,
	0x2d, 0x15, 0xa1, 0xed, 0x44, 0x84, 0xde, 0x48, 0x2b, 0x9a, 0xb2, 0x51, 0xb8, 0x4a, 0x2c, 0xcc,
	0x2f, 0x0d, 0xa8, 0xee, 0x52, 0x6c, 0x07, 0x78, 0x2e, 0x96, 0xb9, 0x29, 0x2c, 0x5f, 0x56, 0x7f,
	0xb3, 0x74, 0x6b, 0x41, 0x60, 0x45, 0x9b, 0xa9, 0x24, 0x6c, 0x25, 0xb0, 0x79, 0x2d, 0xc5, 0x8c,
	0x6f, 0x04, 0xcc, 0x73, 0xdf, 0xf9, 0x3e, 0x00, 0xa3, 0xcd, 0x7c, 0x35, 0xc0, 0x7c, 0x91, 0x01,
	0x24, 0x35, 0x76, 0x82, 0x34, 0x74, 0xa6, 0xeb, 0x54, 0x3b, 0x86, 0x4e, 0x46, 0x98, 0xb5, 0x9d,
	0x62, 0xd6, 0xac, 0xe4, 0xe6, 0x85, 0x20, 0xe5, 0x52, 0x40, 0xca, 0xc7, 0x41, 0x6a, 0x0c, 0xa1,
	0x14, 0xc1, 0xf3, 0x26, 0x54, 0xb4, 0x9c, 0x89, 0xa9, 0xa0, 0x49, 0x87, 0x0e, 0xfa, 0x00, 0xf2,
	0x8c, 0xeb, 0x17, 0x96, 0xae, 0x6c, 0xbf, 0x9d, 0xfa, 0x4e, 0x95, 0x3f, 0xa4, 0xad, 0x72, 0x8b,
	0xe9, 0xc0, 0xad, 0x84, 0x07, 0x8b, 0xea, 0x5c, 0x2e, 0x04, 0x7f, 0xca, 0xc0, 0x8d, 0x96, 0xe7,
	0x2d, 0x8e, 0xff, 0x37, 0x70, 0x69, 0xd9, 0x56, 0x25, 0x56, 0x28, 0xf3, 0xf3, 0x9b, 0xcf, 0xc2,
	0xc5, 0xcd, 0x67, 0x71, 0xb1, 0xf2, 0x59, 0x9a, 0x57, 0x3e, 0x03, 0xa8, 0x4d, 0x70, 0x79, 0x49,
	0x35, 0x34, 0x7f, 0x69, 0x38, 0xfe, 0x60, 0xc0, 0xed, 0x96, 0xe7, 0xb5, 0x86, 0xc3, 0xef, 0x4e,
	0x57, 0x6f, 0xfe, 0xd6, 0x80, 0xb5, 0x69, 0xa3, 0x96, 0x6a, 0xc5, 0x0f, 0x28, 0x09, 0xfd, 0x9d,
	0xf3, 0xe9, 0xdd, 0xec, 0x4a, 0x45, 0xe3, 0xd7, 0x19, 0xb8, 0xd9, 0x75, 0x47, 0xf8, 0x23, 0xd7,
	0x0b, 0x30, 0x5d, 0x08, 0x1e, 0x04, 0xb9, 0x01, 0x25, 0x23, 0xad, 0x80, 0xff, 0xe6, 0x43, 0x58,
	0x40, 0xd4, 0x7b, 0x39, 0x13, 0x90, 0x65, 0xeb, 0x40, 0x0c, 0xc2, 0xc2, 0x7c, 0x08, 0x8b, 0x17,
	0xe7, 0x66, 0x69, 0xb1, 0xdc, 0x2c, 0xcf, 0xcb, 0xcd, 0x33, 0x40, 0x71, 0x04, 0x5e, 0xd9, 0x1b,
	0xbe, 0x07, 0x35, 0xde, 0xbe, 0xf1, 0x43, 0xc1, 0xfe, 0x17, 0x79, 0x69, 0xfe, 0x31, 0x03, 0x37,
	0x63, 0x1a, 0x94, 0x63, 0xad, 0x84, 0x63, 0x8f, 0x2e, 0x18, 0x4c, 0x12, 0xfb, 0xae, 0xde, 0x55,
	0xfe, 0x5e, 0x4f, 0xff, 0x87, 0xb2, 0xd8, 0xb1, 0x4b, 0x26, 0x81, 0xf9, 0xaa, 0x9b, 0x92, 0x24,
	0x25, 0x34, 0x3e, 0x84, 0xbc, 0x58, 0xa3, 0xd7, 0x93, 0x77, 0x30, 0xdc, 0x9e, 0x09, 0x81, 0xa7,
	0x8f, 0x43, 0x89, 0xcf, 0x94, 0xa5, 0x72, 0x61, 0xfe, 0xcb, 0x80, 0xea, 0xce, 0xf9, 0x73, 0xb6,
	0x60, 0xbe, 0xaf, 0x43, 0x31, 0x64, 0x98, 0xc6, 0xfa, 0x51, 0xbe, 0x5c, 0x7e, 0x56, 0xfc, 0x56,
	0x0b, 0x30, 0x85, 0x15, 0xed, 0xf2, 0x2b, 0x4b, 0xf0, 0x7f, 0x18, 0x50, 0xdb, 0x39, 0x6f, 0x8d,
	0x17, 0x87, 0xfa, 0xfb, 0x74, 0x9f, 0x12, 0xc2, 0xcd, 0x98, 0x73, 0xaf, 0x0c, 0xd4, 0xff, 0xe4,
	0x60, 0x75, 0x5e, 0xa7, 0x3a, 0x73, 0x0f, 0x96, 0x82, 0x65, 0x02, 0xff, 0xec, 0x14, 0xfe, 0x0f,
	0xa0, 0x16, 0xb5, 0x43, 0x0c, 0x33, 0xc6, 0x9d, 0x97, 0x39, 0x7c, 0x43, 0xd3, 0x3b, 0x92, 0x8c,
	0x8e, 0xa1, 0x34, 0xc2, 0x81, 0x2d, 0xbc, 0xcd, 0x5f, 0x38, 0xa7, 0xce, 0xb3, 0xb6, 0xf9, 0x4c,
	0xed, 0xb5, 0x22, 0x29, 0xe8, 0xb1, 0x3e, 0xca, 0x8e, 0x8a, 0x4c, 0x65, 0x7b, 0x3d, 0x29, 0x52,
	0x5c, 0x02, 0x0b, 0xbc, 0x27, 0x9c, 0xe8, 0xc7, 0x50, 0xb4, 0xc7, 0xec, 0x05, 0xa6, 0xac, 0x5e,
	0x9c, 0x37, 0xdd, 0x4f, 0x50, 0x17, 0x5c, 0x96, 0xe6, 0x46, 0x4f, 0xa0, 0xc0, 0x8b, 0x49, 0xc8,
	0xc4, 0x89, 0xa9, 0x6c, 0x6f, 0x2c, 0xd0, 0x7c, 0x85, 0xcc, 0x52, 0x9b, 0x78, 0x88, 0xfa, 0x62,
	0xf0, 0x71, 0xc4, 0x6b, 0x25, 0x6b, 0xe9, 0x25, 0x7f, 0x12, 0x8a, 0x5e, 0xd3, 0xa9, 0x83, 0x7c,
	0xa2, 0x96, 0x8d, 0xbf, 0x1b, 0x50, 0xd2, 0x9e, 0xa3, 0xbb, 0x00, 0xa2, 0xae, 0xd8, 0x43, 0x3c,
	0x0e, 0xf4, 0x1d, 0x2f, 0xa7, 0xb4, 0x38, 0x01, 0x3d, 0x81, 0x92, 0xef, 0xd9, 0xc1, 0x80, 0xd0,
	0x91, 0xea, 0x0e, 0xef, 0xcf, 0x1d, 0xc2, 0x2d, 0xcc, 0x61, 0xe8, 0xda, 0x74, 0x88, 0x03, 0x2b,
	0xda, 0x82, 0x1a, 0xbc, 0xb3, 0x1f, 0x60, 0x4a, 0x31, 0xd5, 0x61, 0xd6, 0x6b, 0x6e, 0xe0, 0x09,
	0x25, 0x2f, 0x18, 0xa6, 0x2a, 0xba, 0x7a, 0x89, 0x6a, 0x90, 0xb5, 0x7d, 0x5f, 0xbd, 0x9c, 0xf9,
	0x4f, 0x9e, 0x56, 0x84, 0xa9, 0x83, 0x92, 0x21, 0xcc, 0xfc, 0xb3, 0x01, 0xf5, 0xb4, 0x0e, 0x24,
	0x6d, 0xa2, 0x4f, 0xe4, 0x5c, 0x66, 0x2a, 0xe7, 0x3e, 0x8e, 0x57, 0xf0, 0xac, 0x88, 0x60, 0x73,
	0xb9, 0xce, 0x27, 0x7e, 0x91, 0xfe, 0x6f, 0x03, 0xd6, 0x53, 0xd8, 0xf8, 0xc1, 0x8e, 0xb2, 0xbb,
	0x4f, 0x42, 0x05, 0x7a, 0xd6, 0xaa, 0x6a, 0xea, 0x2e, 0x27, 0xa2, 0xb7, 0xa0, 0xca, 0x3e, 0x73,
	0x7d, 0x1f, 0x3b, 0x8a, 0x4b, 0x1e, 0xcc, 0xeb, 0x8a, 0x28, 0x99, 0xee, 0xc3, 0xf5, 0xe8, 0x82,
	0x87, 0xe2, 0x81, 0x82, 0x38, 0xba, 0xf4, 0xb1, 0xf0, 0x00, 0x3d, 0x86, 0x5c, 0x70, 0xee, 0x63,
	0x01, 0x71, 0x5a, 0xf0, 0xb4, 0x8d, 0xdd, 0x73, 0x1f, 0x5b, 0x82, 0x3d, 0x9e, 0xcf, 0xf9, 0x65,
	0xf2, 0xd9, 0xfc, 0xc2, 0x80, 0x5b, 0xc9, 0x53, 0x36, 0xf5, 0x8a, 0x74, 0xb0, 0x93, 0x7c, 0x45,
	0x3a, 0xd8, 0xe1, 0xde, 0x8e, 0x49, 0xd0, 0x13, 0x04, 0x36, 0xc6, 0x8e, 0xf6, 0x76, 0x4c, 0x02,
	0x4b, 0xd3, 0xd0, 0x1d, 0x28, 0xf1, 0x57, 0x67, 0x8f, 0x84, 0xfa, 0xf2, 0xa5, 0xc8, 0xd7, 0x47,
	0xa1, 0x28, 0xaa, 0x11, 0x10, 0x12, 0x2e, 0x59, 0x8a, 0xab, 0x9a, 0x2a, 0xf0, 0x32, 0x7f, 0x97,
	0x81, 0x82, 0x34, 0x78, 0x06, 0x3a, 0x63, 0x1e, 0x74, 0xb1, 0x52, 0x90, 0x59, 0xb8, 0x14, 0xa4,
	0xbc, 0x90, 0xaf, 0x18, 0x88, 0x4d, 0x55, 0xcb, 0x65, 0x75, 0x5b, 0x6d, 0xca, 0xaf, 0x57, 0x4d,
	0xfd, 0xf5, 0xaa, 0xd9, 0x1a, 0x9f, 0xab, 0x0a, 0x1e, 0xeb, 0x10, 0x0a, 0x89, 0x0e, 0x21, 0x56,
	0x23, 0x8a, 0x89, 0x1a, 0x61, 0xfe, 0x12, 0x56, 0x92, 0x75, 0x65, 0x32, 0x0a, 0x1a, 0xcb, 0x8f,
	0x82, 0xaf, 0x43, 0x39, 0x70, 0x47, 0x98, 0x05, 0xf6, 0xc8, 0x57, 0x01, 0x9c, 0x10, 0x4c, 0x13,
	0xa0, 0x8b, 0x7f, 0x15, 0x28, 0xf8, 0x57, 0x21, 0x7f, 0x66, 0x7b, 0x21, 0xd6, 0x47, 0x54, 0x2c,
	0xcc, 0xf7, 0x60, 0xf5, 0x59, 0xe8, 0x05, 0xae, 0xef, 0xe1, 0xdd, 0x53, 0xe2, 0xf6, 0xb1, 0xe2,
	0xe6, 0x1e, 0x88, 0xb5, 0xbc, 0x3b, 0x2d, 0x5b, 0x7a, 0x69, 0x7e, 0x69, 0x40, 0xed, 0x00, 0x07,
	0xbb, 0x64, 0x1c, 0xd8, 0x7d, 0x2d, 0xfc, 0x2e, 0xc0, 0xc0, 0xa5, 0x2c, 0xe8, 0x8d, 0xed, 0x91,
	0xd6, 0x50, 0x16, 0x94, 0xb6, 0x3d, 0xc2, 0xbc, 0x10, 0x78, 0xb6, 0x7e, 0xaa, 0x0a, 0x01, 0x27,
	0x88, 0x87, 0x1b, 0xb0, 0xd2, 0x97, 0xc2, 0x7a, 0xe3, 0x70, 0x74, 0x12, 0xd5, 0xad, 0xaa, 0xa2,
	0xb6, 0x05, 0x91, 0xdb, 0x8f, 0x47, 0xb6, 0xeb, 0xe9, 0xc9, 0x42, 0x2c, 0xb8, 0x9d, 0xb6, 0xe3,
	0x50, 0xcc, 0x98, 0x2a, 0x5e, 0x7a, 0x69, 0x6e, 0x40, 0xe5, 0x63, 0x3c, 0xb4, 0x3d, 0x65, 0xe1,
	0x1a, 0x14, 0xa4, 0x07, 0xc2, 0xba, 0x92, 0xa5, 0x56, 0xe6, 0x43, 0x58, 0xd9, 0xa3, 0xc4, 0x77,
	0xc8, 0x8b, 0xf1, 0xa5, 0xae, 0x3f, 0x84, 0xea, 0x01, 0x0e, 0x3e, 0x72, 0x3d, 0x8d, 0xd2, 0x1d,
	0x28, 0x0d, 0x5c, 0x0f, 0xf7, 0x42, 0xea, 0x29, 0xa7, 0x8b, 0x7c, 0xfd, 0x9c, 0x7a, 0xe6, 0x07,
	0x70, 0xd3, 0xb2, 0xc7, 0x43, 0xdc, 0xc1, 0x1e, 0x8e, 0x60, 0xe2, 0x2d, 0x86, 0x58, 0x63, 0xa7,
	0x47, 0xf9, 0x53, 0x5d, 0x89, 0x34, 0x55, 0x6c, 0x31, 0x5b, 0x50, 0xf9, 0x39, 0x66, 0x6d, 0xa2,
	0x76, 0x6d, 0x27, 0x4c, 0xaf, 0x6c, 0x37, 0x66, 0x52, 0x72, 0x87, 0x10, 0xef, 0x67, 0x3c, 0x9e,
	0xda, 0xad, 0x87, 0x04, 0xaa, 0x89, 0x8c, 0x41, 0x6b, 0x80, 0x12, 0x84, 0x5e, 0xfb, 0xa8, 0xbd,
	0x5f, 0xbb, 0x86, 0x00, 0x0a, 0x47, 0xc7, 0xfb, 0xed, 0xfd, 0xbd, 0x9a, 0x81, 0x2a, 0x50, 0xec,
	0x74, 0x5b, 0x56, 0x77, 0x7f, 0xaf, 0x96, 0x41, 0x37, 0xa0, 0x72, 0xd8, 0xee, 0x1d, 0x5b, 0x47,
	0x07, 0xd6, 0x7e, 0xa7, 0x53, 0xcb, 0xa2, 0x2a, 0x94, 0x5b, 0x3b, 0xad, 0xf6, 0xde, 0x11, 0x67,
	0xce, 0xf1, 0x65, 0xe7, 0xf9, 0xce, 0xb3, 0xc3, 0x2e, 0x67, 0xcf, 0x6f, 0xff, 0xad, 0x04, 0x37,
	0x22, 0x05, 0x98, 0x9e, 0xb9, 0x7d, 0x8c, 0xba, 0x90, 0x17, 0x5f, 0xf4, 0xd0, 0x5b, 0x17, 0x7f,
	0xef, 0x13, 0x25, 0xa0, 0xf1, 0xf6, 0x22, 0x1f, 0x05, 0xcd, 0x6b, 0xa8, 0x0d, 0xd9, 0x96, 0xe7,
	0xa1, 0xfb, 0xe9, 0x5f, 0xac, 0xb4, 0x44, 0xf3, 0x22, 0x96, 0x48, 0xde, 0x27, 0x50, 0x90, 0x37,
	0x99, 0x28, 0xd5, 0x82, 0xf8, 0x7d, 0x6c, 0x63, 0xe3, 0x12, 0xae, 0xb8, 0x60, 0x79, 0xf7, 0x94,
	0x2a, 0x38, 0x71, 0x9f, 0x99, 0x2a, 0x38, 0x79, 0x9d, 0x68, 0x5e, 0x43, 0x03, 0xa8, 0xc4, 0x2e,
	0xb5, 0xd0, 0x83, 0x85, 0xaf, 0xee, 0x1a, 0x0f, 0x17, 0x61, 0x8d, 0xf4, 0x7c, 0x0a, 0x25, 0x7d,
	0x7b, 0x83, 0xfe, 0x2f, 0x1d, 0xcb, 0x84, 0x86, 0x77, 0x2e, 0xe5, 0x8b, 0xc4, 0x13, 0x58, 0x49,
	0x5e, 0x88, 0xa0, 0xff, 0x4f, 0xdf, 0x3c, 0x7b, 0x99, 0xd3, 0x78, 0xb4, 0x20, 0x77, 0xa4, 0xb0,
	0x0f, 0x30, 0x99, 0xf8, 0xd1, 0x66, 0xca, 0xf6, 0x99, 0x6b, 0x91, 0xc6, 0x83, 0x05, 0x38, 0x23,
	0x25, 0xbf, 0x80, 0x72, 0x34, 0xc9, 0xa2, 0x77, 0x2e, 0x9f, 0x75, 0xa5, 0x8a, 0xcd, 0x45, 0x87,
	0x62, 0x99, 0x57, 0x72, 0xa6, 0x4b, 0xcd, 0xab, 0xc4, 0x94, 0x9b, 0x9a, 0x57, 0xc9, 0xc1, 0x50,
	0x9a, 0x1e, 0x8d, 0x36, 0xa9, 0xa6, 0x4f, 0x4f, 0x76, 0xa9, 0xa6, 0xcf, 0x4c, 0x49, 0xe6, 0xb5,
	0x93, 0x82, 0x28, 0x59, 0xef, 0xff, 0x37, 0x00, 0x00, 0xff, 0xff, 0x17, 0xc8, 0x29, 0x22, 0x78,
	0x22, 0x00, 0x00,
}
