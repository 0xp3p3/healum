// Code generated by protoc-gen-go. DO NOT EDIT.
// source: server/behaviour-srv/proto/behaviour/behaviour.proto

/*
Package go_micro_srv_behaviour is a generated protocol buffer package.

It is generated from these files:
	server/behaviour-srv/proto/behaviour/behaviour.proto

It has these top-level messages:
	GoalData
	GoalArrData
	HabitData
	HabitArrData
	ChallengeData
	ChallengeArrData
	AllGoalsRequest
	AllGoalsResponse
	CreateGoalRequest
	CreateGoalResponse
	UpdateGoalRequest
	UpdateGoalResponse
	ReadGoalRequest
	ReadGoalResponse
	DeleteGoalRequest
	DeleteGoalResponse
	AllHabitsRequest
	AllHabitsResponse
	CreateHabitRequest
	CreateHabitResponse
	UpdateHabitRequest
	UpdateHabitResponse
	ReadHabitRequest
	ReadHabitResponse
	DeleteHabitRequest
	DeleteHabitResponse
	UploadGoalsRequest
	UploadGoalsResponse
	AllChallengesRequest
	AllChallengesResponse
	CreateChallengeRequest
	CreateChallengeResponse
	UpdateChallengeRequest
	UpdateChallengeResponse
	ReadChallengeRequest
	ReadChallengeResponse
	DeleteChallengeRequest
	DeleteChallengeResponse
	FilterRequest
	FilterResponse
	SearchRequest
	SearchResponse
	ShareGoalRequest
	ShareGoalResponse
	ShareChallengeRequest
	ShareChallengeResponse
	ShareHabitRequest
	ShareHabitResponse
	AutocompleteSearchRequest
	AutocompleteSearchResponse
	Goal
	Tracker
	Criteria
	Challenge
	Habit
	Category
	TargetedUser
	ShareGoalUser
	ShareChallengeUser
	ShareHabitUser
	GetSharedGoalRequest
	GetSharedGoalResponse
	GetSharedChallengeRequest
	GetSharedChallengeResponse
	GetSharedHabitRequest
	GetSharedHabitResponse
	GetTopTagsRequest
	GetTopTagsResponse
	AutocompleteTagsRequest
	AutocompleteTagsResponse
	WarmupCacheBehaviourRequest
	WarmupCacheBehaviourResponse
*/
package go_micro_srv_behaviour

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import go_micro_srv_static "server/static-srv/proto/static"
import go_micro_srv_todo "server/todo-srv/proto/todo"
import go_micro_srv_user "server/user-srv/proto/user"
import go_micro_srv_content "server/content-srv/proto/content"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Frequency int32

const (
	Frequency_Frequency_NONE Frequency = 0
	Frequency_DAILY          Frequency = 1
	Frequency_HOURLY         Frequency = 2
	Frequency_WEEKLY         Frequency = 3
	Frequency_MONTHLY        Frequency = 4
)

var Frequency_name = map[int32]string{
	0: "Frequency_NONE",
	1: "DAILY",
	2: "HOURLY",
	3: "WEEKLY",
	4: "MONTHLY",
}
var Frequency_value = map[string]int32{
	"Frequency_NONE": 0,
	"DAILY":          1,
	"HOURLY":         2,
	"WEEKLY":         3,
	"MONTHLY":        4,
}

func (x Frequency) String() string {
	return proto.EnumName(Frequency_name, int32(x))
}
func (Frequency) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Status int32

const (
	Status_Status_NONE Status = 0
	Status_DRAFT       Status = 1
	Status_PUBLISHED   Status = 2
)

var Status_name = map[int32]string{
	0: "Status_NONE",
	1: "DRAFT",
	2: "PUBLISHED",
}
var Status_value = map[string]int32{
	"Status_NONE": 0,
	"DRAFT":       1,
	"PUBLISHED":   2,
}

func (x Status) String() string {
	return proto.EnumName(Status_name, int32(x))
}
func (Status) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type GoalData struct {
	Goal *Goal `protobuf:"bytes,1,opt,name=goal" json:"goal,omitempty"`
}

func (m *GoalData) Reset()                    { *m = GoalData{} }
func (m *GoalData) String() string            { return proto.CompactTextString(m) }
func (*GoalData) ProtoMessage()               {}
func (*GoalData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *GoalData) GetGoal() *Goal {
	if m != nil {
		return m.Goal
	}
	return nil
}

type GoalArrData struct {
	Goals []*Goal `protobuf:"bytes,1,rep,name=goals" json:"goals,omitempty"`
}

func (m *GoalArrData) Reset()                    { *m = GoalArrData{} }
func (m *GoalArrData) String() string            { return proto.CompactTextString(m) }
func (*GoalArrData) ProtoMessage()               {}
func (*GoalArrData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *GoalArrData) GetGoals() []*Goal {
	if m != nil {
		return m.Goals
	}
	return nil
}

type HabitData struct {
	Habit *Habit `protobuf:"bytes,1,opt,name=habit" json:"habit,omitempty"`
}

func (m *HabitData) Reset()                    { *m = HabitData{} }
func (m *HabitData) String() string            { return proto.CompactTextString(m) }
func (*HabitData) ProtoMessage()               {}
func (*HabitData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *HabitData) GetHabit() *Habit {
	if m != nil {
		return m.Habit
	}
	return nil
}

type HabitArrData struct {
	Habits []*Habit `protobuf:"bytes,1,rep,name=habits" json:"habits,omitempty"`
}

func (m *HabitArrData) Reset()                    { *m = HabitArrData{} }
func (m *HabitArrData) String() string            { return proto.CompactTextString(m) }
func (*HabitArrData) ProtoMessage()               {}
func (*HabitArrData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *HabitArrData) GetHabits() []*Habit {
	if m != nil {
		return m.Habits
	}
	return nil
}

type ChallengeData struct {
	Challenge *Challenge `protobuf:"bytes,1,opt,name=challenge" json:"challenge,omitempty"`
}

func (m *ChallengeData) Reset()                    { *m = ChallengeData{} }
func (m *ChallengeData) String() string            { return proto.CompactTextString(m) }
func (*ChallengeData) ProtoMessage()               {}
func (*ChallengeData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ChallengeData) GetChallenge() *Challenge {
	if m != nil {
		return m.Challenge
	}
	return nil
}

type ChallengeArrData struct {
	Challenges []*Challenge `protobuf:"bytes,1,rep,name=challenges" json:"challenges,omitempty"`
}

func (m *ChallengeArrData) Reset()                    { *m = ChallengeArrData{} }
func (m *ChallengeArrData) String() string            { return proto.CompactTextString(m) }
func (*ChallengeArrData) ProtoMessage()               {}
func (*ChallengeArrData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *ChallengeArrData) GetChallenges() []*Challenge {
	if m != nil {
		return m.Challenges
	}
	return nil
}

type AllGoalsRequest struct {
	OrgId         string `protobuf:"bytes,1,opt,name=org_id,json=orgId" json:"org_id,omitempty"`
	TeamId        string `protobuf:"bytes,2,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
	Limit         int64  `protobuf:"varint,3,opt,name=limit" json:"limit,omitempty"`
	Offset        int64  `protobuf:"varint,4,opt,name=offset" json:"offset,omitempty"`
	SortParameter string `protobuf:"bytes,5,opt,name=sort_parameter,json=sortParameter" json:"sort_parameter,omitempty"`
	SortDirection string `protobuf:"bytes,6,opt,name=sort_direction,json=sortDirection" json:"sort_direction,omitempty"`
}

func (m *AllGoalsRequest) Reset()                    { *m = AllGoalsRequest{} }
func (m *AllGoalsRequest) String() string            { return proto.CompactTextString(m) }
func (*AllGoalsRequest) ProtoMessage()               {}
func (*AllGoalsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *AllGoalsRequest) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *AllGoalsRequest) GetTeamId() string {
	if m != nil {
		return m.TeamId
	}
	return ""
}

func (m *AllGoalsRequest) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *AllGoalsRequest) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *AllGoalsRequest) GetSortParameter() string {
	if m != nil {
		return m.SortParameter
	}
	return ""
}

func (m *AllGoalsRequest) GetSortDirection() string {
	if m != nil {
		return m.SortDirection
	}
	return ""
}

type AllGoalsResponse struct {
	Data    *GoalArrData `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	Code    int64        `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Message string       `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *AllGoalsResponse) Reset()                    { *m = AllGoalsResponse{} }
func (m *AllGoalsResponse) String() string            { return proto.CompactTextString(m) }
func (*AllGoalsResponse) ProtoMessage()               {}
func (*AllGoalsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *AllGoalsResponse) GetData() *GoalArrData {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *AllGoalsResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *AllGoalsResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type CreateGoalRequest struct {
	Goal   *Goal  `protobuf:"bytes,1,opt,name=goal" json:"goal,omitempty"`
	UserId string `protobuf:"bytes,2,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	OrgId  string `protobuf:"bytes,3,opt,name=org_id,json=orgId" json:"org_id,omitempty"`
	TeamId string `protobuf:"bytes,4,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
}

func (m *CreateGoalRequest) Reset()                    { *m = CreateGoalRequest{} }
func (m *CreateGoalRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateGoalRequest) ProtoMessage()               {}
func (*CreateGoalRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *CreateGoalRequest) GetGoal() *Goal {
	if m != nil {
		return m.Goal
	}
	return nil
}

func (m *CreateGoalRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *CreateGoalRequest) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *CreateGoalRequest) GetTeamId() string {
	if m != nil {
		return m.TeamId
	}
	return ""
}

type CreateGoalResponse struct {
	Data    *GoalData `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	Code    int64     `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Message string    `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *CreateGoalResponse) Reset()                    { *m = CreateGoalResponse{} }
func (m *CreateGoalResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateGoalResponse) ProtoMessage()               {}
func (*CreateGoalResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *CreateGoalResponse) GetData() *GoalData {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *CreateGoalResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *CreateGoalResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type UpdateGoalRequest struct {
	Goal   *Goal  `protobuf:"bytes,1,opt,name=goal" json:"goal,omitempty"`
	OrgId  string `protobuf:"bytes,2,opt,name=org_id,json=orgId" json:"org_id,omitempty"`
	TeamId string `protobuf:"bytes,3,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
}

func (m *UpdateGoalRequest) Reset()                    { *m = UpdateGoalRequest{} }
func (m *UpdateGoalRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateGoalRequest) ProtoMessage()               {}
func (*UpdateGoalRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *UpdateGoalRequest) GetGoal() *Goal {
	if m != nil {
		return m.Goal
	}
	return nil
}

func (m *UpdateGoalRequest) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *UpdateGoalRequest) GetTeamId() string {
	if m != nil {
		return m.TeamId
	}
	return ""
}

type UpdateGoalResponse struct {
	Data    *GoalData `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	Code    int64     `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Message string    `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *UpdateGoalResponse) Reset()                    { *m = UpdateGoalResponse{} }
func (m *UpdateGoalResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateGoalResponse) ProtoMessage()               {}
func (*UpdateGoalResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *UpdateGoalResponse) GetData() *GoalData {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *UpdateGoalResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *UpdateGoalResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type ReadGoalRequest struct {
	GoalId string `protobuf:"bytes,1,opt,name=goal_id,json=goalId" json:"goal_id,omitempty"`
	OrgId  string `protobuf:"bytes,2,opt,name=org_id,json=orgId" json:"org_id,omitempty"`
	TeamId string `protobuf:"bytes,3,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
}

func (m *ReadGoalRequest) Reset()                    { *m = ReadGoalRequest{} }
func (m *ReadGoalRequest) String() string            { return proto.CompactTextString(m) }
func (*ReadGoalRequest) ProtoMessage()               {}
func (*ReadGoalRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *ReadGoalRequest) GetGoalId() string {
	if m != nil {
		return m.GoalId
	}
	return ""
}

func (m *ReadGoalRequest) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *ReadGoalRequest) GetTeamId() string {
	if m != nil {
		return m.TeamId
	}
	return ""
}

type ReadGoalResponse struct {
	Data    *GoalData `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	Code    int64     `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Message string    `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *ReadGoalResponse) Reset()                    { *m = ReadGoalResponse{} }
func (m *ReadGoalResponse) String() string            { return proto.CompactTextString(m) }
func (*ReadGoalResponse) ProtoMessage()               {}
func (*ReadGoalResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *ReadGoalResponse) GetData() *GoalData {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *ReadGoalResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *ReadGoalResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type DeleteGoalRequest struct {
	GoalId string `protobuf:"bytes,1,opt,name=goal_id,json=goalId" json:"goal_id,omitempty"`
	OrgId  string `protobuf:"bytes,2,opt,name=org_id,json=orgId" json:"org_id,omitempty"`
	TeamId string `protobuf:"bytes,3,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
}

func (m *DeleteGoalRequest) Reset()                    { *m = DeleteGoalRequest{} }
func (m *DeleteGoalRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteGoalRequest) ProtoMessage()               {}
func (*DeleteGoalRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *DeleteGoalRequest) GetGoalId() string {
	if m != nil {
		return m.GoalId
	}
	return ""
}

func (m *DeleteGoalRequest) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *DeleteGoalRequest) GetTeamId() string {
	if m != nil {
		return m.TeamId
	}
	return ""
}

type DeleteGoalResponse struct {
	Code    int64  `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Message string `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *DeleteGoalResponse) Reset()                    { *m = DeleteGoalResponse{} }
func (m *DeleteGoalResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteGoalResponse) ProtoMessage()               {}
func (*DeleteGoalResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *DeleteGoalResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *DeleteGoalResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type AllHabitsRequest struct {
	OrgId         string `protobuf:"bytes,1,opt,name=org_id,json=orgId" json:"org_id,omitempty"`
	TeamId        string `protobuf:"bytes,2,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
	Limit         int64  `protobuf:"varint,3,opt,name=limit" json:"limit,omitempty"`
	Offset        int64  `protobuf:"varint,4,opt,name=offset" json:"offset,omitempty"`
	SortParameter string `protobuf:"bytes,5,opt,name=sort_parameter,json=sortParameter" json:"sort_parameter,omitempty"`
	SortDirection string `protobuf:"bytes,6,opt,name=sort_direction,json=sortDirection" json:"sort_direction,omitempty"`
}

func (m *AllHabitsRequest) Reset()                    { *m = AllHabitsRequest{} }
func (m *AllHabitsRequest) String() string            { return proto.CompactTextString(m) }
func (*AllHabitsRequest) ProtoMessage()               {}
func (*AllHabitsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *AllHabitsRequest) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *AllHabitsRequest) GetTeamId() string {
	if m != nil {
		return m.TeamId
	}
	return ""
}

func (m *AllHabitsRequest) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *AllHabitsRequest) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *AllHabitsRequest) GetSortParameter() string {
	if m != nil {
		return m.SortParameter
	}
	return ""
}

func (m *AllHabitsRequest) GetSortDirection() string {
	if m != nil {
		return m.SortDirection
	}
	return ""
}

type AllHabitsResponse struct {
	Data    *HabitArrData `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	Code    int64         `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Message string        `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *AllHabitsResponse) Reset()                    { *m = AllHabitsResponse{} }
func (m *AllHabitsResponse) String() string            { return proto.CompactTextString(m) }
func (*AllHabitsResponse) ProtoMessage()               {}
func (*AllHabitsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *AllHabitsResponse) GetData() *HabitArrData {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *AllHabitsResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *AllHabitsResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type CreateHabitRequest struct {
	Habit  *Habit `protobuf:"bytes,1,opt,name=habit" json:"habit,omitempty"`
	UserId string `protobuf:"bytes,2,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	OrgId  string `protobuf:"bytes,3,opt,name=org_id,json=orgId" json:"org_id,omitempty"`
	TeamId string `protobuf:"bytes,4,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
}

func (m *CreateHabitRequest) Reset()                    { *m = CreateHabitRequest{} }
func (m *CreateHabitRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateHabitRequest) ProtoMessage()               {}
func (*CreateHabitRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *CreateHabitRequest) GetHabit() *Habit {
	if m != nil {
		return m.Habit
	}
	return nil
}

func (m *CreateHabitRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *CreateHabitRequest) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *CreateHabitRequest) GetTeamId() string {
	if m != nil {
		return m.TeamId
	}
	return ""
}

type CreateHabitResponse struct {
	Data    *HabitData `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	Code    int64      `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Message string     `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *CreateHabitResponse) Reset()                    { *m = CreateHabitResponse{} }
func (m *CreateHabitResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateHabitResponse) ProtoMessage()               {}
func (*CreateHabitResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *CreateHabitResponse) GetData() *HabitData {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *CreateHabitResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *CreateHabitResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type UpdateHabitRequest struct {
	Habit  *Habit `protobuf:"bytes,1,opt,name=habit" json:"habit,omitempty"`
	OrgId  string `protobuf:"bytes,2,opt,name=org_id,json=orgId" json:"org_id,omitempty"`
	TeamId string `protobuf:"bytes,3,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
}

func (m *UpdateHabitRequest) Reset()                    { *m = UpdateHabitRequest{} }
func (m *UpdateHabitRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateHabitRequest) ProtoMessage()               {}
func (*UpdateHabitRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *UpdateHabitRequest) GetHabit() *Habit {
	if m != nil {
		return m.Habit
	}
	return nil
}

func (m *UpdateHabitRequest) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *UpdateHabitRequest) GetTeamId() string {
	if m != nil {
		return m.TeamId
	}
	return ""
}

type UpdateHabitResponse struct {
	Data    *HabitData `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	Code    int64      `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Message string     `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *UpdateHabitResponse) Reset()                    { *m = UpdateHabitResponse{} }
func (m *UpdateHabitResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateHabitResponse) ProtoMessage()               {}
func (*UpdateHabitResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *UpdateHabitResponse) GetData() *HabitData {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *UpdateHabitResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *UpdateHabitResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type ReadHabitRequest struct {
	HabitId string `protobuf:"bytes,1,opt,name=habit_id,json=habitId" json:"habit_id,omitempty"`
	OrgId   string `protobuf:"bytes,2,opt,name=org_id,json=orgId" json:"org_id,omitempty"`
	TeamId  string `protobuf:"bytes,3,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
}

func (m *ReadHabitRequest) Reset()                    { *m = ReadHabitRequest{} }
func (m *ReadHabitRequest) String() string            { return proto.CompactTextString(m) }
func (*ReadHabitRequest) ProtoMessage()               {}
func (*ReadHabitRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *ReadHabitRequest) GetHabitId() string {
	if m != nil {
		return m.HabitId
	}
	return ""
}

func (m *ReadHabitRequest) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *ReadHabitRequest) GetTeamId() string {
	if m != nil {
		return m.TeamId
	}
	return ""
}

type ReadHabitResponse struct {
	Data    *HabitData `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	Code    int64      `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Message string     `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *ReadHabitResponse) Reset()                    { *m = ReadHabitResponse{} }
func (m *ReadHabitResponse) String() string            { return proto.CompactTextString(m) }
func (*ReadHabitResponse) ProtoMessage()               {}
func (*ReadHabitResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *ReadHabitResponse) GetData() *HabitData {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *ReadHabitResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *ReadHabitResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type DeleteHabitRequest struct {
	HabitId string `protobuf:"bytes,1,opt,name=habit_id,json=habitId" json:"habit_id,omitempty"`
	OrgId   string `protobuf:"bytes,2,opt,name=org_id,json=orgId" json:"org_id,omitempty"`
	TeamId  string `protobuf:"bytes,3,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
}

func (m *DeleteHabitRequest) Reset()                    { *m = DeleteHabitRequest{} }
func (m *DeleteHabitRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteHabitRequest) ProtoMessage()               {}
func (*DeleteHabitRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *DeleteHabitRequest) GetHabitId() string {
	if m != nil {
		return m.HabitId
	}
	return ""
}

func (m *DeleteHabitRequest) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *DeleteHabitRequest) GetTeamId() string {
	if m != nil {
		return m.TeamId
	}
	return ""
}

type DeleteHabitResponse struct {
	Code    int64  `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Message string `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *DeleteHabitResponse) Reset()                    { *m = DeleteHabitResponse{} }
func (m *DeleteHabitResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteHabitResponse) ProtoMessage()               {}
func (*DeleteHabitResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *DeleteHabitResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *DeleteHabitResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type UploadGoalsRequest struct {
	Id    string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	OrgId string `protobuf:"bytes,2,opt,name=org_id,json=orgId" json:"org_id,omitempty"`
}

func (m *UploadGoalsRequest) Reset()                    { *m = UploadGoalsRequest{} }
func (m *UploadGoalsRequest) String() string            { return proto.CompactTextString(m) }
func (*UploadGoalsRequest) ProtoMessage()               {}
func (*UploadGoalsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *UploadGoalsRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *UploadGoalsRequest) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

type UploadGoalsResponse struct {
	Code    int64  `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
}

func (m *UploadGoalsResponse) Reset()                    { *m = UploadGoalsResponse{} }
func (m *UploadGoalsResponse) String() string            { return proto.CompactTextString(m) }
func (*UploadGoalsResponse) ProtoMessage()               {}
func (*UploadGoalsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *UploadGoalsResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *UploadGoalsResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type AllChallengesRequest struct {
	OrgId         string `protobuf:"bytes,1,opt,name=org_id,json=orgId" json:"org_id,omitempty"`
	TeamId        string `protobuf:"bytes,2,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
	Limit         int64  `protobuf:"varint,3,opt,name=limit" json:"limit,omitempty"`
	Offset        int64  `protobuf:"varint,4,opt,name=offset" json:"offset,omitempty"`
	SortParameter string `protobuf:"bytes,5,opt,name=sort_parameter,json=sortParameter" json:"sort_parameter,omitempty"`
	SortDirection string `protobuf:"bytes,6,opt,name=sort_direction,json=sortDirection" json:"sort_direction,omitempty"`
}

func (m *AllChallengesRequest) Reset()                    { *m = AllChallengesRequest{} }
func (m *AllChallengesRequest) String() string            { return proto.CompactTextString(m) }
func (*AllChallengesRequest) ProtoMessage()               {}
func (*AllChallengesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func (m *AllChallengesRequest) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *AllChallengesRequest) GetTeamId() string {
	if m != nil {
		return m.TeamId
	}
	return ""
}

func (m *AllChallengesRequest) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *AllChallengesRequest) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *AllChallengesRequest) GetSortParameter() string {
	if m != nil {
		return m.SortParameter
	}
	return ""
}

func (m *AllChallengesRequest) GetSortDirection() string {
	if m != nil {
		return m.SortDirection
	}
	return ""
}

type AllChallengesResponse struct {
	Data    *ChallengeArrData `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	Code    int64             `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Message string            `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *AllChallengesResponse) Reset()                    { *m = AllChallengesResponse{} }
func (m *AllChallengesResponse) String() string            { return proto.CompactTextString(m) }
func (*AllChallengesResponse) ProtoMessage()               {}
func (*AllChallengesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

func (m *AllChallengesResponse) GetData() *ChallengeArrData {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *AllChallengesResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *AllChallengesResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type CreateChallengeRequest struct {
	Challenge *Challenge `protobuf:"bytes,1,opt,name=challenge" json:"challenge,omitempty"`
	UserId    string     `protobuf:"bytes,2,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	OrgId     string     `protobuf:"bytes,3,opt,name=org_id,json=orgId" json:"org_id,omitempty"`
	TeamId    string     `protobuf:"bytes,4,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
}

func (m *CreateChallengeRequest) Reset()                    { *m = CreateChallengeRequest{} }
func (m *CreateChallengeRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateChallengeRequest) ProtoMessage()               {}
func (*CreateChallengeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30} }

func (m *CreateChallengeRequest) GetChallenge() *Challenge {
	if m != nil {
		return m.Challenge
	}
	return nil
}

func (m *CreateChallengeRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *CreateChallengeRequest) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *CreateChallengeRequest) GetTeamId() string {
	if m != nil {
		return m.TeamId
	}
	return ""
}

type CreateChallengeResponse struct {
	Data    *ChallengeData `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	Code    int64          `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Message string         `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *CreateChallengeResponse) Reset()                    { *m = CreateChallengeResponse{} }
func (m *CreateChallengeResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateChallengeResponse) ProtoMessage()               {}
func (*CreateChallengeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{31} }

func (m *CreateChallengeResponse) GetData() *ChallengeData {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *CreateChallengeResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *CreateChallengeResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type UpdateChallengeRequest struct {
	Challenge *Challenge `protobuf:"bytes,1,opt,name=challenge" json:"challenge,omitempty"`
	OrgId     string     `protobuf:"bytes,2,opt,name=org_id,json=orgId" json:"org_id,omitempty"`
	TeamId    string     `protobuf:"bytes,3,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
}

func (m *UpdateChallengeRequest) Reset()                    { *m = UpdateChallengeRequest{} }
func (m *UpdateChallengeRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateChallengeRequest) ProtoMessage()               {}
func (*UpdateChallengeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{32} }

func (m *UpdateChallengeRequest) GetChallenge() *Challenge {
	if m != nil {
		return m.Challenge
	}
	return nil
}

func (m *UpdateChallengeRequest) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *UpdateChallengeRequest) GetTeamId() string {
	if m != nil {
		return m.TeamId
	}
	return ""
}

type UpdateChallengeResponse struct {
	Data    *ChallengeData `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	Code    int64          `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Message string         `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *UpdateChallengeResponse) Reset()                    { *m = UpdateChallengeResponse{} }
func (m *UpdateChallengeResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateChallengeResponse) ProtoMessage()               {}
func (*UpdateChallengeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{33} }

func (m *UpdateChallengeResponse) GetData() *ChallengeData {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *UpdateChallengeResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *UpdateChallengeResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type ReadChallengeRequest struct {
	ChallengeId string `protobuf:"bytes,1,opt,name=challenge_id,json=challengeId" json:"challenge_id,omitempty"`
	OrgId       string `protobuf:"bytes,2,opt,name=org_id,json=orgId" json:"org_id,omitempty"`
	TeamId      string `protobuf:"bytes,3,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
}

func (m *ReadChallengeRequest) Reset()                    { *m = ReadChallengeRequest{} }
func (m *ReadChallengeRequest) String() string            { return proto.CompactTextString(m) }
func (*ReadChallengeRequest) ProtoMessage()               {}
func (*ReadChallengeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{34} }

func (m *ReadChallengeRequest) GetChallengeId() string {
	if m != nil {
		return m.ChallengeId
	}
	return ""
}

func (m *ReadChallengeRequest) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *ReadChallengeRequest) GetTeamId() string {
	if m != nil {
		return m.TeamId
	}
	return ""
}

type ReadChallengeResponse struct {
	Data    *ChallengeData `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	Code    int64          `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Message string         `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *ReadChallengeResponse) Reset()                    { *m = ReadChallengeResponse{} }
func (m *ReadChallengeResponse) String() string            { return proto.CompactTextString(m) }
func (*ReadChallengeResponse) ProtoMessage()               {}
func (*ReadChallengeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{35} }

func (m *ReadChallengeResponse) GetData() *ChallengeData {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *ReadChallengeResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *ReadChallengeResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type DeleteChallengeRequest struct {
	ChallengeId string `protobuf:"bytes,1,opt,name=challenge_id,json=challengeId" json:"challenge_id,omitempty"`
	OrgId       string `protobuf:"bytes,2,opt,name=org_id,json=orgId" json:"org_id,omitempty"`
	TeamId      string `protobuf:"bytes,3,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
}

func (m *DeleteChallengeRequest) Reset()                    { *m = DeleteChallengeRequest{} }
func (m *DeleteChallengeRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteChallengeRequest) ProtoMessage()               {}
func (*DeleteChallengeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{36} }

func (m *DeleteChallengeRequest) GetChallengeId() string {
	if m != nil {
		return m.ChallengeId
	}
	return ""
}

func (m *DeleteChallengeRequest) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *DeleteChallengeRequest) GetTeamId() string {
	if m != nil {
		return m.TeamId
	}
	return ""
}

type DeleteChallengeResponse struct {
	Code    int64  `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Message string `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *DeleteChallengeResponse) Reset()                    { *m = DeleteChallengeResponse{} }
func (m *DeleteChallengeResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteChallengeResponse) ProtoMessage()               {}
func (*DeleteChallengeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{37} }

func (m *DeleteChallengeResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *DeleteChallengeResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type FilterRequest struct {
	OrgId         string   `protobuf:"bytes,1,opt,name=org_id,json=orgId" json:"org_id,omitempty"`
	TeamId        string   `protobuf:"bytes,2,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
	Limit         int64    `protobuf:"varint,3,opt,name=limit" json:"limit,omitempty"`
	Offset        int64    `protobuf:"varint,4,opt,name=offset" json:"offset,omitempty"`
	Type          []string `protobuf:"bytes,5,rep,name=type" json:"type,omitempty"`
	Status        []Status `protobuf:"varint,6,rep,packed,name=status,enum=go.micro.srv.behaviour.Status" json:"status,omitempty"`
	Category      []string `protobuf:"bytes,7,rep,name=category" json:"category,omitempty"`
	Creator       []string `protobuf:"bytes,8,rep,name=creator" json:"creator,omitempty"`
	SortParameter string   `protobuf:"bytes,9,opt,name=sort_parameter,json=sortParameter" json:"sort_parameter,omitempty"`
	SortDirection string   `protobuf:"bytes,10,opt,name=sort_direction,json=sortDirection" json:"sort_direction,omitempty"`
}

func (m *FilterRequest) Reset()                    { *m = FilterRequest{} }
func (m *FilterRequest) String() string            { return proto.CompactTextString(m) }
func (*FilterRequest) ProtoMessage()               {}
func (*FilterRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{38} }

func (m *FilterRequest) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *FilterRequest) GetTeamId() string {
	if m != nil {
		return m.TeamId
	}
	return ""
}

func (m *FilterRequest) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *FilterRequest) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *FilterRequest) GetType() []string {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *FilterRequest) GetStatus() []Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *FilterRequest) GetCategory() []string {
	if m != nil {
		return m.Category
	}
	return nil
}

func (m *FilterRequest) GetCreator() []string {
	if m != nil {
		return m.Creator
	}
	return nil
}

func (m *FilterRequest) GetSortParameter() string {
	if m != nil {
		return m.SortParameter
	}
	return ""
}

func (m *FilterRequest) GetSortDirection() string {
	if m != nil {
		return m.SortDirection
	}
	return ""
}

type FilterResponse struct {
	Data    *FilterResponse_Data `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	Code    int64                `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Message string               `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *FilterResponse) Reset()                    { *m = FilterResponse{} }
func (m *FilterResponse) String() string            { return proto.CompactTextString(m) }
func (*FilterResponse) ProtoMessage()               {}
func (*FilterResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{39} }

func (m *FilterResponse) GetData() *FilterResponse_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *FilterResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *FilterResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type FilterResponse_Data struct {
	Goals      []*Goal      `protobuf:"bytes,1,rep,name=goals" json:"goals,omitempty"`
	Habits     []*Habit     `protobuf:"bytes,2,rep,name=habits" json:"habits,omitempty"`
	Challenges []*Challenge `protobuf:"bytes,3,rep,name=challenges" json:"challenges,omitempty"`
}

func (m *FilterResponse_Data) Reset()                    { *m = FilterResponse_Data{} }
func (m *FilterResponse_Data) String() string            { return proto.CompactTextString(m) }
func (*FilterResponse_Data) ProtoMessage()               {}
func (*FilterResponse_Data) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{39, 0} }

func (m *FilterResponse_Data) GetGoals() []*Goal {
	if m != nil {
		return m.Goals
	}
	return nil
}

func (m *FilterResponse_Data) GetHabits() []*Habit {
	if m != nil {
		return m.Habits
	}
	return nil
}

func (m *FilterResponse_Data) GetChallenges() []*Challenge {
	if m != nil {
		return m.Challenges
	}
	return nil
}

type SearchRequest struct {
	OrgId         string `protobuf:"bytes,1,opt,name=org_id,json=orgId" json:"org_id,omitempty"`
	TeamId        string `protobuf:"bytes,2,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
	Limit         int64  `protobuf:"varint,3,opt,name=limit" json:"limit,omitempty"`
	Offset        int64  `protobuf:"varint,4,opt,name=offset" json:"offset,omitempty"`
	Name          string `protobuf:"bytes,5,opt,name=name" json:"name,omitempty"`
	Summary       string `protobuf:"bytes,6,opt,name=summary" json:"summary,omitempty"`
	Description   string `protobuf:"bytes,7,opt,name=description" json:"description,omitempty"`
	SortParameter string `protobuf:"bytes,8,opt,name=sort_parameter,json=sortParameter" json:"sort_parameter,omitempty"`
	SortDirection string `protobuf:"bytes,9,opt,name=sort_direction,json=sortDirection" json:"sort_direction,omitempty"`
}

func (m *SearchRequest) Reset()                    { *m = SearchRequest{} }
func (m *SearchRequest) String() string            { return proto.CompactTextString(m) }
func (*SearchRequest) ProtoMessage()               {}
func (*SearchRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{40} }

func (m *SearchRequest) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *SearchRequest) GetTeamId() string {
	if m != nil {
		return m.TeamId
	}
	return ""
}

func (m *SearchRequest) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *SearchRequest) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *SearchRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SearchRequest) GetSummary() string {
	if m != nil {
		return m.Summary
	}
	return ""
}

func (m *SearchRequest) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *SearchRequest) GetSortParameter() string {
	if m != nil {
		return m.SortParameter
	}
	return ""
}

func (m *SearchRequest) GetSortDirection() string {
	if m != nil {
		return m.SortDirection
	}
	return ""
}

type SearchResponse struct {
	Data    *SearchResponse_Data `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	Code    int64                `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Message string               `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *SearchResponse) Reset()                    { *m = SearchResponse{} }
func (m *SearchResponse) String() string            { return proto.CompactTextString(m) }
func (*SearchResponse) ProtoMessage()               {}
func (*SearchResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{41} }

func (m *SearchResponse) GetData() *SearchResponse_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *SearchResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *SearchResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type SearchResponse_Data struct {
	Goals      []*Goal      `protobuf:"bytes,1,rep,name=goals" json:"goals,omitempty"`
	Habits     []*Habit     `protobuf:"bytes,2,rep,name=habits" json:"habits,omitempty"`
	Challenges []*Challenge `protobuf:"bytes,3,rep,name=challenges" json:"challenges,omitempty"`
}

func (m *SearchResponse_Data) Reset()                    { *m = SearchResponse_Data{} }
func (m *SearchResponse_Data) String() string            { return proto.CompactTextString(m) }
func (*SearchResponse_Data) ProtoMessage()               {}
func (*SearchResponse_Data) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{41, 0} }

func (m *SearchResponse_Data) GetGoals() []*Goal {
	if m != nil {
		return m.Goals
	}
	return nil
}

func (m *SearchResponse_Data) GetHabits() []*Habit {
	if m != nil {
		return m.Habits
	}
	return nil
}

func (m *SearchResponse_Data) GetChallenges() []*Challenge {
	if m != nil {
		return m.Challenges
	}
	return nil
}

type ShareGoalRequest struct {
	Goals  []*Goal         `protobuf:"bytes,1,rep,name=goals" json:"goals,omitempty"`
	Users  []*TargetedUser `protobuf:"bytes,2,rep,name=users" json:"users,omitempty"`
	UserId string          `protobuf:"bytes,3,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	OrgId  string          `protobuf:"bytes,4,opt,name=org_id,json=orgId" json:"org_id,omitempty"`
	TeamId string          `protobuf:"bytes,5,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
}

func (m *ShareGoalRequest) Reset()                    { *m = ShareGoalRequest{} }
func (m *ShareGoalRequest) String() string            { return proto.CompactTextString(m) }
func (*ShareGoalRequest) ProtoMessage()               {}
func (*ShareGoalRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{42} }

func (m *ShareGoalRequest) GetGoals() []*Goal {
	if m != nil {
		return m.Goals
	}
	return nil
}

func (m *ShareGoalRequest) GetUsers() []*TargetedUser {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *ShareGoalRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *ShareGoalRequest) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *ShareGoalRequest) GetTeamId() string {
	if m != nil {
		return m.TeamId
	}
	return ""
}

type ShareGoalResponse struct {
	Code    int64  `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
}

func (m *ShareGoalResponse) Reset()                    { *m = ShareGoalResponse{} }
func (m *ShareGoalResponse) String() string            { return proto.CompactTextString(m) }
func (*ShareGoalResponse) ProtoMessage()               {}
func (*ShareGoalResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{43} }

func (m *ShareGoalResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *ShareGoalResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type ShareChallengeRequest struct {
	Challenges []*Challenge    `protobuf:"bytes,1,rep,name=challenges" json:"challenges,omitempty"`
	Users      []*TargetedUser `protobuf:"bytes,2,rep,name=users" json:"users,omitempty"`
	UserId     string          `protobuf:"bytes,3,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	OrgId      string          `protobuf:"bytes,4,opt,name=org_id,json=orgId" json:"org_id,omitempty"`
	TeamId     string          `protobuf:"bytes,5,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
}

func (m *ShareChallengeRequest) Reset()                    { *m = ShareChallengeRequest{} }
func (m *ShareChallengeRequest) String() string            { return proto.CompactTextString(m) }
func (*ShareChallengeRequest) ProtoMessage()               {}
func (*ShareChallengeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{44} }

func (m *ShareChallengeRequest) GetChallenges() []*Challenge {
	if m != nil {
		return m.Challenges
	}
	return nil
}

func (m *ShareChallengeRequest) GetUsers() []*TargetedUser {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *ShareChallengeRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *ShareChallengeRequest) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *ShareChallengeRequest) GetTeamId() string {
	if m != nil {
		return m.TeamId
	}
	return ""
}

type ShareChallengeResponse struct {
	Code    int64  `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
}

func (m *ShareChallengeResponse) Reset()                    { *m = ShareChallengeResponse{} }
func (m *ShareChallengeResponse) String() string            { return proto.CompactTextString(m) }
func (*ShareChallengeResponse) ProtoMessage()               {}
func (*ShareChallengeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{45} }

func (m *ShareChallengeResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *ShareChallengeResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type ShareHabitRequest struct {
	Habits []*Habit        `protobuf:"bytes,1,rep,name=habits" json:"habits,omitempty"`
	Users  []*TargetedUser `protobuf:"bytes,2,rep,name=users" json:"users,omitempty"`
	UserId string          `protobuf:"bytes,3,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	OrgId  string          `protobuf:"bytes,4,opt,name=org_id,json=orgId" json:"org_id,omitempty"`
	TeamId string          `protobuf:"bytes,5,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
}

func (m *ShareHabitRequest) Reset()                    { *m = ShareHabitRequest{} }
func (m *ShareHabitRequest) String() string            { return proto.CompactTextString(m) }
func (*ShareHabitRequest) ProtoMessage()               {}
func (*ShareHabitRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{46} }

func (m *ShareHabitRequest) GetHabits() []*Habit {
	if m != nil {
		return m.Habits
	}
	return nil
}

func (m *ShareHabitRequest) GetUsers() []*TargetedUser {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *ShareHabitRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *ShareHabitRequest) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *ShareHabitRequest) GetTeamId() string {
	if m != nil {
		return m.TeamId
	}
	return ""
}

type ShareHabitResponse struct {
	Code    int64  `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
}

func (m *ShareHabitResponse) Reset()                    { *m = ShareHabitResponse{} }
func (m *ShareHabitResponse) String() string            { return proto.CompactTextString(m) }
func (*ShareHabitResponse) ProtoMessage()               {}
func (*ShareHabitResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{47} }

func (m *ShareHabitResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *ShareHabitResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type AutocompleteSearchRequest struct {
	Title string `protobuf:"bytes,1,opt,name=title" json:"title,omitempty"`
}

func (m *AutocompleteSearchRequest) Reset()                    { *m = AutocompleteSearchRequest{} }
func (m *AutocompleteSearchRequest) String() string            { return proto.CompactTextString(m) }
func (*AutocompleteSearchRequest) ProtoMessage()               {}
func (*AutocompleteSearchRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{48} }

func (m *AutocompleteSearchRequest) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

type AutocompleteSearchResponse struct {
	Data    *AutocompleteSearchResponse_Data `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	Code    int64                            `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Message string                           `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *AutocompleteSearchResponse) Reset()                    { *m = AutocompleteSearchResponse{} }
func (m *AutocompleteSearchResponse) String() string            { return proto.CompactTextString(m) }
func (*AutocompleteSearchResponse) ProtoMessage()               {}
func (*AutocompleteSearchResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{49} }

func (m *AutocompleteSearchResponse) GetData() *AutocompleteSearchResponse_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *AutocompleteSearchResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *AutocompleteSearchResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type AutocompleteSearchResponse_Data struct {
	Response []*go_micro_srv_static.AutocompleteResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *AutocompleteSearchResponse_Data) Reset()         { *m = AutocompleteSearchResponse_Data{} }
func (m *AutocompleteSearchResponse_Data) String() string { return proto.CompactTextString(m) }
func (*AutocompleteSearchResponse_Data) ProtoMessage()    {}
func (*AutocompleteSearchResponse_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{49, 0}
}

func (m *AutocompleteSearchResponse_Data) GetResponse() []*go_micro_srv_static.AutocompleteResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

type Goal struct {
	Id                         string                                 `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Title                      string                                 `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
	Summary                    string                                 `protobuf:"bytes,3,opt,name=summary" json:"summary,omitempty"`
	Description                string                                 `protobuf:"bytes,4,opt,name=description" json:"description,omitempty"`
	Image                      string                                 `protobuf:"bytes,5,opt,name=image" json:"image,omitempty"`
	Tags                       []string                               `protobuf:"bytes,6,rep,name=tags" json:"tags,omitempty"`
	Created                    int64                                  `protobuf:"varint,7,opt,name=created" json:"created,omitempty"`
	Updated                    int64                                  `protobuf:"varint,8,opt,name=updated" json:"updated,omitempty"`
	Category                   *go_micro_srv_static.BehaviourCategory `protobuf:"bytes,9,opt,name=category" json:"category,omitempty"`
	Target                     *go_micro_srv_static.Target            `protobuf:"bytes,10,opt,name=target" json:"target,omitempty"`
	Duration                   string                                 `protobuf:"bytes,11,opt,name=duration" json:"duration,omitempty"`
	OrgId                      string                                 `protobuf:"bytes,12,opt,name=org_id,json=orgId" json:"org_id,omitempty"`
	CreatedBy                  *go_micro_srv_user.User                `protobuf:"bytes,13,opt,name=createdBy" json:"createdBy,omitempty"`
	Source                     string                                 `protobuf:"bytes,17,opt,name=source" json:"source,omitempty"`
	Trackers                   []*Tracker                             `protobuf:"bytes,18,rep,name=trackers" json:"trackers,omitempty"`
	SuccessCriterias           []*Criteria                            `protobuf:"bytes,19,rep,name=success_criterias,json=successCriterias" json:"success_criterias,omitempty"`
	Challenges                 []*Challenge                           `protobuf:"bytes,20,rep,name=challenges" json:"challenges,omitempty"`
	Habits                     []*Habit                               `protobuf:"bytes,21,rep,name=habits" json:"habits,omitempty"`
	Articles                   []*go_micro_srv_content.Article        `protobuf:"bytes,22,rep,name=articles" json:"articles,omitempty"`
	Triggers                   []*go_micro_srv_static.ModuleTrigger   `protobuf:"bytes,23,rep,name=triggers" json:"triggers,omitempty"`
	Setbacks                   []*go_micro_srv_static.Setback         `protobuf:"bytes,24,rep,name=setbacks" json:"setbacks,omitempty"`
	Users                      []*TargetedUser                        `protobuf:"bytes,25,rep,name=users" json:"users,omitempty"`
	CompletionApprovalRequired bool                                   `protobuf:"varint,26,opt,name=completionApprovalRequired" json:"completionApprovalRequired,omitempty"`
	Status                     Status                                 `protobuf:"varint,27,opt,name=status,enum=go.micro.srv.behaviour.Status" json:"status,omitempty"`
	Setting                    *go_micro_srv_static.Setting           `protobuf:"bytes,28,opt,name=setting" json:"setting,omitempty"`
	Todos                      *go_micro_srv_todo.Todo                `protobuf:"bytes,29,opt,name=todos" json:"todos,omitempty"`
}

func (m *Goal) Reset()                    { *m = Goal{} }
func (m *Goal) String() string            { return proto.CompactTextString(m) }
func (*Goal) ProtoMessage()               {}
func (*Goal) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{50} }

func (m *Goal) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Goal) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Goal) GetSummary() string {
	if m != nil {
		return m.Summary
	}
	return ""
}

func (m *Goal) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Goal) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *Goal) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *Goal) GetCreated() int64 {
	if m != nil {
		return m.Created
	}
	return 0
}

func (m *Goal) GetUpdated() int64 {
	if m != nil {
		return m.Updated
	}
	return 0
}

func (m *Goal) GetCategory() *go_micro_srv_static.BehaviourCategory {
	if m != nil {
		return m.Category
	}
	return nil
}

func (m *Goal) GetTarget() *go_micro_srv_static.Target {
	if m != nil {
		return m.Target
	}
	return nil
}

func (m *Goal) GetDuration() string {
	if m != nil {
		return m.Duration
	}
	return ""
}

func (m *Goal) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *Goal) GetCreatedBy() *go_micro_srv_user.User {
	if m != nil {
		return m.CreatedBy
	}
	return nil
}

func (m *Goal) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *Goal) GetTrackers() []*Tracker {
	if m != nil {
		return m.Trackers
	}
	return nil
}

func (m *Goal) GetSuccessCriterias() []*Criteria {
	if m != nil {
		return m.SuccessCriterias
	}
	return nil
}

func (m *Goal) GetChallenges() []*Challenge {
	if m != nil {
		return m.Challenges
	}
	return nil
}

func (m *Goal) GetHabits() []*Habit {
	if m != nil {
		return m.Habits
	}
	return nil
}

func (m *Goal) GetArticles() []*go_micro_srv_content.Article {
	if m != nil {
		return m.Articles
	}
	return nil
}

func (m *Goal) GetTriggers() []*go_micro_srv_static.ModuleTrigger {
	if m != nil {
		return m.Triggers
	}
	return nil
}

func (m *Goal) GetSetbacks() []*go_micro_srv_static.Setback {
	if m != nil {
		return m.Setbacks
	}
	return nil
}

func (m *Goal) GetUsers() []*TargetedUser {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *Goal) GetCompletionApprovalRequired() bool {
	if m != nil {
		return m.CompletionApprovalRequired
	}
	return false
}

func (m *Goal) GetStatus() Status {
	if m != nil {
		return m.Status
	}
	return Status_Status_NONE
}

func (m *Goal) GetSetting() *go_micro_srv_static.Setting {
	if m != nil {
		return m.Setting
	}
	return nil
}

func (m *Goal) GetTodos() *go_micro_srv_todo.Todo {
	if m != nil {
		return m.Todos
	}
	return nil
}

type Tracker struct {
	Marker    *go_micro_srv_static.Marker        `protobuf:"bytes,1,opt,name=marker" json:"marker,omitempty"`
	Frequency Frequency                          `protobuf:"varint,2,opt,name=frequency,enum=go.micro.srv.behaviour.Frequency" json:"frequency,omitempty"`
	Method    *go_micro_srv_static.TrackerMethod `protobuf:"bytes,3,opt,name=method" json:"method,omitempty"`
	Until     string                             `protobuf:"bytes,4,opt,name=until" json:"until,omitempty"`
}

func (m *Tracker) Reset()                    { *m = Tracker{} }
func (m *Tracker) String() string            { return proto.CompactTextString(m) }
func (*Tracker) ProtoMessage()               {}
func (*Tracker) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{51} }

func (m *Tracker) GetMarker() *go_micro_srv_static.Marker {
	if m != nil {
		return m.Marker
	}
	return nil
}

func (m *Tracker) GetFrequency() Frequency {
	if m != nil {
		return m.Frequency
	}
	return Frequency_Frequency_NONE
}

func (m *Tracker) GetMethod() *go_micro_srv_static.TrackerMethod {
	if m != nil {
		return m.Method
	}
	return nil
}

func (m *Tracker) GetUntil() string {
	if m != nil {
		return m.Until
	}
	return ""
}

type Criteria struct {
	Value         int64                       `protobuf:"varint,1,opt,name=value" json:"value,omitempty"`
	MarkSucessful bool                        `protobuf:"varint,2,opt,name=mark_sucessful,json=markSucessful" json:"mark_sucessful,omitempty"`
	ExtraTime     string                      `protobuf:"bytes,3,opt,name=extra_time,json=extraTime" json:"extra_time,omitempty"`
	NewTarget     *go_micro_srv_static.Target `protobuf:"bytes,4,opt,name=newTarget" json:"newTarget,omitempty"`
}

func (m *Criteria) Reset()                    { *m = Criteria{} }
func (m *Criteria) String() string            { return proto.CompactTextString(m) }
func (*Criteria) ProtoMessage()               {}
func (*Criteria) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{52} }

func (m *Criteria) GetValue() int64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *Criteria) GetMarkSucessful() bool {
	if m != nil {
		return m.MarkSucessful
	}
	return false
}

func (m *Criteria) GetExtraTime() string {
	if m != nil {
		return m.ExtraTime
	}
	return ""
}

func (m *Criteria) GetNewTarget() *go_micro_srv_static.Target {
	if m != nil {
		return m.NewTarget
	}
	return nil
}

type Challenge struct {
	Id                         string                                 `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Title                      string                                 `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
	Summary                    string                                 `protobuf:"bytes,3,opt,name=summary" json:"summary,omitempty"`
	Description                string                                 `protobuf:"bytes,4,opt,name=description" json:"description,omitempty"`
	Image                      string                                 `protobuf:"bytes,5,opt,name=image" json:"image,omitempty"`
	Tags                       []string                               `protobuf:"bytes,6,rep,name=tags" json:"tags,omitempty"`
	Created                    int64                                  `protobuf:"varint,7,opt,name=created" json:"created,omitempty"`
	Updated                    int64                                  `protobuf:"varint,8,opt,name=updated" json:"updated,omitempty"`
	Category                   *go_micro_srv_static.BehaviourCategory `protobuf:"bytes,9,opt,name=category" json:"category,omitempty"`
	Target                     *go_micro_srv_static.Target            `protobuf:"bytes,10,opt,name=target" json:"target,omitempty"`
	Duration                   string                                 `protobuf:"bytes,11,opt,name=duration" json:"duration,omitempty"`
	OrgId                      string                                 `protobuf:"bytes,12,opt,name=org_id,json=orgId" json:"org_id,omitempty"`
	CreatedBy                  *go_micro_srv_user.User                `protobuf:"bytes,13,opt,name=createdBy" json:"createdBy,omitempty"`
	Source                     string                                 `protobuf:"bytes,17,opt,name=source" json:"source,omitempty"`
	Trackers                   []*Tracker                             `protobuf:"bytes,18,rep,name=trackers" json:"trackers,omitempty"`
	Habits                     []*Habit                               `protobuf:"bytes,19,rep,name=habits" json:"habits,omitempty"`
	Articles                   []*go_micro_srv_content.Article        `protobuf:"bytes,20,rep,name=articles" json:"articles,omitempty"`
	Triggers                   []*go_micro_srv_static.ModuleTrigger   `protobuf:"bytes,21,rep,name=triggers" json:"triggers,omitempty"`
	Users                      []*TargetedUser                        `protobuf:"bytes,22,rep,name=users" json:"users,omitempty"`
	CompletionApprovalRequired bool                                   `protobuf:"varint,23,opt,name=completionApprovalRequired" json:"completionApprovalRequired,omitempty"`
	Status                     Status                                 `protobuf:"varint,24,opt,name=status,enum=go.micro.srv.behaviour.Status" json:"status,omitempty"`
	Setbacks                   []*go_micro_srv_static.Setback         `protobuf:"bytes,25,rep,name=setbacks" json:"setbacks,omitempty"`
	Setting                    *go_micro_srv_static.Setting           `protobuf:"bytes,26,opt,name=setting" json:"setting,omitempty"`
	Todos                      *go_micro_srv_todo.Todo                `protobuf:"bytes,27,opt,name=todos" json:"todos,omitempty"`
}

func (m *Challenge) Reset()                    { *m = Challenge{} }
func (m *Challenge) String() string            { return proto.CompactTextString(m) }
func (*Challenge) ProtoMessage()               {}
func (*Challenge) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{53} }

func (m *Challenge) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Challenge) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Challenge) GetSummary() string {
	if m != nil {
		return m.Summary
	}
	return ""
}

func (m *Challenge) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Challenge) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *Challenge) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *Challenge) GetCreated() int64 {
	if m != nil {
		return m.Created
	}
	return 0
}

func (m *Challenge) GetUpdated() int64 {
	if m != nil {
		return m.Updated
	}
	return 0
}

func (m *Challenge) GetCategory() *go_micro_srv_static.BehaviourCategory {
	if m != nil {
		return m.Category
	}
	return nil
}

func (m *Challenge) GetTarget() *go_micro_srv_static.Target {
	if m != nil {
		return m.Target
	}
	return nil
}

func (m *Challenge) GetDuration() string {
	if m != nil {
		return m.Duration
	}
	return ""
}

func (m *Challenge) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *Challenge) GetCreatedBy() *go_micro_srv_user.User {
	if m != nil {
		return m.CreatedBy
	}
	return nil
}

func (m *Challenge) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *Challenge) GetTrackers() []*Tracker {
	if m != nil {
		return m.Trackers
	}
	return nil
}

func (m *Challenge) GetHabits() []*Habit {
	if m != nil {
		return m.Habits
	}
	return nil
}

func (m *Challenge) GetArticles() []*go_micro_srv_content.Article {
	if m != nil {
		return m.Articles
	}
	return nil
}

func (m *Challenge) GetTriggers() []*go_micro_srv_static.ModuleTrigger {
	if m != nil {
		return m.Triggers
	}
	return nil
}

func (m *Challenge) GetUsers() []*TargetedUser {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *Challenge) GetCompletionApprovalRequired() bool {
	if m != nil {
		return m.CompletionApprovalRequired
	}
	return false
}

func (m *Challenge) GetStatus() Status {
	if m != nil {
		return m.Status
	}
	return Status_Status_NONE
}

func (m *Challenge) GetSetbacks() []*go_micro_srv_static.Setback {
	if m != nil {
		return m.Setbacks
	}
	return nil
}

func (m *Challenge) GetSetting() *go_micro_srv_static.Setting {
	if m != nil {
		return m.Setting
	}
	return nil
}

func (m *Challenge) GetTodos() *go_micro_srv_todo.Todo {
	if m != nil {
		return m.Todos
	}
	return nil
}

type Habit struct {
	Id                         string                                 `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Title                      string                                 `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
	Summary                    string                                 `protobuf:"bytes,3,opt,name=summary" json:"summary,omitempty"`
	Description                string                                 `protobuf:"bytes,4,opt,name=description" json:"description,omitempty"`
	Image                      string                                 `protobuf:"bytes,5,opt,name=image" json:"image,omitempty"`
	Tags                       []string                               `protobuf:"bytes,6,rep,name=tags" json:"tags,omitempty"`
	Created                    int64                                  `protobuf:"varint,7,opt,name=created" json:"created,omitempty"`
	Updated                    int64                                  `protobuf:"varint,8,opt,name=updated" json:"updated,omitempty"`
	Category                   *go_micro_srv_static.BehaviourCategory `protobuf:"bytes,9,opt,name=category" json:"category,omitempty"`
	Target                     *go_micro_srv_static.Target            `protobuf:"bytes,10,opt,name=target" json:"target,omitempty"`
	Duration                   string                                 `protobuf:"bytes,11,opt,name=duration" json:"duration,omitempty"`
	OrgId                      string                                 `protobuf:"bytes,12,opt,name=org_id,json=orgId" json:"org_id,omitempty"`
	CreatedBy                  *go_micro_srv_user.User                `protobuf:"bytes,13,opt,name=createdBy" json:"createdBy,omitempty"`
	Source                     string                                 `protobuf:"bytes,17,opt,name=source" json:"source,omitempty"`
	Trackers                   []*Tracker                             `protobuf:"bytes,18,rep,name=trackers" json:"trackers,omitempty"`
	Articles                   []*go_micro_srv_content.Article        `protobuf:"bytes,19,rep,name=articles" json:"articles,omitempty"`
	Triggers                   []*go_micro_srv_static.ModuleTrigger   `protobuf:"bytes,20,rep,name=triggers" json:"triggers,omitempty"`
	Users                      []*TargetedUser                        `protobuf:"bytes,21,rep,name=users" json:"users,omitempty"`
	CompletionApprovalRequired bool                                   `protobuf:"varint,22,opt,name=completionApprovalRequired" json:"completionApprovalRequired,omitempty"`
	Status                     Status                                 `protobuf:"varint,23,opt,name=status,enum=go.micro.srv.behaviour.Status" json:"status,omitempty"`
	Setbacks                   []*go_micro_srv_static.Setback         `protobuf:"bytes,24,rep,name=setbacks" json:"setbacks,omitempty"`
	Setting                    *go_micro_srv_static.Setting           `protobuf:"bytes,25,opt,name=setting" json:"setting,omitempty"`
	Todos                      *go_micro_srv_todo.Todo                `protobuf:"bytes,26,opt,name=todos" json:"todos,omitempty"`
}

func (m *Habit) Reset()                    { *m = Habit{} }
func (m *Habit) String() string            { return proto.CompactTextString(m) }
func (*Habit) ProtoMessage()               {}
func (*Habit) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{54} }

func (m *Habit) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Habit) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Habit) GetSummary() string {
	if m != nil {
		return m.Summary
	}
	return ""
}

func (m *Habit) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Habit) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *Habit) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *Habit) GetCreated() int64 {
	if m != nil {
		return m.Created
	}
	return 0
}

func (m *Habit) GetUpdated() int64 {
	if m != nil {
		return m.Updated
	}
	return 0
}

func (m *Habit) GetCategory() *go_micro_srv_static.BehaviourCategory {
	if m != nil {
		return m.Category
	}
	return nil
}

func (m *Habit) GetTarget() *go_micro_srv_static.Target {
	if m != nil {
		return m.Target
	}
	return nil
}

func (m *Habit) GetDuration() string {
	if m != nil {
		return m.Duration
	}
	return ""
}

func (m *Habit) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *Habit) GetCreatedBy() *go_micro_srv_user.User {
	if m != nil {
		return m.CreatedBy
	}
	return nil
}

func (m *Habit) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *Habit) GetTrackers() []*Tracker {
	if m != nil {
		return m.Trackers
	}
	return nil
}

func (m *Habit) GetArticles() []*go_micro_srv_content.Article {
	if m != nil {
		return m.Articles
	}
	return nil
}

func (m *Habit) GetTriggers() []*go_micro_srv_static.ModuleTrigger {
	if m != nil {
		return m.Triggers
	}
	return nil
}

func (m *Habit) GetUsers() []*TargetedUser {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *Habit) GetCompletionApprovalRequired() bool {
	if m != nil {
		return m.CompletionApprovalRequired
	}
	return false
}

func (m *Habit) GetStatus() Status {
	if m != nil {
		return m.Status
	}
	return Status_Status_NONE
}

func (m *Habit) GetSetbacks() []*go_micro_srv_static.Setback {
	if m != nil {
		return m.Setbacks
	}
	return nil
}

func (m *Habit) GetSetting() *go_micro_srv_static.Setting {
	if m != nil {
		return m.Setting
	}
	return nil
}

func (m *Habit) GetTodos() *go_micro_srv_todo.Todo {
	if m != nil {
		return m.Todos
	}
	return nil
}

type Category struct {
	Id          string   `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Name        string   `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Summary     string   `protobuf:"bytes,3,opt,name=summary" json:"summary,omitempty"`
	Description string   `protobuf:"bytes,4,opt,name=description" json:"description,omitempty"`
	IconSlug    string   `protobuf:"bytes,5,opt,name=icon_slug,json=iconSlug" json:"icon_slug,omitempty"`
	OrgId       string   `protobuf:"bytes,6,opt,name=org_id,json=orgId" json:"org_id,omitempty"`
	Created     int64    `protobuf:"varint,7,opt,name=created" json:"created,omitempty"`
	Updated     int64    `protobuf:"varint,8,opt,name=updated" json:"updated,omitempty"`
	Tags        []string `protobuf:"bytes,9,rep,name=tags" json:"tags,omitempty"`
}

func (m *Category) Reset()                    { *m = Category{} }
func (m *Category) String() string            { return proto.CompactTextString(m) }
func (*Category) ProtoMessage()               {}
func (*Category) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{55} }

func (m *Category) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Category) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Category) GetSummary() string {
	if m != nil {
		return m.Summary
	}
	return ""
}

func (m *Category) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Category) GetIconSlug() string {
	if m != nil {
		return m.IconSlug
	}
	return ""
}

func (m *Category) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *Category) GetCreated() int64 {
	if m != nil {
		return m.Created
	}
	return 0
}

func (m *Category) GetUpdated() int64 {
	if m != nil {
		return m.Updated
	}
	return 0
}

func (m *Category) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

type TargetedUser struct {
	User             *go_micro_srv_user.User                  `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
	CurrentValue     int64                                    `protobuf:"varint,2,opt,name=currentValue" json:"currentValue,omitempty"`
	ExpectedProgress go_micro_srv_static.ExpectedProgressType `protobuf:"varint,3,opt,name=expectedProgress,enum=go.micro.srv.static.ExpectedProgressType" json:"expectedProgress,omitempty"`
	Unit             string                                   `protobuf:"bytes,4,opt,name=unit" json:"unit,omitempty"`
}

func (m *TargetedUser) Reset()                    { *m = TargetedUser{} }
func (m *TargetedUser) String() string            { return proto.CompactTextString(m) }
func (*TargetedUser) ProtoMessage()               {}
func (*TargetedUser) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{56} }

func (m *TargetedUser) GetUser() *go_micro_srv_user.User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *TargetedUser) GetCurrentValue() int64 {
	if m != nil {
		return m.CurrentValue
	}
	return 0
}

func (m *TargetedUser) GetExpectedProgress() go_micro_srv_static.ExpectedProgressType {
	if m != nil {
		return m.ExpectedProgress
	}
	return go_micro_srv_static.ExpectedProgressType_ExpectedProgressType_NONE
}

func (m *TargetedUser) GetUnit() string {
	if m != nil {
		return m.Unit
	}
	return ""
}

type ShareGoalUser struct {
	Id               string                                   `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Goal             *Goal                                    `protobuf:"bytes,2,opt,name=goal" json:"goal,omitempty"`
	User             *go_micro_srv_user.User                  `protobuf:"bytes,3,opt,name=user" json:"user,omitempty"`
	Status           go_micro_srv_static.ShareStatus          `protobuf:"varint,4,opt,name=status,enum=go.micro.srv.static.ShareStatus" json:"status,omitempty"`
	Updated          int64                                    `protobuf:"varint,5,opt,name=updated" json:"updated,omitempty"`
	SharedBy         *go_micro_srv_user.User                  `protobuf:"bytes,6,opt,name=shared_by,json=sharedBy" json:"shared_by,omitempty"`
	CurrentValue     int64                                    `protobuf:"varint,7,opt,name=currentValue" json:"currentValue,omitempty"`
	ExpectedProgress go_micro_srv_static.ExpectedProgressType `protobuf:"varint,8,opt,name=expectedProgress,enum=go.micro.srv.static.ExpectedProgressType" json:"expectedProgress,omitempty"`
	Created          int64                                    `protobuf:"varint,9,opt,name=created" json:"created,omitempty"`
}

func (m *ShareGoalUser) Reset()                    { *m = ShareGoalUser{} }
func (m *ShareGoalUser) String() string            { return proto.CompactTextString(m) }
func (*ShareGoalUser) ProtoMessage()               {}
func (*ShareGoalUser) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{57} }

func (m *ShareGoalUser) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ShareGoalUser) GetGoal() *Goal {
	if m != nil {
		return m.Goal
	}
	return nil
}

func (m *ShareGoalUser) GetUser() *go_micro_srv_user.User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *ShareGoalUser) GetStatus() go_micro_srv_static.ShareStatus {
	if m != nil {
		return m.Status
	}
	return go_micro_srv_static.ShareStatus_ShareStatus_NONE
}

func (m *ShareGoalUser) GetUpdated() int64 {
	if m != nil {
		return m.Updated
	}
	return 0
}

func (m *ShareGoalUser) GetSharedBy() *go_micro_srv_user.User {
	if m != nil {
		return m.SharedBy
	}
	return nil
}

func (m *ShareGoalUser) GetCurrentValue() int64 {
	if m != nil {
		return m.CurrentValue
	}
	return 0
}

func (m *ShareGoalUser) GetExpectedProgress() go_micro_srv_static.ExpectedProgressType {
	if m != nil {
		return m.ExpectedProgress
	}
	return go_micro_srv_static.ExpectedProgressType_ExpectedProgressType_NONE
}

func (m *ShareGoalUser) GetCreated() int64 {
	if m != nil {
		return m.Created
	}
	return 0
}

type ShareChallengeUser struct {
	Id               string                                   `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Challenge        *Challenge                               `protobuf:"bytes,2,opt,name=challenge" json:"challenge,omitempty"`
	User             *go_micro_srv_user.User                  `protobuf:"bytes,3,opt,name=user" json:"user,omitempty"`
	Status           go_micro_srv_static.ShareStatus          `protobuf:"varint,4,opt,name=status,enum=go.micro.srv.static.ShareStatus" json:"status,omitempty"`
	Updated          int64                                    `protobuf:"varint,5,opt,name=updated" json:"updated,omitempty"`
	SharedBy         *go_micro_srv_user.User                  `protobuf:"bytes,6,opt,name=shared_by,json=sharedBy" json:"shared_by,omitempty"`
	CurrentValue     int64                                    `protobuf:"varint,7,opt,name=currentValue" json:"currentValue,omitempty"`
	ExpectedProgress go_micro_srv_static.ExpectedProgressType `protobuf:"varint,8,opt,name=expectedProgress,enum=go.micro.srv.static.ExpectedProgressType" json:"expectedProgress,omitempty"`
	Created          int64                                    `protobuf:"varint,9,opt,name=created" json:"created,omitempty"`
}

func (m *ShareChallengeUser) Reset()                    { *m = ShareChallengeUser{} }
func (m *ShareChallengeUser) String() string            { return proto.CompactTextString(m) }
func (*ShareChallengeUser) ProtoMessage()               {}
func (*ShareChallengeUser) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{58} }

func (m *ShareChallengeUser) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ShareChallengeUser) GetChallenge() *Challenge {
	if m != nil {
		return m.Challenge
	}
	return nil
}

func (m *ShareChallengeUser) GetUser() *go_micro_srv_user.User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *ShareChallengeUser) GetStatus() go_micro_srv_static.ShareStatus {
	if m != nil {
		return m.Status
	}
	return go_micro_srv_static.ShareStatus_ShareStatus_NONE
}

func (m *ShareChallengeUser) GetUpdated() int64 {
	if m != nil {
		return m.Updated
	}
	return 0
}

func (m *ShareChallengeUser) GetSharedBy() *go_micro_srv_user.User {
	if m != nil {
		return m.SharedBy
	}
	return nil
}

func (m *ShareChallengeUser) GetCurrentValue() int64 {
	if m != nil {
		return m.CurrentValue
	}
	return 0
}

func (m *ShareChallengeUser) GetExpectedProgress() go_micro_srv_static.ExpectedProgressType {
	if m != nil {
		return m.ExpectedProgress
	}
	return go_micro_srv_static.ExpectedProgressType_ExpectedProgressType_NONE
}

func (m *ShareChallengeUser) GetCreated() int64 {
	if m != nil {
		return m.Created
	}
	return 0
}

type ShareHabitUser struct {
	Id               string                                   `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Habit            *Habit                                   `protobuf:"bytes,2,opt,name=habit" json:"habit,omitempty"`
	User             *go_micro_srv_user.User                  `protobuf:"bytes,3,opt,name=user" json:"user,omitempty"`
	Status           go_micro_srv_static.ShareStatus          `protobuf:"varint,4,opt,name=status,enum=go.micro.srv.static.ShareStatus" json:"status,omitempty"`
	Updated          int64                                    `protobuf:"varint,5,opt,name=updated" json:"updated,omitempty"`
	SharedBy         *go_micro_srv_user.User                  `protobuf:"bytes,6,opt,name=shared_by,json=sharedBy" json:"shared_by,omitempty"`
	CurrentValue     int64                                    `protobuf:"varint,7,opt,name=currentValue" json:"currentValue,omitempty"`
	ExpectedProgress go_micro_srv_static.ExpectedProgressType `protobuf:"varint,8,opt,name=expectedProgress,enum=go.micro.srv.static.ExpectedProgressType" json:"expectedProgress,omitempty"`
	Created          int64                                    `protobuf:"varint,9,opt,name=created" json:"created,omitempty"`
}

func (m *ShareHabitUser) Reset()                    { *m = ShareHabitUser{} }
func (m *ShareHabitUser) String() string            { return proto.CompactTextString(m) }
func (*ShareHabitUser) ProtoMessage()               {}
func (*ShareHabitUser) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{59} }

func (m *ShareHabitUser) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ShareHabitUser) GetHabit() *Habit {
	if m != nil {
		return m.Habit
	}
	return nil
}

func (m *ShareHabitUser) GetUser() *go_micro_srv_user.User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *ShareHabitUser) GetStatus() go_micro_srv_static.ShareStatus {
	if m != nil {
		return m.Status
	}
	return go_micro_srv_static.ShareStatus_ShareStatus_NONE
}

func (m *ShareHabitUser) GetUpdated() int64 {
	if m != nil {
		return m.Updated
	}
	return 0
}

func (m *ShareHabitUser) GetSharedBy() *go_micro_srv_user.User {
	if m != nil {
		return m.SharedBy
	}
	return nil
}

func (m *ShareHabitUser) GetCurrentValue() int64 {
	if m != nil {
		return m.CurrentValue
	}
	return 0
}

func (m *ShareHabitUser) GetExpectedProgress() go_micro_srv_static.ExpectedProgressType {
	if m != nil {
		return m.ExpectedProgress
	}
	return go_micro_srv_static.ExpectedProgressType_ExpectedProgressType_NONE
}

func (m *ShareHabitUser) GetCreated() int64 {
	if m != nil {
		return m.Created
	}
	return 0
}

type GetSharedGoalRequest struct {
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	GoalId string `protobuf:"bytes,2,opt,name=goal_id,json=goalId" json:"goal_id,omitempty"`
}

func (m *GetSharedGoalRequest) Reset()                    { *m = GetSharedGoalRequest{} }
func (m *GetSharedGoalRequest) String() string            { return proto.CompactTextString(m) }
func (*GetSharedGoalRequest) ProtoMessage()               {}
func (*GetSharedGoalRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{60} }

func (m *GetSharedGoalRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *GetSharedGoalRequest) GetGoalId() string {
	if m != nil {
		return m.GoalId
	}
	return ""
}

type GetSharedGoalResponse struct {
	Data *GetSharedGoalResponse_Data `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
}

func (m *GetSharedGoalResponse) Reset()                    { *m = GetSharedGoalResponse{} }
func (m *GetSharedGoalResponse) String() string            { return proto.CompactTextString(m) }
func (*GetSharedGoalResponse) ProtoMessage()               {}
func (*GetSharedGoalResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{61} }

func (m *GetSharedGoalResponse) GetData() *GetSharedGoalResponse_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

type GetSharedGoalResponse_Data struct {
	Goal *ShareGoalUser `protobuf:"bytes,1,opt,name=goal" json:"goal,omitempty"`
}

func (m *GetSharedGoalResponse_Data) Reset()                    { *m = GetSharedGoalResponse_Data{} }
func (m *GetSharedGoalResponse_Data) String() string            { return proto.CompactTextString(m) }
func (*GetSharedGoalResponse_Data) ProtoMessage()               {}
func (*GetSharedGoalResponse_Data) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{61, 0} }

func (m *GetSharedGoalResponse_Data) GetGoal() *ShareGoalUser {
	if m != nil {
		return m.Goal
	}
	return nil
}

type GetSharedChallengeRequest struct {
	UserId      string `protobuf:"bytes,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	ChallengeId string `protobuf:"bytes,2,opt,name=challenge_id,json=challengeId" json:"challenge_id,omitempty"`
}

func (m *GetSharedChallengeRequest) Reset()                    { *m = GetSharedChallengeRequest{} }
func (m *GetSharedChallengeRequest) String() string            { return proto.CompactTextString(m) }
func (*GetSharedChallengeRequest) ProtoMessage()               {}
func (*GetSharedChallengeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{62} }

func (m *GetSharedChallengeRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *GetSharedChallengeRequest) GetChallengeId() string {
	if m != nil {
		return m.ChallengeId
	}
	return ""
}

type GetSharedChallengeResponse struct {
	Data *GetSharedChallengeResponse_Data `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
}

func (m *GetSharedChallengeResponse) Reset()                    { *m = GetSharedChallengeResponse{} }
func (m *GetSharedChallengeResponse) String() string            { return proto.CompactTextString(m) }
func (*GetSharedChallengeResponse) ProtoMessage()               {}
func (*GetSharedChallengeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{63} }

func (m *GetSharedChallengeResponse) GetData() *GetSharedChallengeResponse_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

type GetSharedChallengeResponse_Data struct {
	Challenge *ShareChallengeUser `protobuf:"bytes,1,opt,name=challenge" json:"challenge,omitempty"`
}

func (m *GetSharedChallengeResponse_Data) Reset()         { *m = GetSharedChallengeResponse_Data{} }
func (m *GetSharedChallengeResponse_Data) String() string { return proto.CompactTextString(m) }
func (*GetSharedChallengeResponse_Data) ProtoMessage()    {}
func (*GetSharedChallengeResponse_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{63, 0}
}

func (m *GetSharedChallengeResponse_Data) GetChallenge() *ShareChallengeUser {
	if m != nil {
		return m.Challenge
	}
	return nil
}

type GetSharedHabitRequest struct {
	UserId  string `protobuf:"bytes,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	HabitId string `protobuf:"bytes,2,opt,name=habit_id,json=habitId" json:"habit_id,omitempty"`
}

func (m *GetSharedHabitRequest) Reset()                    { *m = GetSharedHabitRequest{} }
func (m *GetSharedHabitRequest) String() string            { return proto.CompactTextString(m) }
func (*GetSharedHabitRequest) ProtoMessage()               {}
func (*GetSharedHabitRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{64} }

func (m *GetSharedHabitRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *GetSharedHabitRequest) GetHabitId() string {
	if m != nil {
		return m.HabitId
	}
	return ""
}

type GetSharedHabitResponse struct {
	Data *GetSharedHabitResponse_Data `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
}

func (m *GetSharedHabitResponse) Reset()                    { *m = GetSharedHabitResponse{} }
func (m *GetSharedHabitResponse) String() string            { return proto.CompactTextString(m) }
func (*GetSharedHabitResponse) ProtoMessage()               {}
func (*GetSharedHabitResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{65} }

func (m *GetSharedHabitResponse) GetData() *GetSharedHabitResponse_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

type GetSharedHabitResponse_Data struct {
	Habit *ShareHabitUser `protobuf:"bytes,1,opt,name=habit" json:"habit,omitempty"`
}

func (m *GetSharedHabitResponse_Data) Reset()                    { *m = GetSharedHabitResponse_Data{} }
func (m *GetSharedHabitResponse_Data) String() string            { return proto.CompactTextString(m) }
func (*GetSharedHabitResponse_Data) ProtoMessage()               {}
func (*GetSharedHabitResponse_Data) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{65, 0} }

func (m *GetSharedHabitResponse_Data) GetHabit() *ShareHabitUser {
	if m != nil {
		return m.Habit
	}
	return nil
}

type GetTopTagsRequest struct {
	Object string `protobuf:"bytes,1,opt,name=object" json:"object,omitempty"`
	OrgId  string `protobuf:"bytes,2,opt,name=org_id,json=orgId" json:"org_id,omitempty"`
	N      int64  `protobuf:"varint,3,opt,name=n" json:"n,omitempty"`
}

func (m *GetTopTagsRequest) Reset()                    { *m = GetTopTagsRequest{} }
func (m *GetTopTagsRequest) String() string            { return proto.CompactTextString(m) }
func (*GetTopTagsRequest) ProtoMessage()               {}
func (*GetTopTagsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{66} }

func (m *GetTopTagsRequest) GetObject() string {
	if m != nil {
		return m.Object
	}
	return ""
}

func (m *GetTopTagsRequest) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *GetTopTagsRequest) GetN() int64 {
	if m != nil {
		return m.N
	}
	return 0
}

type GetTopTagsResponse struct {
	Data    *GetTopTagsResponse_Data `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	Code    int64                    `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Message string                   `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *GetTopTagsResponse) Reset()                    { *m = GetTopTagsResponse{} }
func (m *GetTopTagsResponse) String() string            { return proto.CompactTextString(m) }
func (*GetTopTagsResponse) ProtoMessage()               {}
func (*GetTopTagsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{67} }

func (m *GetTopTagsResponse) GetData() *GetTopTagsResponse_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *GetTopTagsResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *GetTopTagsResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type GetTopTagsResponse_Data struct {
	Tags []string `protobuf:"bytes,1,rep,name=tags" json:"tags,omitempty"`
}

func (m *GetTopTagsResponse_Data) Reset()                    { *m = GetTopTagsResponse_Data{} }
func (m *GetTopTagsResponse_Data) String() string            { return proto.CompactTextString(m) }
func (*GetTopTagsResponse_Data) ProtoMessage()               {}
func (*GetTopTagsResponse_Data) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{67, 0} }

func (m *GetTopTagsResponse_Data) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

type AutocompleteTagsRequest struct {
	OrgId         string `protobuf:"bytes,1,opt,name=org_id,json=orgId" json:"org_id,omitempty"`
	Object        string `protobuf:"bytes,2,opt,name=object" json:"object,omitempty"`
	Name          string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	SortParameter string `protobuf:"bytes,4,opt,name=sort_parameter,json=sortParameter" json:"sort_parameter,omitempty"`
	SortDirection string `protobuf:"bytes,5,opt,name=sort_direction,json=sortDirection" json:"sort_direction,omitempty"`
}

func (m *AutocompleteTagsRequest) Reset()                    { *m = AutocompleteTagsRequest{} }
func (m *AutocompleteTagsRequest) String() string            { return proto.CompactTextString(m) }
func (*AutocompleteTagsRequest) ProtoMessage()               {}
func (*AutocompleteTagsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{68} }

func (m *AutocompleteTagsRequest) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *AutocompleteTagsRequest) GetObject() string {
	if m != nil {
		return m.Object
	}
	return ""
}

func (m *AutocompleteTagsRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *AutocompleteTagsRequest) GetSortParameter() string {
	if m != nil {
		return m.SortParameter
	}
	return ""
}

func (m *AutocompleteTagsRequest) GetSortDirection() string {
	if m != nil {
		return m.SortDirection
	}
	return ""
}

type AutocompleteTagsResponse struct {
	Data    *AutocompleteTagsResponse_Data `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	Code    int64                          `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Message string                         `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *AutocompleteTagsResponse) Reset()                    { *m = AutocompleteTagsResponse{} }
func (m *AutocompleteTagsResponse) String() string            { return proto.CompactTextString(m) }
func (*AutocompleteTagsResponse) ProtoMessage()               {}
func (*AutocompleteTagsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{69} }

func (m *AutocompleteTagsResponse) GetData() *AutocompleteTagsResponse_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *AutocompleteTagsResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *AutocompleteTagsResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type AutocompleteTagsResponse_Data struct {
	Tags []string `protobuf:"bytes,1,rep,name=tags" json:"tags,omitempty"`
}

func (m *AutocompleteTagsResponse_Data) Reset()         { *m = AutocompleteTagsResponse_Data{} }
func (m *AutocompleteTagsResponse_Data) String() string { return proto.CompactTextString(m) }
func (*AutocompleteTagsResponse_Data) ProtoMessage()    {}
func (*AutocompleteTagsResponse_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{69, 0}
}

func (m *AutocompleteTagsResponse_Data) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

type WarmupCacheBehaviourRequest struct {
	Object string `protobuf:"bytes,1,opt,name=object" json:"object,omitempty"`
}

func (m *WarmupCacheBehaviourRequest) Reset()                    { *m = WarmupCacheBehaviourRequest{} }
func (m *WarmupCacheBehaviourRequest) String() string            { return proto.CompactTextString(m) }
func (*WarmupCacheBehaviourRequest) ProtoMessage()               {}
func (*WarmupCacheBehaviourRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{70} }

func (m *WarmupCacheBehaviourRequest) GetObject() string {
	if m != nil {
		return m.Object
	}
	return ""
}

type WarmupCacheBehaviourResponse struct {
}

func (m *WarmupCacheBehaviourResponse) Reset()                    { *m = WarmupCacheBehaviourResponse{} }
func (m *WarmupCacheBehaviourResponse) String() string            { return proto.CompactTextString(m) }
func (*WarmupCacheBehaviourResponse) ProtoMessage()               {}
func (*WarmupCacheBehaviourResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{71} }

func init() {
	proto.RegisterType((*GoalData)(nil), "go.micro.srv.behaviour.GoalData")
	proto.RegisterType((*GoalArrData)(nil), "go.micro.srv.behaviour.GoalArrData")
	proto.RegisterType((*HabitData)(nil), "go.micro.srv.behaviour.HabitData")
	proto.RegisterType((*HabitArrData)(nil), "go.micro.srv.behaviour.HabitArrData")
	proto.RegisterType((*ChallengeData)(nil), "go.micro.srv.behaviour.ChallengeData")
	proto.RegisterType((*ChallengeArrData)(nil), "go.micro.srv.behaviour.ChallengeArrData")
	proto.RegisterType((*AllGoalsRequest)(nil), "go.micro.srv.behaviour.AllGoalsRequest")
	proto.RegisterType((*AllGoalsResponse)(nil), "go.micro.srv.behaviour.AllGoalsResponse")
	proto.RegisterType((*CreateGoalRequest)(nil), "go.micro.srv.behaviour.CreateGoalRequest")
	proto.RegisterType((*CreateGoalResponse)(nil), "go.micro.srv.behaviour.CreateGoalResponse")
	proto.RegisterType((*UpdateGoalRequest)(nil), "go.micro.srv.behaviour.UpdateGoalRequest")
	proto.RegisterType((*UpdateGoalResponse)(nil), "go.micro.srv.behaviour.UpdateGoalResponse")
	proto.RegisterType((*ReadGoalRequest)(nil), "go.micro.srv.behaviour.ReadGoalRequest")
	proto.RegisterType((*ReadGoalResponse)(nil), "go.micro.srv.behaviour.ReadGoalResponse")
	proto.RegisterType((*DeleteGoalRequest)(nil), "go.micro.srv.behaviour.DeleteGoalRequest")
	proto.RegisterType((*DeleteGoalResponse)(nil), "go.micro.srv.behaviour.DeleteGoalResponse")
	proto.RegisterType((*AllHabitsRequest)(nil), "go.micro.srv.behaviour.AllHabitsRequest")
	proto.RegisterType((*AllHabitsResponse)(nil), "go.micro.srv.behaviour.AllHabitsResponse")
	proto.RegisterType((*CreateHabitRequest)(nil), "go.micro.srv.behaviour.CreateHabitRequest")
	proto.RegisterType((*CreateHabitResponse)(nil), "go.micro.srv.behaviour.CreateHabitResponse")
	proto.RegisterType((*UpdateHabitRequest)(nil), "go.micro.srv.behaviour.UpdateHabitRequest")
	proto.RegisterType((*UpdateHabitResponse)(nil), "go.micro.srv.behaviour.UpdateHabitResponse")
	proto.RegisterType((*ReadHabitRequest)(nil), "go.micro.srv.behaviour.ReadHabitRequest")
	proto.RegisterType((*ReadHabitResponse)(nil), "go.micro.srv.behaviour.ReadHabitResponse")
	proto.RegisterType((*DeleteHabitRequest)(nil), "go.micro.srv.behaviour.DeleteHabitRequest")
	proto.RegisterType((*DeleteHabitResponse)(nil), "go.micro.srv.behaviour.DeleteHabitResponse")
	proto.RegisterType((*UploadGoalsRequest)(nil), "go.micro.srv.behaviour.UploadGoalsRequest")
	proto.RegisterType((*UploadGoalsResponse)(nil), "go.micro.srv.behaviour.UploadGoalsResponse")
	proto.RegisterType((*AllChallengesRequest)(nil), "go.micro.srv.behaviour.AllChallengesRequest")
	proto.RegisterType((*AllChallengesResponse)(nil), "go.micro.srv.behaviour.AllChallengesResponse")
	proto.RegisterType((*CreateChallengeRequest)(nil), "go.micro.srv.behaviour.CreateChallengeRequest")
	proto.RegisterType((*CreateChallengeResponse)(nil), "go.micro.srv.behaviour.CreateChallengeResponse")
	proto.RegisterType((*UpdateChallengeRequest)(nil), "go.micro.srv.behaviour.UpdateChallengeRequest")
	proto.RegisterType((*UpdateChallengeResponse)(nil), "go.micro.srv.behaviour.UpdateChallengeResponse")
	proto.RegisterType((*ReadChallengeRequest)(nil), "go.micro.srv.behaviour.ReadChallengeRequest")
	proto.RegisterType((*ReadChallengeResponse)(nil), "go.micro.srv.behaviour.ReadChallengeResponse")
	proto.RegisterType((*DeleteChallengeRequest)(nil), "go.micro.srv.behaviour.DeleteChallengeRequest")
	proto.RegisterType((*DeleteChallengeResponse)(nil), "go.micro.srv.behaviour.DeleteChallengeResponse")
	proto.RegisterType((*FilterRequest)(nil), "go.micro.srv.behaviour.FilterRequest")
	proto.RegisterType((*FilterResponse)(nil), "go.micro.srv.behaviour.FilterResponse")
	proto.RegisterType((*FilterResponse_Data)(nil), "go.micro.srv.behaviour.FilterResponse.Data")
	proto.RegisterType((*SearchRequest)(nil), "go.micro.srv.behaviour.SearchRequest")
	proto.RegisterType((*SearchResponse)(nil), "go.micro.srv.behaviour.SearchResponse")
	proto.RegisterType((*SearchResponse_Data)(nil), "go.micro.srv.behaviour.SearchResponse.Data")
	proto.RegisterType((*ShareGoalRequest)(nil), "go.micro.srv.behaviour.ShareGoalRequest")
	proto.RegisterType((*ShareGoalResponse)(nil), "go.micro.srv.behaviour.ShareGoalResponse")
	proto.RegisterType((*ShareChallengeRequest)(nil), "go.micro.srv.behaviour.ShareChallengeRequest")
	proto.RegisterType((*ShareChallengeResponse)(nil), "go.micro.srv.behaviour.ShareChallengeResponse")
	proto.RegisterType((*ShareHabitRequest)(nil), "go.micro.srv.behaviour.ShareHabitRequest")
	proto.RegisterType((*ShareHabitResponse)(nil), "go.micro.srv.behaviour.ShareHabitResponse")
	proto.RegisterType((*AutocompleteSearchRequest)(nil), "go.micro.srv.behaviour.AutocompleteSearchRequest")
	proto.RegisterType((*AutocompleteSearchResponse)(nil), "go.micro.srv.behaviour.AutocompleteSearchResponse")
	proto.RegisterType((*AutocompleteSearchResponse_Data)(nil), "go.micro.srv.behaviour.AutocompleteSearchResponse.Data")
	proto.RegisterType((*Goal)(nil), "go.micro.srv.behaviour.Goal")
	proto.RegisterType((*Tracker)(nil), "go.micro.srv.behaviour.Tracker")
	proto.RegisterType((*Criteria)(nil), "go.micro.srv.behaviour.Criteria")
	proto.RegisterType((*Challenge)(nil), "go.micro.srv.behaviour.Challenge")
	proto.RegisterType((*Habit)(nil), "go.micro.srv.behaviour.Habit")
	proto.RegisterType((*Category)(nil), "go.micro.srv.behaviour.Category")
	proto.RegisterType((*TargetedUser)(nil), "go.micro.srv.behaviour.TargetedUser")
	proto.RegisterType((*ShareGoalUser)(nil), "go.micro.srv.behaviour.ShareGoalUser")
	proto.RegisterType((*ShareChallengeUser)(nil), "go.micro.srv.behaviour.ShareChallengeUser")
	proto.RegisterType((*ShareHabitUser)(nil), "go.micro.srv.behaviour.ShareHabitUser")
	proto.RegisterType((*GetSharedGoalRequest)(nil), "go.micro.srv.behaviour.GetSharedGoalRequest")
	proto.RegisterType((*GetSharedGoalResponse)(nil), "go.micro.srv.behaviour.GetSharedGoalResponse")
	proto.RegisterType((*GetSharedGoalResponse_Data)(nil), "go.micro.srv.behaviour.GetSharedGoalResponse.Data")
	proto.RegisterType((*GetSharedChallengeRequest)(nil), "go.micro.srv.behaviour.GetSharedChallengeRequest")
	proto.RegisterType((*GetSharedChallengeResponse)(nil), "go.micro.srv.behaviour.GetSharedChallengeResponse")
	proto.RegisterType((*GetSharedChallengeResponse_Data)(nil), "go.micro.srv.behaviour.GetSharedChallengeResponse.Data")
	proto.RegisterType((*GetSharedHabitRequest)(nil), "go.micro.srv.behaviour.GetSharedHabitRequest")
	proto.RegisterType((*GetSharedHabitResponse)(nil), "go.micro.srv.behaviour.GetSharedHabitResponse")
	proto.RegisterType((*GetSharedHabitResponse_Data)(nil), "go.micro.srv.behaviour.GetSharedHabitResponse.Data")
	proto.RegisterType((*GetTopTagsRequest)(nil), "go.micro.srv.behaviour.GetTopTagsRequest")
	proto.RegisterType((*GetTopTagsResponse)(nil), "go.micro.srv.behaviour.GetTopTagsResponse")
	proto.RegisterType((*GetTopTagsResponse_Data)(nil), "go.micro.srv.behaviour.GetTopTagsResponse.Data")
	proto.RegisterType((*AutocompleteTagsRequest)(nil), "go.micro.srv.behaviour.AutocompleteTagsRequest")
	proto.RegisterType((*AutocompleteTagsResponse)(nil), "go.micro.srv.behaviour.AutocompleteTagsResponse")
	proto.RegisterType((*AutocompleteTagsResponse_Data)(nil), "go.micro.srv.behaviour.AutocompleteTagsResponse.Data")
	proto.RegisterType((*WarmupCacheBehaviourRequest)(nil), "go.micro.srv.behaviour.WarmupCacheBehaviourRequest")
	proto.RegisterType((*WarmupCacheBehaviourResponse)(nil), "go.micro.srv.behaviour.WarmupCacheBehaviourResponse")
	proto.RegisterEnum("go.micro.srv.behaviour.Frequency", Frequency_name, Frequency_value)
	proto.RegisterEnum("go.micro.srv.behaviour.Status", Status_name, Status_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for BehaviourService service

type BehaviourServiceClient interface {
	AllGoals(ctx context.Context, in *AllGoalsRequest, opts ...client.CallOption) (*AllGoalsResponse, error)
	ReadGoal(ctx context.Context, in *ReadGoalRequest, opts ...client.CallOption) (*ReadGoalResponse, error)
	CreateGoal(ctx context.Context, in *CreateGoalRequest, opts ...client.CallOption) (*CreateGoalResponse, error)
	UpdateGoal(ctx context.Context, in *UpdateGoalRequest, opts ...client.CallOption) (*UpdateGoalResponse, error)
	DeleteGoal(ctx context.Context, in *DeleteGoalRequest, opts ...client.CallOption) (*DeleteGoalResponse, error)
	AllChallenges(ctx context.Context, in *AllChallengesRequest, opts ...client.CallOption) (*AllChallengesResponse, error)
	ReadChallenge(ctx context.Context, in *ReadChallengeRequest, opts ...client.CallOption) (*ReadChallengeResponse, error)
	CreateChallenge(ctx context.Context, in *CreateChallengeRequest, opts ...client.CallOption) (*CreateChallengeResponse, error)
	UpdateChallenge(ctx context.Context, in *UpdateChallengeRequest, opts ...client.CallOption) (*UpdateChallengeResponse, error)
	DeleteChallenge(ctx context.Context, in *DeleteChallengeRequest, opts ...client.CallOption) (*DeleteChallengeResponse, error)
	AllHabits(ctx context.Context, in *AllHabitsRequest, opts ...client.CallOption) (*AllHabitsResponse, error)
	ReadHabit(ctx context.Context, in *ReadHabitRequest, opts ...client.CallOption) (*ReadHabitResponse, error)
	CreateHabit(ctx context.Context, in *CreateHabitRequest, opts ...client.CallOption) (*CreateHabitResponse, error)
	UpdateHabit(ctx context.Context, in *UpdateHabitRequest, opts ...client.CallOption) (*UpdateHabitResponse, error)
	DeleteHabit(ctx context.Context, in *DeleteHabitRequest, opts ...client.CallOption) (*DeleteHabitResponse, error)
	Filter(ctx context.Context, in *FilterRequest, opts ...client.CallOption) (*FilterResponse, error)
	Search(ctx context.Context, in *SearchRequest, opts ...client.CallOption) (*SearchResponse, error)
	UploadGoals(ctx context.Context, in *UploadGoalsRequest, opts ...client.CallOption) (*UploadGoalsResponse, error)
	ShareGoal(ctx context.Context, in *ShareGoalRequest, opts ...client.CallOption) (*ShareGoalResponse, error)
	ShareChallenge(ctx context.Context, in *ShareChallengeRequest, opts ...client.CallOption) (*ShareChallengeResponse, error)
	ShareHabit(ctx context.Context, in *ShareHabitRequest, opts ...client.CallOption) (*ShareHabitResponse, error)
	AutocompleteGoalSearch(ctx context.Context, in *AutocompleteSearchRequest, opts ...client.CallOption) (*AutocompleteSearchResponse, error)
	AutocompleteChallengeSearch(ctx context.Context, in *AutocompleteSearchRequest, opts ...client.CallOption) (*AutocompleteSearchResponse, error)
	AutocompleteHabitSearch(ctx context.Context, in *AutocompleteSearchRequest, opts ...client.CallOption) (*AutocompleteSearchResponse, error)
	GetSharedGoal(ctx context.Context, in *GetSharedGoalRequest, opts ...client.CallOption) (*GetSharedGoalResponse, error)
	GetSharedChallenge(ctx context.Context, in *GetSharedChallengeRequest, opts ...client.CallOption) (*GetSharedChallengeResponse, error)
	GetSharedHabit(ctx context.Context, in *GetSharedHabitRequest, opts ...client.CallOption) (*GetSharedHabitResponse, error)
	GetTopTags(ctx context.Context, in *GetTopTagsRequest, opts ...client.CallOption) (*GetTopTagsResponse, error)
	AutocompleteTags(ctx context.Context, in *AutocompleteTagsRequest, opts ...client.CallOption) (*AutocompleteTagsResponse, error)
	WarmupCacheBehaviour(ctx context.Context, in *WarmupCacheBehaviourRequest, opts ...client.CallOption) (*WarmupCacheBehaviourResponse, error)
	AllGoalResponse(ctx context.Context, in *go_micro_srv_user.AllGoalResponseRequest, opts ...client.CallOption) (*go_micro_srv_user.AllGoalResponseResponse, error)
	AllChallengeResponse(ctx context.Context, in *go_micro_srv_user.AllChallengeResponseRequest, opts ...client.CallOption) (*go_micro_srv_user.AllChallengeResponseResponse, error)
	AllHabitResponse(ctx context.Context, in *go_micro_srv_user.AllHabitResponseRequest, opts ...client.CallOption) (*go_micro_srv_user.AllHabitResponseResponse, error)
}

type behaviourServiceClient struct {
	c           client.Client
	serviceName string
}

func NewBehaviourServiceClient(serviceName string, c client.Client) BehaviourServiceClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "go.micro.srv.behaviour"
	}
	return &behaviourServiceClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *behaviourServiceClient) AllGoals(ctx context.Context, in *AllGoalsRequest, opts ...client.CallOption) (*AllGoalsResponse, error) {
	req := c.c.NewRequest(c.serviceName, "BehaviourService.AllGoals", in)
	out := new(AllGoalsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *behaviourServiceClient) ReadGoal(ctx context.Context, in *ReadGoalRequest, opts ...client.CallOption) (*ReadGoalResponse, error) {
	req := c.c.NewRequest(c.serviceName, "BehaviourService.ReadGoal", in)
	out := new(ReadGoalResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *behaviourServiceClient) CreateGoal(ctx context.Context, in *CreateGoalRequest, opts ...client.CallOption) (*CreateGoalResponse, error) {
	req := c.c.NewRequest(c.serviceName, "BehaviourService.CreateGoal", in)
	out := new(CreateGoalResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *behaviourServiceClient) UpdateGoal(ctx context.Context, in *UpdateGoalRequest, opts ...client.CallOption) (*UpdateGoalResponse, error) {
	req := c.c.NewRequest(c.serviceName, "BehaviourService.UpdateGoal", in)
	out := new(UpdateGoalResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *behaviourServiceClient) DeleteGoal(ctx context.Context, in *DeleteGoalRequest, opts ...client.CallOption) (*DeleteGoalResponse, error) {
	req := c.c.NewRequest(c.serviceName, "BehaviourService.DeleteGoal", in)
	out := new(DeleteGoalResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *behaviourServiceClient) AllChallenges(ctx context.Context, in *AllChallengesRequest, opts ...client.CallOption) (*AllChallengesResponse, error) {
	req := c.c.NewRequest(c.serviceName, "BehaviourService.AllChallenges", in)
	out := new(AllChallengesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *behaviourServiceClient) ReadChallenge(ctx context.Context, in *ReadChallengeRequest, opts ...client.CallOption) (*ReadChallengeResponse, error) {
	req := c.c.NewRequest(c.serviceName, "BehaviourService.ReadChallenge", in)
	out := new(ReadChallengeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *behaviourServiceClient) CreateChallenge(ctx context.Context, in *CreateChallengeRequest, opts ...client.CallOption) (*CreateChallengeResponse, error) {
	req := c.c.NewRequest(c.serviceName, "BehaviourService.CreateChallenge", in)
	out := new(CreateChallengeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *behaviourServiceClient) UpdateChallenge(ctx context.Context, in *UpdateChallengeRequest, opts ...client.CallOption) (*UpdateChallengeResponse, error) {
	req := c.c.NewRequest(c.serviceName, "BehaviourService.UpdateChallenge", in)
	out := new(UpdateChallengeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *behaviourServiceClient) DeleteChallenge(ctx context.Context, in *DeleteChallengeRequest, opts ...client.CallOption) (*DeleteChallengeResponse, error) {
	req := c.c.NewRequest(c.serviceName, "BehaviourService.DeleteChallenge", in)
	out := new(DeleteChallengeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *behaviourServiceClient) AllHabits(ctx context.Context, in *AllHabitsRequest, opts ...client.CallOption) (*AllHabitsResponse, error) {
	req := c.c.NewRequest(c.serviceName, "BehaviourService.AllHabits", in)
	out := new(AllHabitsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *behaviourServiceClient) ReadHabit(ctx context.Context, in *ReadHabitRequest, opts ...client.CallOption) (*ReadHabitResponse, error) {
	req := c.c.NewRequest(c.serviceName, "BehaviourService.ReadHabit", in)
	out := new(ReadHabitResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *behaviourServiceClient) CreateHabit(ctx context.Context, in *CreateHabitRequest, opts ...client.CallOption) (*CreateHabitResponse, error) {
	req := c.c.NewRequest(c.serviceName, "BehaviourService.CreateHabit", in)
	out := new(CreateHabitResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *behaviourServiceClient) UpdateHabit(ctx context.Context, in *UpdateHabitRequest, opts ...client.CallOption) (*UpdateHabitResponse, error) {
	req := c.c.NewRequest(c.serviceName, "BehaviourService.UpdateHabit", in)
	out := new(UpdateHabitResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *behaviourServiceClient) DeleteHabit(ctx context.Context, in *DeleteHabitRequest, opts ...client.CallOption) (*DeleteHabitResponse, error) {
	req := c.c.NewRequest(c.serviceName, "BehaviourService.DeleteHabit", in)
	out := new(DeleteHabitResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *behaviourServiceClient) Filter(ctx context.Context, in *FilterRequest, opts ...client.CallOption) (*FilterResponse, error) {
	req := c.c.NewRequest(c.serviceName, "BehaviourService.Filter", in)
	out := new(FilterResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *behaviourServiceClient) Search(ctx context.Context, in *SearchRequest, opts ...client.CallOption) (*SearchResponse, error) {
	req := c.c.NewRequest(c.serviceName, "BehaviourService.Search", in)
	out := new(SearchResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *behaviourServiceClient) UploadGoals(ctx context.Context, in *UploadGoalsRequest, opts ...client.CallOption) (*UploadGoalsResponse, error) {
	req := c.c.NewRequest(c.serviceName, "BehaviourService.UploadGoals", in)
	out := new(UploadGoalsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *behaviourServiceClient) ShareGoal(ctx context.Context, in *ShareGoalRequest, opts ...client.CallOption) (*ShareGoalResponse, error) {
	req := c.c.NewRequest(c.serviceName, "BehaviourService.ShareGoal", in)
	out := new(ShareGoalResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *behaviourServiceClient) ShareChallenge(ctx context.Context, in *ShareChallengeRequest, opts ...client.CallOption) (*ShareChallengeResponse, error) {
	req := c.c.NewRequest(c.serviceName, "BehaviourService.ShareChallenge", in)
	out := new(ShareChallengeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *behaviourServiceClient) ShareHabit(ctx context.Context, in *ShareHabitRequest, opts ...client.CallOption) (*ShareHabitResponse, error) {
	req := c.c.NewRequest(c.serviceName, "BehaviourService.ShareHabit", in)
	out := new(ShareHabitResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *behaviourServiceClient) AutocompleteGoalSearch(ctx context.Context, in *AutocompleteSearchRequest, opts ...client.CallOption) (*AutocompleteSearchResponse, error) {
	req := c.c.NewRequest(c.serviceName, "BehaviourService.AutocompleteGoalSearch", in)
	out := new(AutocompleteSearchResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *behaviourServiceClient) AutocompleteChallengeSearch(ctx context.Context, in *AutocompleteSearchRequest, opts ...client.CallOption) (*AutocompleteSearchResponse, error) {
	req := c.c.NewRequest(c.serviceName, "BehaviourService.AutocompleteChallengeSearch", in)
	out := new(AutocompleteSearchResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *behaviourServiceClient) AutocompleteHabitSearch(ctx context.Context, in *AutocompleteSearchRequest, opts ...client.CallOption) (*AutocompleteSearchResponse, error) {
	req := c.c.NewRequest(c.serviceName, "BehaviourService.AutocompleteHabitSearch", in)
	out := new(AutocompleteSearchResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *behaviourServiceClient) GetSharedGoal(ctx context.Context, in *GetSharedGoalRequest, opts ...client.CallOption) (*GetSharedGoalResponse, error) {
	req := c.c.NewRequest(c.serviceName, "BehaviourService.GetSharedGoal", in)
	out := new(GetSharedGoalResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *behaviourServiceClient) GetSharedChallenge(ctx context.Context, in *GetSharedChallengeRequest, opts ...client.CallOption) (*GetSharedChallengeResponse, error) {
	req := c.c.NewRequest(c.serviceName, "BehaviourService.GetSharedChallenge", in)
	out := new(GetSharedChallengeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *behaviourServiceClient) GetSharedHabit(ctx context.Context, in *GetSharedHabitRequest, opts ...client.CallOption) (*GetSharedHabitResponse, error) {
	req := c.c.NewRequest(c.serviceName, "BehaviourService.GetSharedHabit", in)
	out := new(GetSharedHabitResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *behaviourServiceClient) GetTopTags(ctx context.Context, in *GetTopTagsRequest, opts ...client.CallOption) (*GetTopTagsResponse, error) {
	req := c.c.NewRequest(c.serviceName, "BehaviourService.GetTopTags", in)
	out := new(GetTopTagsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *behaviourServiceClient) AutocompleteTags(ctx context.Context, in *AutocompleteTagsRequest, opts ...client.CallOption) (*AutocompleteTagsResponse, error) {
	req := c.c.NewRequest(c.serviceName, "BehaviourService.AutocompleteTags", in)
	out := new(AutocompleteTagsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *behaviourServiceClient) WarmupCacheBehaviour(ctx context.Context, in *WarmupCacheBehaviourRequest, opts ...client.CallOption) (*WarmupCacheBehaviourResponse, error) {
	req := c.c.NewRequest(c.serviceName, "BehaviourService.WarmupCacheBehaviour", in)
	out := new(WarmupCacheBehaviourResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *behaviourServiceClient) AllGoalResponse(ctx context.Context, in *go_micro_srv_user.AllGoalResponseRequest, opts ...client.CallOption) (*go_micro_srv_user.AllGoalResponseResponse, error) {
	req := c.c.NewRequest(c.serviceName, "BehaviourService.AllGoalResponse", in)
	out := new(go_micro_srv_user.AllGoalResponseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *behaviourServiceClient) AllChallengeResponse(ctx context.Context, in *go_micro_srv_user.AllChallengeResponseRequest, opts ...client.CallOption) (*go_micro_srv_user.AllChallengeResponseResponse, error) {
	req := c.c.NewRequest(c.serviceName, "BehaviourService.AllChallengeResponse", in)
	out := new(go_micro_srv_user.AllChallengeResponseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *behaviourServiceClient) AllHabitResponse(ctx context.Context, in *go_micro_srv_user.AllHabitResponseRequest, opts ...client.CallOption) (*go_micro_srv_user.AllHabitResponseResponse, error) {
	req := c.c.NewRequest(c.serviceName, "BehaviourService.AllHabitResponse", in)
	out := new(go_micro_srv_user.AllHabitResponseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for BehaviourService service

type BehaviourServiceHandler interface {
	AllGoals(context.Context, *AllGoalsRequest, *AllGoalsResponse) error
	ReadGoal(context.Context, *ReadGoalRequest, *ReadGoalResponse) error
	CreateGoal(context.Context, *CreateGoalRequest, *CreateGoalResponse) error
	UpdateGoal(context.Context, *UpdateGoalRequest, *UpdateGoalResponse) error
	DeleteGoal(context.Context, *DeleteGoalRequest, *DeleteGoalResponse) error
	AllChallenges(context.Context, *AllChallengesRequest, *AllChallengesResponse) error
	ReadChallenge(context.Context, *ReadChallengeRequest, *ReadChallengeResponse) error
	CreateChallenge(context.Context, *CreateChallengeRequest, *CreateChallengeResponse) error
	UpdateChallenge(context.Context, *UpdateChallengeRequest, *UpdateChallengeResponse) error
	DeleteChallenge(context.Context, *DeleteChallengeRequest, *DeleteChallengeResponse) error
	AllHabits(context.Context, *AllHabitsRequest, *AllHabitsResponse) error
	ReadHabit(context.Context, *ReadHabitRequest, *ReadHabitResponse) error
	CreateHabit(context.Context, *CreateHabitRequest, *CreateHabitResponse) error
	UpdateHabit(context.Context, *UpdateHabitRequest, *UpdateHabitResponse) error
	DeleteHabit(context.Context, *DeleteHabitRequest, *DeleteHabitResponse) error
	Filter(context.Context, *FilterRequest, *FilterResponse) error
	Search(context.Context, *SearchRequest, *SearchResponse) error
	UploadGoals(context.Context, *UploadGoalsRequest, *UploadGoalsResponse) error
	ShareGoal(context.Context, *ShareGoalRequest, *ShareGoalResponse) error
	ShareChallenge(context.Context, *ShareChallengeRequest, *ShareChallengeResponse) error
	ShareHabit(context.Context, *ShareHabitRequest, *ShareHabitResponse) error
	AutocompleteGoalSearch(context.Context, *AutocompleteSearchRequest, *AutocompleteSearchResponse) error
	AutocompleteChallengeSearch(context.Context, *AutocompleteSearchRequest, *AutocompleteSearchResponse) error
	AutocompleteHabitSearch(context.Context, *AutocompleteSearchRequest, *AutocompleteSearchResponse) error
	GetSharedGoal(context.Context, *GetSharedGoalRequest, *GetSharedGoalResponse) error
	GetSharedChallenge(context.Context, *GetSharedChallengeRequest, *GetSharedChallengeResponse) error
	GetSharedHabit(context.Context, *GetSharedHabitRequest, *GetSharedHabitResponse) error
	GetTopTags(context.Context, *GetTopTagsRequest, *GetTopTagsResponse) error
	AutocompleteTags(context.Context, *AutocompleteTagsRequest, *AutocompleteTagsResponse) error
	WarmupCacheBehaviour(context.Context, *WarmupCacheBehaviourRequest, *WarmupCacheBehaviourResponse) error
	AllGoalResponse(context.Context, *go_micro_srv_user.AllGoalResponseRequest, *go_micro_srv_user.AllGoalResponseResponse) error
	AllChallengeResponse(context.Context, *go_micro_srv_user.AllChallengeResponseRequest, *go_micro_srv_user.AllChallengeResponseResponse) error
	AllHabitResponse(context.Context, *go_micro_srv_user.AllHabitResponseRequest, *go_micro_srv_user.AllHabitResponseResponse) error
}

func RegisterBehaviourServiceHandler(s server.Server, hdlr BehaviourServiceHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&BehaviourService{hdlr}, opts...))
}

type BehaviourService struct {
	BehaviourServiceHandler
}

func (h *BehaviourService) AllGoals(ctx context.Context, in *AllGoalsRequest, out *AllGoalsResponse) error {
	return h.BehaviourServiceHandler.AllGoals(ctx, in, out)
}

func (h *BehaviourService) ReadGoal(ctx context.Context, in *ReadGoalRequest, out *ReadGoalResponse) error {
	return h.BehaviourServiceHandler.ReadGoal(ctx, in, out)
}

func (h *BehaviourService) CreateGoal(ctx context.Context, in *CreateGoalRequest, out *CreateGoalResponse) error {
	return h.BehaviourServiceHandler.CreateGoal(ctx, in, out)
}

func (h *BehaviourService) UpdateGoal(ctx context.Context, in *UpdateGoalRequest, out *UpdateGoalResponse) error {
	return h.BehaviourServiceHandler.UpdateGoal(ctx, in, out)
}

func (h *BehaviourService) DeleteGoal(ctx context.Context, in *DeleteGoalRequest, out *DeleteGoalResponse) error {
	return h.BehaviourServiceHandler.DeleteGoal(ctx, in, out)
}

func (h *BehaviourService) AllChallenges(ctx context.Context, in *AllChallengesRequest, out *AllChallengesResponse) error {
	return h.BehaviourServiceHandler.AllChallenges(ctx, in, out)
}

func (h *BehaviourService) ReadChallenge(ctx context.Context, in *ReadChallengeRequest, out *ReadChallengeResponse) error {
	return h.BehaviourServiceHandler.ReadChallenge(ctx, in, out)
}

func (h *BehaviourService) CreateChallenge(ctx context.Context, in *CreateChallengeRequest, out *CreateChallengeResponse) error {
	return h.BehaviourServiceHandler.CreateChallenge(ctx, in, out)
}

func (h *BehaviourService) UpdateChallenge(ctx context.Context, in *UpdateChallengeRequest, out *UpdateChallengeResponse) error {
	return h.BehaviourServiceHandler.UpdateChallenge(ctx, in, out)
}

func (h *BehaviourService) DeleteChallenge(ctx context.Context, in *DeleteChallengeRequest, out *DeleteChallengeResponse) error {
	return h.BehaviourServiceHandler.DeleteChallenge(ctx, in, out)
}

func (h *BehaviourService) AllHabits(ctx context.Context, in *AllHabitsRequest, out *AllHabitsResponse) error {
	return h.BehaviourServiceHandler.AllHabits(ctx, in, out)
}

func (h *BehaviourService) ReadHabit(ctx context.Context, in *ReadHabitRequest, out *ReadHabitResponse) error {
	return h.BehaviourServiceHandler.ReadHabit(ctx, in, out)
}

func (h *BehaviourService) CreateHabit(ctx context.Context, in *CreateHabitRequest, out *CreateHabitResponse) error {
	return h.BehaviourServiceHandler.CreateHabit(ctx, in, out)
}

func (h *BehaviourService) UpdateHabit(ctx context.Context, in *UpdateHabitRequest, out *UpdateHabitResponse) error {
	return h.BehaviourServiceHandler.UpdateHabit(ctx, in, out)
}

func (h *BehaviourService) DeleteHabit(ctx context.Context, in *DeleteHabitRequest, out *DeleteHabitResponse) error {
	return h.BehaviourServiceHandler.DeleteHabit(ctx, in, out)
}

func (h *BehaviourService) Filter(ctx context.Context, in *FilterRequest, out *FilterResponse) error {
	return h.BehaviourServiceHandler.Filter(ctx, in, out)
}

func (h *BehaviourService) Search(ctx context.Context, in *SearchRequest, out *SearchResponse) error {
	return h.BehaviourServiceHandler.Search(ctx, in, out)
}

func (h *BehaviourService) UploadGoals(ctx context.Context, in *UploadGoalsRequest, out *UploadGoalsResponse) error {
	return h.BehaviourServiceHandler.UploadGoals(ctx, in, out)
}

func (h *BehaviourService) ShareGoal(ctx context.Context, in *ShareGoalRequest, out *ShareGoalResponse) error {
	return h.BehaviourServiceHandler.ShareGoal(ctx, in, out)
}

func (h *BehaviourService) ShareChallenge(ctx context.Context, in *ShareChallengeRequest, out *ShareChallengeResponse) error {
	return h.BehaviourServiceHandler.ShareChallenge(ctx, in, out)
}

func (h *BehaviourService) ShareHabit(ctx context.Context, in *ShareHabitRequest, out *ShareHabitResponse) error {
	return h.BehaviourServiceHandler.ShareHabit(ctx, in, out)
}

func (h *BehaviourService) AutocompleteGoalSearch(ctx context.Context, in *AutocompleteSearchRequest, out *AutocompleteSearchResponse) error {
	return h.BehaviourServiceHandler.AutocompleteGoalSearch(ctx, in, out)
}

func (h *BehaviourService) AutocompleteChallengeSearch(ctx context.Context, in *AutocompleteSearchRequest, out *AutocompleteSearchResponse) error {
	return h.BehaviourServiceHandler.AutocompleteChallengeSearch(ctx, in, out)
}

func (h *BehaviourService) AutocompleteHabitSearch(ctx context.Context, in *AutocompleteSearchRequest, out *AutocompleteSearchResponse) error {
	return h.BehaviourServiceHandler.AutocompleteHabitSearch(ctx, in, out)
}

func (h *BehaviourService) GetSharedGoal(ctx context.Context, in *GetSharedGoalRequest, out *GetSharedGoalResponse) error {
	return h.BehaviourServiceHandler.GetSharedGoal(ctx, in, out)
}

func (h *BehaviourService) GetSharedChallenge(ctx context.Context, in *GetSharedChallengeRequest, out *GetSharedChallengeResponse) error {
	return h.BehaviourServiceHandler.GetSharedChallenge(ctx, in, out)
}

func (h *BehaviourService) GetSharedHabit(ctx context.Context, in *GetSharedHabitRequest, out *GetSharedHabitResponse) error {
	return h.BehaviourServiceHandler.GetSharedHabit(ctx, in, out)
}

func (h *BehaviourService) GetTopTags(ctx context.Context, in *GetTopTagsRequest, out *GetTopTagsResponse) error {
	return h.BehaviourServiceHandler.GetTopTags(ctx, in, out)
}

func (h *BehaviourService) AutocompleteTags(ctx context.Context, in *AutocompleteTagsRequest, out *AutocompleteTagsResponse) error {
	return h.BehaviourServiceHandler.AutocompleteTags(ctx, in, out)
}

func (h *BehaviourService) WarmupCacheBehaviour(ctx context.Context, in *WarmupCacheBehaviourRequest, out *WarmupCacheBehaviourResponse) error {
	return h.BehaviourServiceHandler.WarmupCacheBehaviour(ctx, in, out)
}

func (h *BehaviourService) AllGoalResponse(ctx context.Context, in *go_micro_srv_user.AllGoalResponseRequest, out *go_micro_srv_user.AllGoalResponseResponse) error {
	return h.BehaviourServiceHandler.AllGoalResponse(ctx, in, out)
}

func (h *BehaviourService) AllChallengeResponse(ctx context.Context, in *go_micro_srv_user.AllChallengeResponseRequest, out *go_micro_srv_user.AllChallengeResponseResponse) error {
	return h.BehaviourServiceHandler.AllChallengeResponse(ctx, in, out)
}

func (h *BehaviourService) AllHabitResponse(ctx context.Context, in *go_micro_srv_user.AllHabitResponseRequest, out *go_micro_srv_user.AllHabitResponseResponse) error {
	return h.BehaviourServiceHandler.AllHabitResponse(ctx, in, out)
}

func init() {
	proto.RegisterFile("server/behaviour-srv/proto/behaviour/behaviour.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 3069 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x1c, 0x4b, 0x6f, 0xdc, 0xc6,
	0x79, 0xb9, 0x2f, 0xed, 0x7e, 0xb2, 0xe4, 0xd5, 0x58, 0x8f, 0xf5, 0xda, 0x49, 0x15, 0xb6, 0x4e,
	0x65, 0xbb, 0x96, 0x13, 0xd9, 0x4e, 0xe2, 0x24, 0x48, 0x2a, 0xc9, 0xf2, 0x03, 0xb1, 0x63, 0x83,
	0x92, 0x1a, 0xb8, 0x68, 0x21, 0x50, 0xdc, 0xf1, 0x8a, 0xf1, 0xee, 0x72, 0x43, 0x72, 0x15, 0x2b,
	0x45, 0x81, 0x36, 0x01, 0x0a, 0xb4, 0x05, 0x7a, 0xe8, 0xa5, 0xa7, 0x1e, 0x92, 0x1e, 0x0a, 0xf4,
	0x52, 0x14, 0x28, 0x7a, 0x29, 0xd2, 0x43, 0x8f, 0xed, 0x21, 0xe8, 0x2f, 0xc8, 0x2d, 0xbf, 0xa3,
	0x98, 0x07, 0xc9, 0x19, 0x92, 0xb3, 0x0f, 0x4a, 0x11, 0x12, 0xd8, 0x17, 0x9b, 0x33, 0xfb, 0xcd,
	0x7c, 0xef, 0x6f, 0xbe, 0x99, 0xf9, 0x46, 0x70, 0xd5, 0xc3, 0xee, 0x3e, 0x76, 0x2f, 0xef, 0xe2,
	0x3d, 0x73, 0xdf, 0x76, 0xfa, 0xee, 0x25, 0xcf, 0xdd, 0xbf, 0xdc, 0x73, 0x1d, 0xdf, 0x89, 0xfa,
	0xa2, 0xaf, 0x65, 0xfa, 0x0b, 0x9a, 0x6f, 0x39, 0xcb, 0x1d, 0xdb, 0x72, 0x9d, 0x65, 0xcf, 0xdd,
	0x5f, 0x0e, 0x7f, 0x6d, 0x5c, 0xe4, 0xb3, 0x79, 0xbe, 0xe9, 0xdb, 0x96, 0x30, 0x15, 0xeb, 0xe0,
	0xff, 0xb1, 0x49, 0x1a, 0xe7, 0x38, 0xb0, 0xef, 0x34, 0x1d, 0x01, 0x94, 0x34, 0xe9, 0x3f, 0x31,
	0xb0, 0xbe, 0x87, 0x45, 0xe2, 0x48, 0x93, 0xfe, 0xc3, 0xc1, 0x96, 0x39, 0x98, 0xe5, 0x74, 0x7d,
	0xdc, 0xf5, 0x05, 0x48, 0xde, 0x13, 0xfc, 0xcf, 0xe0, 0xf5, 0x37, 0xa1, 0x72, 0xcb, 0x31, 0xdb,
	0x37, 0x4c, 0xdf, 0x44, 0x2f, 0x41, 0xb1, 0xe5, 0x98, 0xed, 0xba, 0xb6, 0xa8, 0x2d, 0x4d, 0xae,
	0x9c, 0x5d, 0x4e, 0xe7, 0x6e, 0x99, 0xc0, 0x1b, 0x14, 0x52, 0x5f, 0x85, 0x49, 0xd2, 0x5a, 0x75,
	0x5d, 0x3a, 0xc1, 0x0a, 0x94, 0x48, 0xb7, 0x57, 0xd7, 0x16, 0x0b, 0x43, 0x67, 0x60, 0xa0, 0xfa,
	0x0f, 0xa1, 0x7a, 0xdb, 0xdc, 0xb5, 0x7d, 0x3a, 0xc1, 0x15, 0x28, 0xed, 0x91, 0x06, 0x27, 0xe1,
	0x39, 0xd5, 0x04, 0x74, 0x84, 0xc1, 0x60, 0xf5, 0x0d, 0x38, 0x41, 0xdb, 0x01, 0x15, 0xd7, 0xa0,
	0x4c, 0x7f, 0x08, 0xc8, 0x18, 0x32, 0x0b, 0x07, 0xd6, 0x1f, 0xc0, 0xd4, 0xfa, 0x9e, 0xd9, 0x6e,
	0xe3, 0x6e, 0x0b, 0xd3, 0x79, 0xde, 0x86, 0xaa, 0x15, 0x74, 0x70, 0x82, 0x5e, 0x50, 0x4d, 0x15,
	0x8e, 0x34, 0xa2, 0x31, 0xfa, 0x36, 0xd4, 0xc2, 0xfe, 0x80, 0xb8, 0x55, 0x80, 0x10, 0x20, 0x20,
	0x70, 0x84, 0x59, 0x85, 0x41, 0xfa, 0xe7, 0x1a, 0x9c, 0x5c, 0x6d, 0xb7, 0x89, 0x10, 0x3d, 0x03,
	0x7f, 0xd0, 0xc7, 0x9e, 0x8f, 0xe6, 0xa0, 0xec, 0xb8, 0xad, 0x1d, 0xbb, 0x49, 0x09, 0xad, 0x1a,
	0x25, 0xc7, 0x6d, 0xdd, 0x69, 0xa2, 0x05, 0x98, 0xf0, 0xb1, 0xd9, 0x21, 0xfd, 0x79, 0xda, 0x5f,
	0x26, 0xcd, 0x3b, 0x4d, 0x34, 0x0b, 0xa5, 0xb6, 0xdd, 0xb1, 0xfd, 0x7a, 0x61, 0x51, 0x5b, 0x2a,
	0x18, 0xac, 0x81, 0xe6, 0xa1, 0xec, 0x3c, 0x7a, 0xe4, 0x61, 0xbf, 0x5e, 0xa4, 0xdd, 0xbc, 0x85,
	0xce, 0xc1, 0xb4, 0xe7, 0xb8, 0xfe, 0x4e, 0xcf, 0x74, 0xcd, 0x0e, 0xf6, 0xb1, 0x5b, 0x2f, 0xd1,
	0xd9, 0xa6, 0x48, 0xef, 0x83, 0xa0, 0x33, 0x04, 0x6b, 0xda, 0x2e, 0xb6, 0x7c, 0xdb, 0xe9, 0xd6,
	0xcb, 0x11, 0xd8, 0x8d, 0xa0, 0x53, 0x3f, 0x80, 0x5a, 0x44, 0xbe, 0xd7, 0x73, 0xba, 0x1e, 0x46,
	0xaf, 0x42, 0xb1, 0x69, 0xfa, 0x26, 0x17, 0xf3, 0x77, 0x07, 0x19, 0x0e, 0x97, 0xa4, 0x41, 0x07,
	0x20, 0x04, 0x45, 0xcb, 0x69, 0x62, 0xca, 0x5e, 0xc1, 0xa0, 0xdf, 0xa8, 0x0e, 0x13, 0x1d, 0xec,
	0x79, 0x66, 0x0b, 0x53, 0xf6, 0xaa, 0x46, 0xd0, 0xd4, 0x7f, 0xa7, 0xc1, 0xcc, 0xba, 0x8b, 0x4d,
	0x1f, 0x53, 0x13, 0xe4, 0xc2, 0x1b, 0xdb, 0xee, 0x89, 0x5c, 0x89, 0xcf, 0x09, 0x72, 0x25, 0xcd,
	0x3b, 0x4d, 0x41, 0x0f, 0x05, 0x85, 0x1e, 0x8a, 0xa2, 0x1e, 0xf4, 0x27, 0x80, 0x44, 0x7a, 0xb8,
	0x34, 0xae, 0x4a, 0xd2, 0x58, 0x1c, 0x44, 0x50, 0x66, 0x51, 0xf4, 0x61, 0x66, 0xbb, 0xd7, 0x3c,
	0xb4, 0x24, 0x22, 0x86, 0xf3, 0x0a, 0x86, 0x0b, 0x71, 0x86, 0x45, 0xb4, 0xc7, 0xc8, 0xf0, 0x8f,
	0xe1, 0xa4, 0x81, 0xcd, 0xa6, 0xc8, 0xee, 0x02, 0x4c, 0x10, 0x26, 0x22, 0xb7, 0x29, 0x93, 0xa6,
	0xa4, 0xc6, 0xd1, 0xb8, 0xda, 0x87, 0x5a, 0x34, 0xf7, 0x31, 0xf2, 0xf4, 0x13, 0x98, 0xb9, 0x81,
	0xdb, 0x58, 0x56, 0xe2, 0x91, 0x71, 0xb5, 0x06, 0x48, 0x9c, 0x9d, 0xf3, 0x35, 0x1e, 0x85, 0xff,
	0xd2, 0xa8, 0xb7, 0xd3, 0x50, 0xfb, 0xad, 0x8c, 0x56, 0x3f, 0x83, 0x19, 0x81, 0x7e, 0x2e, 0x83,
	0xd7, 0x24, 0xdd, 0x7e, 0x6f, 0xe0, 0x02, 0x73, 0x98, 0x78, 0xf5, 0x7b, 0x2d, 0x88, 0x0f, 0x6c,
	0xad, 0xe2, 0xf2, 0xcb, 0xb2, 0x4c, 0x1e, 0x5d, 0xcc, 0xfa, 0x08, 0x4e, 0x49, 0x34, 0x71, 0x99,
	0x5c, 0x93, 0x64, 0xf2, 0xc2, 0x40, 0x9a, 0x32, 0x0b, 0xe4, 0x20, 0x08, 0x1f, 0x87, 0x97, 0xc7,
	0xb8, 0xde, 0xf0, 0x11, 0x9c, 0x92, 0x50, 0x1f, 0x27, 0xdb, 0x3f, 0x65, 0xf1, 0x45, 0x62, 0xfa,
	0x34, 0x54, 0x28, 0x23, 0x91, 0x1b, 0x4d, 0xd0, 0x76, 0x06, 0x47, 0x7f, 0x02, 0x33, 0xc2, 0xf4,
	0xc7, 0xc9, 0xd8, 0x4e, 0x10, 0x62, 0xbe, 0x2e, 0xd6, 0xd6, 0xe1, 0x94, 0x84, 0x20, 0x53, 0x10,
	0x7b, 0x83, 0x58, 0x5d, 0xdb, 0x61, 0x01, 0x3e, 0x8c, 0x62, 0xd3, 0x90, 0x0f, 0xe9, 0xcb, 0xdb,
	0x2a, 0xd2, 0x08, 0x05, 0xd2, 0xe0, 0x18, 0x05, 0x5a, 0x3a, 0x05, 0x79, 0x99, 0x82, 0x7f, 0x6b,
	0x30, 0xbb, 0xda, 0x6e, 0x87, 0x09, 0xe1, 0xb7, 0x32, 0x94, 0x7e, 0xa2, 0xc1, 0x5c, 0x8c, 0x09,
	0x2e, 0x8c, 0x37, 0x25, 0x5b, 0x5b, 0x1a, 0x9a, 0x0f, 0x1f, 0x26, 0xa6, 0x7e, 0xa6, 0xc1, 0x3c,
	0x8b, 0x5f, 0x51, 0x7a, 0xcd, 0x85, 0x79, 0xd8, 0x8c, 0xff, 0xe8, 0x62, 0xec, 0xc7, 0x1a, 0x2c,
	0x24, 0x88, 0xe4, 0xc2, 0xba, 0x2e, 0x09, 0xeb, 0xdc, 0x50, 0x02, 0x33, 0x4b, 0xea, 0xd7, 0x1a,
	0xcc, 0xb3, 0x90, 0x77, 0xf4, 0x92, 0x1a, 0xd7, 0x8f, 0x89, 0x40, 0x12, 0xb4, 0x1c, 0xb7, 0x40,
	0x6c, 0x98, 0x25, 0x71, 0x32, 0x21, 0x8d, 0x17, 0xe0, 0x44, 0xc8, 0x59, 0xe4, 0x8a, 0x93, 0x61,
	0x5f, 0x86, 0xb8, 0xf5, 0x0b, 0x0d, 0xe6, 0x62, 0xb8, 0x8e, 0x9b, 0xdb, 0xc7, 0x30, 0xcf, 0x42,
	0xe7, 0x71, 0xf0, 0x7b, 0x0b, 0x16, 0x12, 0xc8, 0x32, 0xc5, 0xea, 0xcf, 0xf3, 0x30, 0x75, 0xd3,
	0x6e, 0xfb, 0xd8, 0x3d, 0x9e, 0x10, 0x89, 0xa0, 0xe8, 0x1f, 0xf4, 0x70, 0xbd, 0xb4, 0x58, 0x58,
	0xaa, 0x1a, 0xf4, 0x1b, 0xbd, 0x02, 0x65, 0xcf, 0x37, 0xfd, 0xbe, 0x57, 0x2f, 0x2f, 0x16, 0x96,
	0xa6, 0x57, 0x9e, 0x57, 0x29, 0x69, 0x93, 0x42, 0x19, 0x1c, 0x1a, 0x35, 0xa0, 0x62, 0x99, 0x3e,
	0x6e, 0x39, 0xee, 0x41, 0x7d, 0x82, 0xce, 0x17, 0xb6, 0x09, 0xc7, 0x16, 0x09, 0x08, 0x8e, 0x5b,
	0xaf, 0xd0, 0x9f, 0x82, 0x66, 0x4a, 0x90, 0xae, 0x8e, 0x16, 0xa4, 0x21, 0x2d, 0x48, 0xff, 0x23,
	0x0f, 0xd3, 0x81, 0xfc, 0xb8, 0x02, 0xde, 0x96, 0x2c, 0xee, 0xa2, 0x8a, 0x19, 0x79, 0xd4, 0x72,
	0x56, 0xbb, 0x6b, 0xfc, 0x5d, 0x83, 0x62, 0xd6, 0xe3, 0x24, 0xe1, 0xf0, 0x27, 0x3f, 0xc6, 0xe1,
	0x4f, 0xec, 0x58, 0xa6, 0x90, 0xe5, 0x58, 0xe6, 0xb7, 0x79, 0x98, 0xda, 0xc4, 0xa6, 0x6b, 0xed,
	0x1d, 0x9b, 0xe1, 0x75, 0xcd, 0x0e, 0xe6, 0x2b, 0x32, 0xfd, 0x26, 0x42, 0xf5, 0xfa, 0x9d, 0x8e,
	0xe9, 0x1e, 0xf0, 0x15, 0x38, 0x68, 0xa2, 0x45, 0x98, 0x6c, 0x62, 0xcf, 0x72, 0xed, 0x1e, 0x55,
	0xfd, 0x04, 0xf3, 0x58, 0xa1, 0x2b, 0xc5, 0x8c, 0x2a, 0xa3, 0x99, 0x51, 0x55, 0x65, 0x46, 0x81,
	0x34, 0xc6, 0x33, 0x23, 0x79, 0xd4, 0x53, 0x67, 0x46, 0xff, 0xd5, 0xa0, 0xb6, 0xb9, 0x67, 0xba,
	0xd2, 0x96, 0x3e, 0x0b, 0x0b, 0xaf, 0x43, 0x89, 0x24, 0x1f, 0x01, 0x07, 0xca, 0x4d, 0xea, 0x96,
	0xe9, 0xb6, 0xb0, 0x8f, 0x9b, 0xdb, 0x1e, 0x76, 0x0d, 0x36, 0x44, 0xcc, 0x63, 0x0a, 0x8a, 0x3c,
	0xa6, 0xa8, 0x30, 0xe9, 0x92, 0x14, 0xd6, 0x57, 0x61, 0x46, 0x60, 0x26, 0x53, 0xea, 0xfb, 0xa5,
	0x06, 0x73, 0x74, 0x8e, 0xc4, 0x32, 0x74, 0xf8, 0xb3, 0xd4, 0x6f, 0x86, 0x90, 0x6e, 0xc2, 0x7c,
	0x9c, 0xc1, 0x4c, 0x92, 0xfa, 0x42, 0xe3, 0xd2, 0x96, 0x36, 0x53, 0xd9, 0x8e, 0xc3, 0xbf, 0x19,
	0x92, 0x59, 0x03, 0x24, 0x32, 0x94, 0x49, 0x2a, 0x2f, 0xc3, 0xe9, 0xd5, 0xbe, 0xef, 0x58, 0x4e,
	0xa7, 0x47, 0xf2, 0x0b, 0x39, 0x44, 0xcf, 0x42, 0xc9, 0xb7, 0xfd, 0x36, 0x0e, 0x22, 0x34, 0x6d,
	0xe8, 0x5f, 0x69, 0xd0, 0x48, 0x1b, 0xc3, 0xf1, 0xbf, 0x23, 0x05, 0xb2, 0x57, 0x55, 0x92, 0x51,
	0xcf, 0x90, 0x3d, 0xa8, 0xdd, 0xe3, 0x31, 0x6d, 0x03, 0x2a, 0x2e, 0x9f, 0x8c, 0xab, 0xf5, 0xbc,
	0x4c, 0x06, 0xbf, 0x62, 0x12, 0x69, 0x08, 0xb0, 0x1b, 0xe1, 0x50, 0xfd, 0x0f, 0x55, 0x28, 0x12,
	0xd7, 0x4c, 0xec, 0x65, 0x43, 0xb9, 0xe4, 0x05, 0xb9, 0x88, 0xcb, 0x4b, 0x61, 0xe0, 0xf2, 0x52,
	0x4c, 0x2e, 0x2f, 0xb3, 0x50, 0xb2, 0x3b, 0x84, 0x23, 0xa6, 0x61, 0xd6, 0xa0, 0xd9, 0x93, 0xd9,
	0x62, 0x79, 0x12, 0xc9, 0x9e, 0xcc, 0x96, 0x17, 0x66, 0x3a, 0xb8, 0x49, 0x97, 0xa9, 0x82, 0x11,
	0x34, 0xc9, 0x2f, 0x7d, 0xba, 0x07, 0x68, 0xd2, 0xb5, 0xa9, 0x60, 0x04, 0x4d, 0xb4, 0x26, 0x64,
	0x4e, 0x55, 0xaa, 0x96, 0x17, 0x53, 0xe5, 0xb1, 0x16, 0x68, 0x67, 0x9d, 0x43, 0x0b, 0x19, 0xd6,
	0x15, 0x28, 0xfb, 0xd4, 0x98, 0x69, 0x62, 0x34, 0xb9, 0x72, 0x26, 0x75, 0x06, 0x66, 0xef, 0x06,
	0x07, 0x25, 0x29, 0x5b, 0xb3, 0xef, 0x9a, 0x94, 0xeb, 0x49, 0xca, 0x59, 0xd8, 0x16, 0xac, 0xfd,
	0x84, 0x68, 0xed, 0xd7, 0xa0, 0xca, 0x19, 0x5a, 0x3b, 0xa8, 0x4f, 0x51, 0x54, 0x0b, 0x32, 0x2a,
	0x7a, 0x9f, 0x47, 0x1d, 0x2a, 0x82, 0x24, 0x79, 0x80, 0xe7, 0xf4, 0x5d, 0x0b, 0xd7, 0x67, 0x98,
	0x8f, 0xb0, 0x16, 0x7a, 0x03, 0x2a, 0xbe, 0x6b, 0x5a, 0x8f, 0x89, 0xaf, 0x22, 0x6a, 0x0a, 0xdf,
	0x51, 0xfa, 0x2a, 0x83, 0x33, 0xc2, 0x01, 0xe8, 0x1e, 0xcc, 0x78, 0x7d, 0xcb, 0xc2, 0x9e, 0xb7,
	0x63, 0xb9, 0xb6, 0x8f, 0x5d, 0xdb, 0xf4, 0xea, 0xa7, 0xe8, 0x2c, 0xca, 0x13, 0xeb, 0x75, 0x0e,
	0x68, 0xd4, 0xf8, 0xd0, 0xa0, 0x23, 0xbe, 0xfe, 0xcd, 0x66, 0x89, 0xc8, 0x51, 0xb8, 0x9a, 0x1b,
	0x27, 0x5c, 0x5d, 0x87, 0x8a, 0xe9, 0xfa, 0xb6, 0xd5, 0xc6, 0x5e, 0x7d, 0x3e, 0x6d, 0x60, 0x70,
	0xed, 0xb9, 0xca, 0xa0, 0x8c, 0x10, 0x1c, 0xbd, 0x45, 0x04, 0x68, 0xb7, 0x5a, 0x44, 0x80, 0x0b,
	0x74, 0xa8, 0x9e, 0xaa, 0xf9, 0x7b, 0x4e, 0xb3, 0xdf, 0xc6, 0x5b, 0x0c, 0xd4, 0x08, 0xc7, 0xa0,
	0xd7, 0xa0, 0xe2, 0x61, 0x7f, 0xd7, 0xb4, 0x1e, 0x7b, 0xf5, 0x7a, 0xda, 0xfa, 0xcc, 0xc7, 0x6f,
	0x32, 0x20, 0x23, 0x84, 0x8e, 0x62, 0xec, 0xe9, 0xf1, 0x63, 0xec, 0x5b, 0xd0, 0xe0, 0x8e, 0x6d,
	0x3b, 0xdd, 0xd5, 0x5e, 0xcf, 0x75, 0xf6, 0x59, 0xbe, 0x60, 0xbb, 0xb8, 0x59, 0x6f, 0x2c, 0x6a,
	0x4b, 0x15, 0x63, 0x00, 0x84, 0xb0, 0x47, 0x39, 0xb3, 0xa8, 0x8d, 0xb1, 0x47, 0x79, 0x05, 0x26,
	0x3c, 0xec, 0xfb, 0x76, 0xb7, 0x55, 0x3f, 0x9b, 0x76, 0x4b, 0x14, 0x31, 0x4b, 0x60, 0x8c, 0x00,
	0x18, 0x5d, 0x82, 0x92, 0xef, 0x34, 0x1d, 0xaf, 0xfe, 0x5c, 0x9a, 0xc5, 0xd3, 0x8b, 0xee, 0x2d,
	0xa7, 0xe9, 0x18, 0x0c, 0x4a, 0xff, 0x9f, 0x06, 0x13, 0xdc, 0x5c, 0x89, 0x63, 0x76, 0x4c, 0xf7,
	0x31, 0x76, 0x79, 0xc4, 0x4d, 0x77, 0xcc, 0x7b, 0x14, 0xc4, 0xe0, 0xa0, 0xe8, 0x6d, 0xa8, 0x3e,
	0x72, 0x49, 0x94, 0xef, 0x5a, 0x07, 0x34, 0x8a, 0x4d, 0xab, 0x2d, 0xf1, 0x66, 0x00, 0x68, 0x44,
	0x63, 0xd0, 0xeb, 0x50, 0xee, 0x60, 0x7f, 0xcf, 0x61, 0x6b, 0x98, 0xca, 0x28, 0x38, 0x8d, 0xf7,
	0x28, 0xa4, 0xc1, 0x47, 0x90, 0x60, 0xd7, 0xef, 0xfa, 0x76, 0x3b, 0x58, 0xe6, 0x68, 0x43, 0xff,
	0x54, 0x83, 0x4a, 0xe0, 0x2b, 0x04, 0x64, 0xdf, 0x6c, 0xf7, 0x83, 0x55, 0x8c, 0x35, 0x48, 0x76,
	0x4d, 0xe8, 0xdf, 0xf1, 0xfa, 0xc4, 0xb1, 0x1e, 0xf5, 0xdb, 0x94, 0xf4, 0x8a, 0x31, 0x45, 0x7a,
	0x37, 0x83, 0x4e, 0xf4, 0x1c, 0x00, 0x7e, 0xe2, 0xbb, 0xe6, 0x8e, 0x6f, 0x77, 0x82, 0x35, 0xa2,
	0x4a, 0x7b, 0xb6, 0xec, 0x0e, 0x46, 0xd7, 0xa1, 0xda, 0xc5, 0x1f, 0x32, 0xab, 0xa1, 0x24, 0x0c,
	0x09, 0x66, 0x11, 0xb4, 0xfe, 0x9b, 0x0a, 0x54, 0x43, 0xc7, 0x7c, 0xb6, 0x2c, 0x3c, 0xa5, 0xcb,
	0x42, 0x14, 0x84, 0x4f, 0x65, 0x0d, 0xc2, 0xb3, 0xd9, 0x83, 0xf0, 0x5c, 0x86, 0x20, 0x1c, 0x86,
	0xd2, 0xf9, 0xa3, 0x0e, 0xa5, 0x0b, 0x63, 0x84, 0xd2, 0xfa, 0x58, 0xa1, 0x54, 0x5c, 0x38, 0x4e,
	0x8f, 0xb5, 0x70, 0x08, 0x41, 0xb8, 0x91, 0x29, 0x08, 0x9f, 0x19, 0x29, 0x08, 0x7f, 0x31, 0x01,
	0x25, 0xaa, 0xe1, 0x67, 0x81, 0xe0, 0x29, 0x0d, 0x04, 0xa2, 0x47, 0x9f, 0xca, 0xee, 0xd1, 0xb3,
	0x87, 0xf1, 0xe8, 0xb9, 0xa3, 0xf6, 0xe8, 0xf9, 0x31, 0x3c, 0x7a, 0x21, 0xb3, 0x47, 0xd7, 0xb3,
	0x7a, 0xf4, 0xe9, 0x4c, 0x1e, 0xdd, 0x18, 0xc9, 0xa3, 0xbf, 0x22, 0x29, 0x48, 0x60, 0xd0, 0x71,
	0xa7, 0x0e, 0x4e, 0x14, 0xf3, 0xe9, 0x27, 0x8a, 0x63, 0xbb, 0xf4, 0x19, 0xa8, 0xda, 0x96, 0xd3,
	0xdd, 0xf1, 0xda, 0xfd, 0x16, 0x77, 0xeb, 0x0a, 0xe9, 0xd8, 0x6c, 0xf7, 0x5b, 0x82, 0xf1, 0x97,
	0x45, 0xe3, 0xcf, 0xe2, 0xdc, 0x41, 0x90, 0xa8, 0x46, 0x41, 0x42, 0xff, 0x8f, 0x06, 0x27, 0x44,
	0xcb, 0x40, 0x17, 0xa1, 0x48, 0x6c, 0x83, 0xa7, 0x90, 0x4a, 0x87, 0xa2, 0x40, 0x48, 0x87, 0x13,
	0x56, 0xdf, 0x75, 0x71, 0xd7, 0xff, 0x11, 0xcd, 0xd1, 0xd8, 0xe6, 0x5c, 0xea, 0x43, 0xdb, 0x50,
	0xc3, 0x4f, 0x7a, 0xd8, 0xf2, 0x71, 0xf3, 0x81, 0xeb, 0xb4, 0x5c, 0xec, 0x79, 0x54, 0x44, 0xd3,
	0x8a, 0xad, 0xf8, 0x46, 0x0c, 0x78, 0xeb, 0xa0, 0x87, 0x8d, 0xc4, 0x14, 0x84, 0x99, 0x7e, 0xd7,
	0xf6, 0xb9, 0x3c, 0xe9, 0xb7, 0xfe, 0xc7, 0x02, 0x4c, 0x85, 0xc7, 0x68, 0x94, 0x9b, 0xb8, 0xea,
	0x82, 0xc2, 0xad, 0xfc, 0xc8, 0x85, 0x5b, 0x81, 0x3c, 0x0a, 0xa3, 0xc8, 0xe3, 0xb5, 0xd0, 0x1f,
	0x8a, 0x94, 0xc3, 0xc5, 0x74, 0xe3, 0x24, 0x24, 0xc6, 0x3c, 0x42, 0xd0, 0x5a, 0x49, 0xd6, 0xda,
	0x55, 0xa8, 0x7a, 0x64, 0x40, 0x73, 0x67, 0x97, 0x9d, 0x56, 0x0f, 0xa0, 0xa2, 0xc2, 0x20, 0xd7,
	0x0e, 0x12, 0x9a, 0x99, 0x18, 0x51, 0x33, 0x95, 0xc3, 0x6b, 0x46, 0x30, 0xcd, 0xaa, 0x64, 0x9a,
	0xfa, 0xdf, 0x0a, 0xfc, 0x9c, 0x2a, 0xcc, 0x9c, 0x53, 0x95, 0x24, 0x5d, 0x9a, 0xe6, 0x33, 0x5c,
	0x9a, 0x3e, 0xd3, 0xd9, 0xd1, 0xe9, 0xec, 0xd3, 0x02, 0x4c, 0x47, 0x67, 0x8b, 0xa9, 0xfa, 0x0a,
	0xcb, 0x8a, 0xf2, 0x63, 0x94, 0x15, 0x3d, 0xd3, 0xd1, 0xd1, 0xe9, 0xe8, 0x36, 0xcc, 0xde, 0xc2,
	0x3e, 0x65, 0x3f, 0x5e, 0xb7, 0x19, 0x9c, 0x2f, 0x6b, 0xd2, 0xf9, 0xb2, 0x50, 0xfa, 0x98, 0x17,
	0x4b, 0x1f, 0xf5, 0xcf, 0x34, 0x98, 0x8b, 0x4d, 0xc5, 0x0f, 0x73, 0x6f, 0x4a, 0x87, 0xb9, 0x2b,
	0xca, 0xc8, 0x99, 0x36, 0x58, 0x38, 0xc7, 0x6d, 0xac, 0xf2, 0x93, 0xd9, 0xeb, 0x52, 0x09, 0xad,
	0xf2, 0x7a, 0x5e, 0x0a, 0xe7, 0xbc, 0x9a, 0xfe, 0x3d, 0x38, 0x1d, 0xa2, 0x49, 0x5c, 0x76, 0x28,
	0x79, 0x8e, 0x5f, 0xc6, 0xe7, 0x13, 0x97, 0xf1, 0xfa, 0x3f, 0x35, 0x68, 0xa4, 0xcd, 0x3c, 0xde,
	0x79, 0xb6, 0x7a, 0x06, 0x51, 0x0e, 0x0f, 0xb8, 0x1c, 0x6e, 0x27, 0x2b, 0x44, 0x2e, 0x0c, 0x14,
	0x86, 0x14, 0x3b, 0xc5, 0x32, 0xfa, 0x77, 0x04, 0xd5, 0x49, 0x37, 0x1b, 0x4a, 0x91, 0x88, 0xf5,
	0x63, 0x79, 0xa9, 0x7e, 0x4c, 0xff, 0xb3, 0x06, 0xf3, 0xf1, 0xd9, 0xb8, 0x18, 0x6e, 0x49, 0x62,
	0xb8, 0x32, 0x54, 0x0c, 0xd2, 0x68, 0x51, 0x04, 0x37, 0xb8, 0x08, 0xde, 0x94, 0xcb, 0x12, 0x5f,
	0x1c, 0xc8, 0x7e, 0x18, 0x86, 0x82, 0x67, 0x0d, 0x0f, 0x60, 0xe6, 0x16, 0xf6, 0xb7, 0x9c, 0xde,
	0x96, 0xd9, 0x0a, 0xcb, 0xbd, 0xe6, 0xa1, 0xec, 0xec, 0xbe, 0x8f, 0x2d, 0x3f, 0xe0, 0x98, 0xb5,
	0x54, 0xe5, 0x16, 0x27, 0x40, 0xeb, 0xf2, 0xdb, 0x64, 0xad, 0xab, 0xff, 0x49, 0x03, 0x24, 0x4e,
	0xc9, 0xf9, 0x5e, 0x97, 0xf8, 0xbe, 0x3c, 0x80, 0xef, 0xd8, 0xc8, 0xec, 0xd7, 0x18, 0x0d, 0x2e,
	0xa1, 0x20, 0x73, 0xd3, 0x84, 0xcc, 0xed, 0x2f, 0x1a, 0x2c, 0x88, 0xd7, 0x16, 0x22, 0xfb, 0x8a,
	0x1b, 0xf5, 0x48, 0x2a, 0x79, 0x49, 0x2a, 0x41, 0x42, 0x5b, 0x10, 0x12, 0xda, 0xe4, 0x35, 0x77,
	0x71, 0xb4, 0x6b, 0xee, 0x52, 0xda, 0x35, 0xf7, 0x5f, 0x35, 0xa8, 0x27, 0x89, 0xe5, 0x82, 0xbd,
	0x23, 0x09, 0xf6, 0xda, 0x28, 0xf7, 0x44, 0x5f, 0xbf, 0x78, 0xaf, 0xc1, 0x99, 0xf7, 0x4c, 0xb7,
	0xd3, 0xef, 0xad, 0x9b, 0xd6, 0x1e, 0x0e, 0xf7, 0xbb, 0x43, 0x0c, 0x4c, 0x7f, 0x1e, 0xce, 0xa6,
	0x0f, 0x63, 0xb4, 0x5e, 0xb8, 0x0f, 0xd5, 0xf0, 0x14, 0x15, 0x21, 0x98, 0x0e, 0x1b, 0x3b, 0xef,
	0xde, 0x7f, 0x77, 0xa3, 0x96, 0x43, 0x55, 0x28, 0xdd, 0x58, 0xbd, 0x73, 0xf7, 0x61, 0x4d, 0x43,
	0x00, 0xe5, 0xdb, 0xf7, 0xb7, 0x8d, 0xbb, 0x0f, 0x6b, 0x79, 0xf2, 0xfd, 0xde, 0xc6, 0xc6, 0x3b,
	0x77, 0x1f, 0xd6, 0x0a, 0x68, 0x12, 0x26, 0xee, 0xdd, 0x7f, 0x77, 0xeb, 0xf6, 0xdd, 0x87, 0xb5,
	0xe2, 0x85, 0x2b, 0x50, 0x66, 0x4b, 0x1e, 0x3a, 0x09, 0x93, 0xec, 0x4b, 0x9c, 0xca, 0x58, 0xbd,
	0xb9, 0x55, 0xd3, 0xd0, 0x14, 0x54, 0x1f, 0x6c, 0xaf, 0xdd, 0xbd, 0xb3, 0x79, 0x7b, 0xe3, 0x46,
	0x2d, 0xbf, 0xf2, 0xe5, 0x59, 0xa8, 0x85, 0xb4, 0x6d, 0x62, 0x77, 0xdf, 0xb6, 0x30, 0xda, 0x81,
	0x4a, 0xf0, 0xde, 0x04, 0x7d, 0x5f, 0xa9, 0x04, 0xf9, 0x41, 0x4d, 0x63, 0x69, 0x38, 0x20, 0xbf,
	0x43, 0xcb, 0x11, 0x04, 0x41, 0xf5, 0xbf, 0x1a, 0x41, 0xec, 0xed, 0x81, 0x1a, 0x41, 0xfc, 0x21,
	0x81, 0x9e, 0x43, 0x18, 0x20, 0x7a, 0x25, 0x82, 0xce, 0xab, 0x2f, 0x66, 0x62, 0x2f, 0x5b, 0x1a,
	0x17, 0x46, 0x01, 0x15, 0xd1, 0x44, 0x6f, 0x33, 0xd4, 0x68, 0x12, 0xcf, 0x46, 0xd4, 0x68, 0x92,
	0x4f, 0x3d, 0x18, 0x9a, 0xe8, 0x59, 0x81, 0x1a, 0x4d, 0xe2, 0x61, 0x83, 0x1a, 0x4d, 0xf2, 0x95,
	0x82, 0x9e, 0x43, 0x5d, 0x98, 0x92, 0x8a, 0x4d, 0xd1, 0x0f, 0x06, 0xa8, 0x34, 0x51, 0x58, 0xdb,
	0xb8, 0x34, 0x22, 0xb4, 0x88, 0x4f, 0x2a, 0xd8, 0x53, 0xe3, 0x4b, 0xab, 0x21, 0x54, 0xe3, 0x4b,
	0xad, 0x02, 0xd4, 0x73, 0xc8, 0x87, 0x93, 0xb1, 0x0a, 0x51, 0xb4, 0x3c, 0x58, 0xdd, 0x09, 0x9c,
	0x97, 0x47, 0x86, 0x17, 0xb1, 0xc6, 0xca, 0x30, 0xd5, 0x58, 0xd3, 0x6b, 0x47, 0xd5, 0x58, 0x15,
	0xf5, 0x9d, 0x0c, 0x6b, 0xac, 0x3a, 0x50, 0x8d, 0x35, 0xbd, 0x66, 0x51, 0x8d, 0x55, 0x51, 0x76,
	0xa8, 0xe7, 0xd0, 0x2e, 0x54, 0xc3, 0xa7, 0x1f, 0x68, 0x50, 0x40, 0x90, 0x5e, 0xb7, 0x34, 0xce,
	0x8f, 0x00, 0x29, 0xe2, 0x08, 0x4b, 0xef, 0xd1, 0xc0, 0x98, 0x20, 0xa6, 0x3e, 0x6a, 0x1c, 0x89,
	0x3a, 0x7e, 0x3d, 0x87, 0xf6, 0x60, 0x52, 0x78, 0xb0, 0x81, 0x86, 0x04, 0x05, 0x09, 0xcf, 0xc5,
	0x91, 0x60, 0x45, 0x4c, 0xc2, 0x1b, 0x09, 0x34, 0x24, 0x2e, 0x8c, 0x86, 0x29, 0xe5, 0xd1, 0x05,
	0xc3, 0x24, 0xd4, 0xf5, 0xa3, 0x21, 0xa1, 0x61, 0x34, 0x4c, 0x29, 0x0f, 0x05, 0xf4, 0x1c, 0x7a,
	0x08, 0x65, 0x56, 0xd9, 0x88, 0xce, 0x0d, 0xab, 0x7c, 0x64, 0xf3, 0xbf, 0x38, 0x5a, 0x81, 0x24,
	0x9b, 0x9a, 0x15, 0x86, 0xa8, 0xa7, 0x96, 0xca, 0x55, 0xd4, 0x53, 0xcb, 0xf5, 0x25, 0x81, 0x26,
	0xc2, 0x57, 0x07, 0x83, 0x34, 0x11, 0x7f, 0xd7, 0x30, 0x48, 0x13, 0x89, 0x67, 0x0c, 0xcc, 0x82,
	0xc3, 0xcd, 0x8c, 0xda, 0x82, 0xe3, 0x25, 0x6d, 0x6a, 0x0b, 0x4e, 0xd4, 0x8b, 0xe9, 0x39, 0xf4,
	0x01, 0xdf, 0xab, 0x47, 0xee, 0x7f, 0x69, 0xb4, 0xbd, 0x44, 0x80, 0x6d, 0x79, 0x54, 0x70, 0x71,
	0x95, 0x8a, 0xf2, 0x72, 0x74, 0x7e, 0x78, 0xee, 0x3e, 0x74, 0x95, 0x4a, 0x56, 0x32, 0xe9, 0x39,
	0xf4, 0x4b, 0x0d, 0xe6, 0xc5, 0x04, 0x90, 0x30, 0xce, 0x6d, 0xe2, 0xe5, 0x71, 0x0a, 0x8b, 0x18,
	0xee, 0x95, 0xf1, 0x6b, 0x91, 0xf4, 0x1c, 0xfa, 0x95, 0x06, 0x67, 0x44, 0x80, 0x50, 0x1c, 0xc7,
	0x4d, 0xc8, 0xc7, 0xb1, 0xd4, 0x9f, 0x0a, 0xeb, 0xb8, 0x89, 0xe8, 0xc2, 0x94, 0xb4, 0xd9, 0x57,
	0xaf, 0xe3, 0x69, 0x67, 0x13, 0xea, 0x75, 0x3c, 0xf5, 0x04, 0x41, 0xcf, 0xa1, 0x9f, 0xd3, 0x4d,
	0x59, 0x6c, 0x67, 0xad, 0x66, 0x57, 0x79, 0x42, 0xd0, 0x58, 0x19, 0x7f, 0xe3, 0xce, 0x5c, 0x4b,
	0xde, 0xd1, 0xa2, 0x4b, 0xa3, 0xee, 0x7c, 0x87, 0xb8, 0x56, 0xfa, 0x46, 0x99, 0xb9, 0x56, 0xb4,
	0x99, 0x54, 0xbb, 0x56, 0x62, 0xf7, 0xab, 0x76, 0xad, 0xe4, 0xde, 0x54, 0xcf, 0xa1, 0x0f, 0xa1,
	0x16, 0xdf, 0x5a, 0xa1, 0xcb, 0xa3, 0x6f, 0xc2, 0x18, 0xca, 0x97, 0xc6, 0xdd, 0xb5, 0xe9, 0x39,
	0xf4, 0x89, 0x06, 0xb3, 0x69, 0x9b, 0x25, 0xa4, 0x3c, 0x53, 0x18, 0xb0, 0x23, 0x6b, 0x5c, 0x1d,
	0x6f, 0x50, 0x48, 0xc5, 0xfb, 0xe1, 0x5f, 0x09, 0x08, 0x37, 0xa4, 0xe7, 0x53, 0xce, 0x01, 0x63,
	0x30, 0x0a, 0x51, 0xa7, 0x83, 0x86, 0xb8, 0x0e, 0xe4, 0xd7, 0x69, 0x21, 0xc2, 0xe5, 0xf4, 0x59,
	0x12, 0x80, 0x8a, 0x24, 0x6d, 0x00, 0x7c, 0x88, 0xba, 0x13, 0xbd, 0x2f, 0x0e, 0xd1, 0x2a, 0x88,
	0x97, 0x80, 0x14, 0xab, 0x9d, 0x02, 0x36, 0x40, 0xb7, 0x5b, 0xa6, 0x7f, 0x36, 0xe3, 0xca, 0xff,
	0x03, 0x00, 0x00, 0xff, 0xff, 0x7c, 0x1c, 0x2e, 0x7d, 0x31, 0x44, 0x00, 0x00,
}
