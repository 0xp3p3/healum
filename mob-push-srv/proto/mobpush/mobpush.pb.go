// Code generated by protoc-gen-go. DO NOT EDIT.
// source: server/mob-push-srv/proto/mobpush/mobpush.proto

/*
Package go_micro_srv_mobpush is a generated protocol buffer package.

It is generated from these files:
	server/mob-push-srv/proto/mobpush/mobpush.proto

It has these top-level messages:
	PushRequest
	PushResponse
	Notification
*/
package go_micro_srv_mobpush

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import go_micro_srv_static "server/static-srv/proto/pubsub"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type PushRequest struct {
	Notifications []*Notification `protobuf:"bytes,1,rep,name=notifications" json:"notifications,omitempty"`
}

func (m *PushRequest) Reset()                    { *m = PushRequest{} }
func (m *PushRequest) String() string            { return proto.CompactTextString(m) }
func (*PushRequest) ProtoMessage()               {}
func (*PushRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *PushRequest) GetNotifications() []*Notification {
	if m != nil {
		return m.Notifications
	}
	return nil
}

type PushResponse struct {
	Success bool  `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	Counts  int32 `protobuf:"varint,2,opt,name=counts" json:"counts,omitempty"`
}

func (m *PushResponse) Reset()                    { *m = PushResponse{} }
func (m *PushResponse) String() string            { return proto.CompactTextString(m) }
func (*PushResponse) ProtoMessage()               {}
func (*PushResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *PushResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *PushResponse) GetCounts() int32 {
	if m != nil {
		return m.Counts
	}
	return 0
}

type Notification struct {
	Tokens   []string                   `protobuf:"bytes,1,rep,name=tokens" json:"tokens,omitempty"`
	Platform int32                      `protobuf:"varint,2,opt,name=platform" json:"platform,omitempty"`
	Message  string                     `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	Title    string                     `protobuf:"bytes,4,opt,name=title" json:"title,omitempty"`
	Topic    string                     `protobuf:"bytes,5,opt,name=topic" json:"topic,omitempty"`
	Badge    int32                      `protobuf:"varint,6,opt,name=badge" json:"badge,omitempty"`
	Category string                     `protobuf:"bytes,7,opt,name=category" json:"category,omitempty"`
	Alert    *go_micro_srv_static.Alert `protobuf:"bytes,8,opt,name=alert" json:"alert,omitempty"`
	Sound    string                     `protobuf:"bytes,9,opt,name=sound" json:"sound,omitempty"`
	Data     map[string]string          `protobuf:"bytes,10,rep,name=data" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Notification) Reset()                    { *m = Notification{} }
func (m *Notification) String() string            { return proto.CompactTextString(m) }
func (*Notification) ProtoMessage()               {}
func (*Notification) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Notification) GetTokens() []string {
	if m != nil {
		return m.Tokens
	}
	return nil
}

func (m *Notification) GetPlatform() int32 {
	if m != nil {
		return m.Platform
	}
	return 0
}

func (m *Notification) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *Notification) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Notification) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *Notification) GetBadge() int32 {
	if m != nil {
		return m.Badge
	}
	return 0
}

func (m *Notification) GetCategory() string {
	if m != nil {
		return m.Category
	}
	return ""
}

func (m *Notification) GetAlert() *go_micro_srv_static.Alert {
	if m != nil {
		return m.Alert
	}
	return nil
}

func (m *Notification) GetSound() string {
	if m != nil {
		return m.Sound
	}
	return ""
}

func (m *Notification) GetData() map[string]string {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*PushRequest)(nil), "go.micro.srv.mobpush.PushRequest")
	proto.RegisterType((*PushResponse)(nil), "go.micro.srv.mobpush.PushResponse")
	proto.RegisterType((*Notification)(nil), "go.micro.srv.mobpush.Notification")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for MobpushService service

type MobpushServiceClient interface {
	Subscribe(ctx context.Context, in *go_micro_srv_static.SubscribeRequest, opts ...client.CallOption) (*go_micro_srv_static.SubscribeResponse, error)
	Push(ctx context.Context, in *PushRequest, opts ...client.CallOption) (*PushResponse, error)
}

type mobpushServiceClient struct {
	c           client.Client
	serviceName string
}

func NewMobpushServiceClient(serviceName string, c client.Client) MobpushServiceClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "go.micro.srv.mobpush"
	}
	return &mobpushServiceClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *mobpushServiceClient) Subscribe(ctx context.Context, in *go_micro_srv_static.SubscribeRequest, opts ...client.CallOption) (*go_micro_srv_static.SubscribeResponse, error) {
	req := c.c.NewRequest(c.serviceName, "MobpushService.Subscribe", in)
	out := new(go_micro_srv_static.SubscribeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mobpushServiceClient) Push(ctx context.Context, in *PushRequest, opts ...client.CallOption) (*PushResponse, error) {
	req := c.c.NewRequest(c.serviceName, "MobpushService.Push", in)
	out := new(PushResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MobpushService service

type MobpushServiceHandler interface {
	Subscribe(context.Context, *go_micro_srv_static.SubscribeRequest, *go_micro_srv_static.SubscribeResponse) error
	Push(context.Context, *PushRequest, *PushResponse) error
}

func RegisterMobpushServiceHandler(s server.Server, hdlr MobpushServiceHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&MobpushService{hdlr}, opts...))
}

type MobpushService struct {
	MobpushServiceHandler
}

func (h *MobpushService) Subscribe(ctx context.Context, in *go_micro_srv_static.SubscribeRequest, out *go_micro_srv_static.SubscribeResponse) error {
	return h.MobpushServiceHandler.Subscribe(ctx, in, out)
}

func (h *MobpushService) Push(ctx context.Context, in *PushRequest, out *PushResponse) error {
	return h.MobpushServiceHandler.Push(ctx, in, out)
}

func init() { proto.RegisterFile("server/mob-push-srv/proto/mobpush/mobpush.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 439 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x52, 0xcd, 0x8b, 0x13, 0x31,
	0x1c, 0x75, 0xfa, 0xb5, 0x9d, 0x74, 0x15, 0x09, 0x8b, 0x84, 0x39, 0xd5, 0x01, 0x65, 0x40, 0x77,
	0x2a, 0xf5, 0xa0, 0x78, 0x5a, 0x41, 0xc1, 0x8b, 0x1f, 0x64, 0x0f, 0x5e, 0xbc, 0x64, 0xd2, 0xdf,
	0x76, 0xc3, 0xb6, 0x93, 0x31, 0xbf, 0x64, 0xa0, 0x7f, 0x9d, 0x7f, 0x99, 0x20, 0xf9, 0x68, 0xe9,
	0x42, 0x71, 0x4f, 0x99, 0xf7, 0xf2, 0xf2, 0xde, 0x24, 0xbf, 0x47, 0x16, 0x08, 0xa6, 0x07, 0xb3,
	0xd8, 0xea, 0xe6, 0xb2, 0x73, 0x78, 0x7b, 0x89, 0xa6, 0x5f, 0x74, 0x46, 0x5b, 0xed, 0x29, 0xcf,
	0xec, 0xd7, 0x3a, 0xb0, 0xf4, 0x62, 0xad, 0xeb, 0xad, 0x92, 0x46, 0xd7, 0x68, 0xfa, 0x3a, 0xed,
	0x15, 0xaf, 0x92, 0x0d, 0x5a, 0x61, 0x95, 0x3c, 0x32, 0xe9, 0x5c, 0x83, 0xae, 0x49, 0x4b, 0xb4,
	0x28, 0x7f, 0x92, 0xd9, 0x0f, 0x87, 0xb7, 0x1c, 0x7e, 0x3b, 0x40, 0x4b, 0xbf, 0x90, 0xc7, 0xad,
	0xb6, 0xea, 0x46, 0x49, 0x61, 0x95, 0x6e, 0x91, 0x65, 0xf3, 0x61, 0x35, 0x5b, 0x96, 0xf5, 0xa9,
	0xa4, 0xfa, 0xdb, 0x91, 0x94, 0xdf, 0x3f, 0x58, 0x5e, 0x91, 0xf3, 0x68, 0x8c, 0x9d, 0x6e, 0x11,
	0x28, 0x23, 0x67, 0xe8, 0xa4, 0x04, 0xf4, 0x9e, 0x59, 0x35, 0xe5, 0x7b, 0x48, 0x9f, 0x91, 0x89,
	0xd4, 0xae, 0xb5, 0xc8, 0x06, 0xf3, 0xac, 0x1a, 0xf3, 0x84, 0xca, 0xbf, 0x03, 0x72, 0x7e, 0x9c,
	0xe0, 0x85, 0x56, 0xdf, 0x41, 0xfa, 0xab, 0x9c, 0x27, 0x44, 0x0b, 0x32, 0xed, 0x36, 0xc2, 0xde,
	0x68, 0xb3, 0x4d, 0x16, 0x07, 0xec, 0x63, 0xb7, 0x80, 0x28, 0xd6, 0xc0, 0x86, 0xf3, 0xac, 0xca,
	0xf9, 0x1e, 0xd2, 0x0b, 0x32, 0xb6, 0xca, 0x6e, 0x80, 0x8d, 0x02, 0x1f, 0x41, 0x60, 0x75, 0xa7,
	0x24, 0x1b, 0x27, 0xd6, 0x03, 0xcf, 0x36, 0x62, 0xb5, 0x06, 0x36, 0x09, 0xf6, 0x11, 0xf8, 0x5c,
	0x29, 0x2c, 0xac, 0xb5, 0xd9, 0xb1, 0xb3, 0x20, 0x3f, 0x60, 0xfa, 0x86, 0x8c, 0xc5, 0x06, 0x8c,
	0x65, 0xd3, 0x79, 0x56, 0xcd, 0x96, 0xc5, 0xfd, 0x07, 0x8c, 0xa3, 0xa9, 0x3f, 0x7a, 0x05, 0x8f,
	0x42, 0x9f, 0x81, 0xda, 0xb5, 0x2b, 0x96, 0xc7, 0xe4, 0x00, 0xe8, 0x15, 0x19, 0xad, 0x84, 0x15,
	0x8c, 0x84, 0x39, 0xbc, 0x7e, 0x78, 0x0e, 0xf5, 0x27, 0x61, 0xc5, 0xe7, 0xd6, 0x9a, 0x1d, 0x0f,
	0x27, 0x8b, 0x77, 0x24, 0x3f, 0x50, 0xf4, 0x29, 0x19, 0xde, 0xc1, 0x2e, 0x4c, 0x20, 0xe7, 0xfe,
	0xd3, 0xc7, 0xf6, 0x62, 0xe3, 0x20, 0xbc, 0x5c, 0xce, 0x23, 0xf8, 0x30, 0x78, 0x9f, 0x2d, 0xff,
	0x64, 0xe4, 0xc9, 0xd7, 0x98, 0x70, 0x0d, 0xa6, 0x57, 0x12, 0xe8, 0x2f, 0x92, 0x5f, 0xbb, 0x06,
	0xa5, 0x51, 0x0d, 0xd0, 0x17, 0x27, 0xef, 0x74, 0xd8, 0x4f, 0x95, 0x2a, 0x5e, 0x3e, 0x24, 0x8b,
	0x05, 0x29, 0x1f, 0xd1, 0xef, 0x64, 0xe4, 0x2b, 0x43, 0x9f, 0x9f, 0xbe, 0xe5, 0x51, 0x4f, 0x8b,
	0xf2, 0x7f, 0x92, 0xbd, 0x61, 0x33, 0x09, 0x1d, 0x7f, 0xfb, 0x2f, 0x00, 0x00, 0xff, 0xff, 0x67,
	0x7e, 0xe1, 0x8d, 0x59, 0x03, 0x00, 0x00,
}
